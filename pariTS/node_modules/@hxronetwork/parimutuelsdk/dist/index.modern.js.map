{"version":3,"file":"index.modern.js","sources":["../src/constants/parimutuel.ts","../src/borsh/Version.ts","../src/instructions/ata.ts","../src/borsh/FixedFees.ts","../src/borsh/LinearFees.ts","../src/borsh/TwoTieredFees.ts","../src/types/enum.ts","../src/borsh/Network.ts","../src/borsh/Store.ts","../src/borsh/Market.ts","../src/borsh/Parimutuel.ts","../src/borsh/TraderAccount.ts","../src/borsh/TraderPositionAccount.ts","../src/borsh/TraderEntryAccount.ts","../src/borsh/TraderSequenceNumber.ts","../src/borsh/args.ts","../src/borsh/schema.ts","../src/instructions/attachCookie.ts","../src/instructions/network.ts","../src/instructions/market.ts","../src/instructions/updatePrice.ts","../src/instructions/networkTraderFeePayer.ts","../src/instructions/traderAccounts.ts","../src/instructions/traderSequenceNumber.ts","../src/instructions/traderPositionAccount.ts","../src/instructions/parimutuel.ts","../src/instructions/store.ts","../src/instructions/placePosition.ts","../src/instructions/settlePosition.ts","../src/instructions/transferFunds.ts","../src/instructions/withdrawFee.ts","../src/instructions/destroyParimutuel.ts","../src/instructions/destroyPositionEntry.ts","../src/instructions/destroyPosition.ts","../src/utils/borsh.ts","../src/utils/crypto.ts","../src/utils/number.ts","../src/utils/parimutuel.ts","../src/utils/utils.ts","../src/utils/pubkey.ts","../src/utils/rpc.ts","../src/utils/time.ts","../src/utils/decode.ts","../src/utils/connection.ts","../src/web3/config.ts","../src/transactions/attachCookie.ts","../src/transactions/createNetworkTraderFeePayer.ts","../src/transactions/createParimutuel.ts","../src/transactions/createTraderAccounts.ts","../src/transactions/createTraderPositionAccount.ts","../src/transactions/createStore.ts","../src/transactions/updatePrice.ts","../src/transactions/placePosition.ts","../src/transactions/settlePosition.ts","../src/transactions/withdrawFee.ts","../src/transactions/depositFee.ts","../src/transactions/transferToken.ts","../src/transactions/updateNetwork.ts","../src/transactions/destroyParimutuel.ts","../src/transactions/destroyPositionEntry.ts","../src/transactions/destroyPosition.ts","../src/queries/getNetwork.ts","../src/queries/getMarkets.ts","../src/queries/getParimutuels.ts","../src/queries/getPositions.ts","../src/queries/getEntries.ts","../src/queries/getFees.ts","../src/queries/getNetworkTraderAccount.ts","../src/queries/getTraderFeePayerAccount.ts","../src/queries/getStore.ts","../src/web3/web3.ts"],"sourcesContent":["export const PARIMUTUEL_SEED = 'parimutuel';\nexport const NETWORK_SEED = 'network';\nexport const MARKET_SEED = 'market';\nexport const STORE_SEED = 'store';\nexport const HONEYPOT_SEED = 'honeypot';\nexport const NETWORK_TRADER_ACCOUNT_SEED = 'network_trader_account';\nexport const NETWORK_FEE_PAYER_SEED = 'network_trader_fee_payer';\nexport const MARKET_TRADER_ACCOUNT_SEED = 'market_trader_account';\nexport const TRADER_POSITION_ACCOUNT_SEED = 'parimutuel_trader_position';\nexport const TRADER_ENTRY_ACCOUNT_SEED = 'parimutuel_trader_entry';\nexport const TRADER_SEQUENCE_SEED = 'trader_sequence';\n\nexport const MIN_1 = 60;\nexport const MIN_5 = 300;\nexport const MIN_15 = 900;\nexport const HR_1 = 3600;\nexport const DAY_1 = 86400;\n\nexport const GET_MULTIPLE_ACCOUNTS_LIMIT = 99; // solana sdk limit\n","export enum Version {\n  Uninitialized,\n  NetworkV1,\n  MarketV1,\n  StoreV1,\n  ParimutuelV1,\n  TraderAccountV1,\n  ParimutuelTraderPositionAccountV1,\n  TraderSequenceNumberV1,\n  FixedFeesV1,\n  LinearFeesV1,\n}\n","import {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\n\nexport const createAssociatedTokenAccountInstruction = (\n  associatedTokenPubkey: PublicKey,\n  payerPubkey: PublicKey,\n  walletPubkey: PublicKey,\n  splTokenMintPubkey: PublicKey\n): TransactionInstruction => {\n  const keys = [\n    {\n      pubkey: payerPubkey,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenPubkey,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n","import BN from 'bn.js';\n\nexport class FixedFees {\n  enum: number = 1;\n  version: number;\n  protocolFeeBps: BN;\n  settlementFeeBps: BN;\n  _padding1: number = 0;\n  _padding2: number = 0;\n  _padding8: BN = new BN(0);\n  _padding16: BN = new BN(0);\n  _padding8_0: BN = new BN(0);\n  _padding8_1: BN = new BN(0);\n  _padding8_2: BN = new BN(0);\n  _padding8_3: BN = new BN(0);\n\n  constructor(args: {\n    version: number;\n    protocolFeeBps: number;\n    settlementFeeBps: number;\n  }) {\n    this.version = args.version;\n    this.protocolFeeBps = new BN(args.protocolFeeBps);\n    this.settlementFeeBps = new BN(args.settlementFeeBps);\n  }\n}\n","import BN from 'bn.js';\n\nexport class LinearFees {\n  enum: number = 2;\n  version: number;\n  protocolTokenRequiredForMinFee: BN;\n  minProtocolFeeBps: number;\n  maxProtocolFeeBps: number;\n  minSettlementFeeBps: number;\n  maxSettlementFeeBps: number;\n  _padding1: number = 0;\n  _padding2: number = 0;\n  _padding4: number = 0;\n  _padding8: BN = new BN(0);\n  _padding8_0: BN = new BN(0);\n  _padding8_1: BN = new BN(0);\n  _padding8_2: BN = new BN(0);\n  _padding8_3: BN = new BN(0);\n\n  constructor(args: {\n    version: number;\n    protocolTokenRequiredForMinFee: BN;\n    minProtocolFeeBps: number;\n    maxProtocolFeeBps: number;\n    minSettlementFeeBps: number;\n    maxSettlementFeeBps: number;\n  }) {\n    this.version = args.version;\n    this.protocolTokenRequiredForMinFee = args.protocolTokenRequiredForMinFee;\n    this.minProtocolFeeBps = args.minProtocolFeeBps;\n    this.maxProtocolFeeBps = args.maxProtocolFeeBps;\n    this.minSettlementFeeBps = args.minSettlementFeeBps;\n    this.maxSettlementFeeBps = args.maxSettlementFeeBps;\n  }\n}\n","import BN from 'bn.js';\n\nimport { LinearFees } from './LinearFees'\n\nexport class TwoTieredFees extends LinearFees {\n  enum: number = 3;\n\n  constructor(args: {\n    version: number;\n    protocolTokenRequiredForMinFee: BN;\n    minProtocolFeeBps: number;\n    maxProtocolFeeBps: number;\n    minSettlementFeeBps: number;\n    maxSettlementFeeBps: number;\n  }) {\n    super(args);\n  }\n}\n","export enum CryptoEnum {\n  SOLANA = 'solana',\n  USDC = 'usdc',\n  HXRO = 'hxro',\n}\n\nexport enum MarketEnum {\n  PARIMUTUEL = 'parimutuel',\n  OPTIONS = 'options',\n}\n\nexport enum MarketTypeEnum {\n  CRYPTO = 'crypto',\n  FINANCIAL = 'financial',\n  SPORTS = 'sports',\n}\n\nexport enum MarketPairEnum {\n  BTCUSD = 'BTCUSD',\n  SOLUSD = 'SOLUSD',\n  ETHUSD = 'ETHUSD',\n  HXROUSD = 'HXROUSD',\n}\n\nexport enum CurrencyEnum {\n  USDC = 'USDC',\n  HXRO = 'HXRO',\n}\n\nexport enum DurationEnum {\n  ONE_MIN = '1min',\n  FIVE_MIN = '5min',\n  FIFTEEN_MIN = '15min',\n  ONE_HOUR = '1hour',\n  ONE_DAY = '1day',\n}\n\nexport enum MarketStatusEnum {\n  UPCOMING = 'upcoming',\n  LIVE = 'live',\n  SETTLED = 'settled',\n}\n\nexport enum PositionSideEnum {\n  SHORT = 1,\n  LONG = 0,\n}\n","import { LinearFees } from './LinearFees';\n\nexport class Network {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  authority: string;\n  protocolToken: string;\n  settlementToken: string;\n  protocolProductOracle: string;\n  protocolPriceOracle: string;\n  protocolFeeCollector: string;\n  settlementFeeCollector: string;\n  fee: LinearFees;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    authority: string;\n    protocolToken: string;\n    settlementToken: string;\n    protocolProductOracle: string;\n    protocolPriceOracle: string;\n    protocolFeeCollector: string;\n    settlementFeeCollector: string;\n    fee: LinearFees;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.authority = args.authority;\n    this.protocolToken = args.protocolToken;\n    this.settlementToken = args.settlementToken;\n    this.protocolProductOracle = args.protocolProductOracle;\n    this.protocolPriceOracle = args.protocolPriceOracle;\n    this.protocolFeeCollector = args.protocolFeeCollector;\n    this.settlementFeeCollector = args.settlementFeeCollector;\n    this.fee = args.fee;\n  }\n}\n","import { FixedFees } from './FixedFees';\n\nexport class Store {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  marketKey: string;\n  wallet: string;\n  protocolFeeCollector: string;\n  settlementFeeCollector: string;\n  fee: FixedFees;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    marketKey: string;\n    wallet: string;\n    protocolFeeCollector: string;\n    settlementFeeCollector: string;\n    fee: FixedFees;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.marketKey = args.marketKey;\n    this.wallet = args.wallet;\n    this.protocolFeeCollector = args.protocolFeeCollector;\n    this.settlementFeeCollector = args.settlementFeeCollector;\n    this.fee = args.fee;\n  }\n}\n","import BN from 'bn.js';\n\nimport { FixedFees } from './FixedFees';\n\nexport class Market {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  authority: string;\n  network: string;\n  underlyingProductOracle: string;\n  underlyingPriceOracle: string;\n  duration: BN;\n  contractSize: BN;\n  protocolFeeCollector: string;\n  settlementFeeCollector: string;\n  fee: FixedFees;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    authority: string;\n    network: string;\n    underlyingProductOracle: string;\n    underlyingPriceOracle: string;\n    duration: BN;\n    contractSize: BN;\n    protocolFeeCollector: string;\n    settlementFeeCollector: string;\n    fee: FixedFees;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.authority = args.authority;\n    this.network = args.network;\n    this.underlyingProductOracle = args.underlyingProductOracle;\n    this.underlyingPriceOracle = args.underlyingPriceOracle;\n    this.duration = args.duration;\n    this.contractSize = args.contractSize;\n    this.protocolFeeCollector = args.protocolFeeCollector;\n    this.settlementFeeCollector = args.settlementFeeCollector;\n    this.fee = args.fee;\n  }\n}\n","import BN from 'bn.js';\n\nimport { LinearFees } from './LinearFees';\n\nexport class Parimutuel {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  strike: BN;\n  index: BN;\n  slot: BN;\n  marketOpen: BN;\n  marketClose: BN;\n  timeWindowStart: BN;\n  marketKey: string;\n  honeypot: string;\n  numPositions: BN;\n  numPositionsSettled: BN;\n  numPositionsDestroyed: BN;\n  expired: boolean;\n  rewardPerShare: BN;\n  activeLongPositions: BN;\n  activeShortPositions: BN;\n  networkFees: LinearFees;\n  marketFees: LinearFees;\n  creator: string;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    strike: BN;\n    index: BN;\n    slot: BN;\n    marketOpen: BN;\n    marketClose: BN;\n    timeWindowStart: BN;\n    marketKey: string;\n    honeypot: string;\n    numPositions: BN;\n    numPositionsSettled: BN;\n    numPositionsDestroyed: BN;\n    expired: boolean;\n    rewardPerShare: BN;\n    activeLongPositions: BN;\n    activeShortPositions: BN;\n    networkFees: LinearFees;\n    marketFees: LinearFees;\n    creator: string;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.strike = args.strike;\n    this.index = args.index;\n    this.slot = args.slot;\n    this.marketOpen = args.marketOpen;\n    this.marketClose = args.marketClose;\n    this.timeWindowStart = args.timeWindowStart;\n    this.marketKey = args.marketKey;\n    this.honeypot = args.honeypot;\n    this.numPositions = args.numPositions;\n    this.numPositionsSettled = args.numPositionsSettled;\n    this.numPositionsDestroyed = args.numPositionsDestroyed;\n    this.expired = args.expired;\n    this.rewardPerShare = args.rewardPerShare;\n    this.activeLongPositions = args.activeLongPositions;\n    this.activeShortPositions = args.activeShortPositions;\n    this.networkFees = args.networkFees;\n    this.marketFees = args.marketFees;\n    this.creator = args.creator;\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderAccount {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  traderWallet: string;\n  aggregationLevelKey: string;\n  profit: BN;\n  loss: BN;\n  wins: BN;\n  losses: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    traderWallet: string;\n    aggregationLevelKey: string;\n    profit: number;\n    loss: number;\n    wins: number;\n    losses: number;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.traderWallet = args.traderWallet;\n    this.aggregationLevelKey = args.aggregationLevelKey;\n    this.profit = new BN(args.profit);\n    this.loss = new BN(args.loss);\n    this.wins = new BN(args.wins);\n    this.losses = new BN(args.losses);\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderPositionAccount {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  sequenceNumber: BN;\n  parimutuel: string;\n  traderWallet: string;\n  hasStore: boolean;\n  store: string;\n  longPosition: BN;\n  shortPosition: BN;\n  numEntries: BN;\n  paid: boolean;\n  payout: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    sequenceNumber: BN;\n    parimutuel: string;\n    traderWallet: string;\n    hasStore: boolean;\n    store: string;\n    longPosition: BN;\n    shortPosition: BN;\n    numEntries: BN;\n    paid: boolean;\n    payout: BN;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.sequenceNumber = args.sequenceNumber;\n    this.parimutuel = args.parimutuel;\n    this.traderWallet = args.traderWallet;\n    this.hasStore = args.hasStore;\n    this.store = args.store;\n    this.longPosition = args.longPosition;\n    this.shortPosition = args.shortPosition;\n    this.numEntries = args.numEntries;\n    this.paid = args.paid;\n    this.payout = args.payout;\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderEntryAccount {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  traderPosition: string;\n  sequenceNumber: BN;\n  traderWallet: string;\n  direction: number;\n  amount: BN;\n  timestamp: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    traderPosition: string;\n    sequenceNumber: BN;\n    traderWallet: string;\n    direction: number;\n    amount: BN;\n    timestamp: BN;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.traderPosition = args.traderPosition;\n    this.sequenceNumber = args.sequenceNumber;\n    this.traderWallet = args.traderWallet;\n    this.direction = args.direction;\n    this.amount = args.amount;\n    this.timestamp = args.timestamp;\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderSequenceNumber {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  parimutuel: string;\n  traderKey: string;\n  sequenceNumber: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    parimutuel: string;\n    traderKey: string;\n    sequenceNumber: BN;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.parimutuel = args.parimutuel;\n    this.traderKey = args.traderKey;\n    this.sequenceNumber = args.sequenceNumber;\n  }\n}\n","import BN from 'bn.js';\nimport { FixedFees } from './FixedFees';\nimport { LinearFees } from './LinearFees';\nimport { TwoTieredFees } from './TwoTieredFees';\n\nexport type DynamicFees = LinearFees | TwoTieredFees;\n\nexport class NetworkArgs {\n  instruction: number = 0;\n  fees: DynamicFees;\n\n  constructor(args: { fees: DynamicFees }) {\n    this.fees = args.fees;\n  }\n}\n\nexport class NetworkUpdateArgs {\n  instruction: number = 14;\n  fees: DynamicFees;\n\n  constructor(args: { fees: DynamicFees }) {\n    this.fees = args.fees;\n  }\n}\n\nexport class MarketArgs {\n  instruction: number = 1;\n  duration: BN;\n  contractSize: BN;\n  fees: FixedFees;\n\n  constructor(args: {\n    duration: number;\n    contractSize: number;\n    fees: FixedFees;\n  }) {\n    this.duration = new BN(args.duration);\n    this.contractSize = new BN(args.contractSize);\n    this.fees = args.fees;\n  }\n}\n\nexport class StoreArgs {\n  instruction: number = 2;\n  fees: FixedFees;\n\n  constructor(args: { fees: FixedFees }) {\n    this.fees = args.fees;\n  }\n}\n\nexport class ParimutuelArgs {\n  instruction: number = 3;\n  marketOpen: BN;\n  marketClose: BN;\n  timeWindowStart: BN;\n\n  constructor(args: {\n    marketOpen: number;\n    marketClose: number;\n    timeWindowStart: number;\n  }) {\n    this.marketOpen = new BN(args.marketOpen);\n    this.marketClose = new BN(args.marketClose);\n    this.timeWindowStart = new BN(args.timeWindowStart);\n  }\n}\n\nexport class UpdatePriceArgs {\n  instruction: number = 4;\n}\n\nexport class TraderAccountsArgs {\n  instruction: number = 5;\n}\n\nexport class TraderPositionAccountArgs {\n  instruction: number = 6;\n}\n\nexport class TraderSequenceNumberArgs {\n  instruction: number = 7;\n}\n\nexport class AttachCookieArgs {\n  instruction: number = 8;\n}\n\nexport class UpdatePositionArgs {\n  instruction: number = 9;\n  size: BN;\n  side: number;\n  seq: BN;\n\n  constructor(args: { size: number; side: number, seq: number }) {\n    this.size = new BN(args.size);\n    this.side = args.side;\n    this.seq = new BN(args.seq);\n  }\n}\n\nexport class SettlePositionArgs {\n  instruction: number = 10;\n}\n\nexport class NetworkTraderFeePayerArgs {\n  instruction: number = 11;\n}\n\nexport class WithdrawFeeArgs {\n  instruction: number = 12;\n  amount: BN;\n\n  constructor(args: { amount: number }) {\n    this.amount = new BN(args.amount);\n  }\n}\n\nexport class DestroyParimutuelArgs {\n  instruction: number = 15;\n}\n\nexport class DestroyPositionArgs {\n  instruction: number = 18;\n}\n\nexport class DestroyPositionEntryArgs {\n  instruction: number = 17;\n}\n","import {\n  NetworkArgs,\n  NetworkUpdateArgs,\n  MarketArgs,\n  StoreArgs,\n  ParimutuelArgs,\n  UpdatePriceArgs,\n  TraderAccountsArgs,\n  TraderPositionAccountArgs,\n  TraderSequenceNumberArgs,\n  AttachCookieArgs,\n  UpdatePositionArgs,\n  SettlePositionArgs,\n  NetworkTraderFeePayerArgs,\n  WithdrawFeeArgs,\n  DestroyParimutuelArgs,\n  DestroyPositionArgs,\n  DestroyPositionEntryArgs,\n} from './args';\n\nimport { FixedFees } from './FixedFees';\nimport { LinearFees } from './LinearFees';\nimport { TwoTieredFees } from './TwoTieredFees';\nimport { Network } from './Network';\nimport { Store } from './Store';\nimport { Market } from './Market';\nimport { Parimutuel } from './Parimutuel';\nimport { TraderAccount } from './TraderAccount';\nimport { TraderSequenceNumber } from './TraderSequenceNumber';\nimport { TraderPositionAccount } from './TraderPositionAccount';\nimport { TraderEntryAccount } from './TraderEntryAccount';\n\n// eslint-disable-next-line\nexport const schema = new Map<any, any>([\n  [\n    NetworkArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['fees', TwoTieredFees], // Supports both: LinearFees | TwoTieredFees\n      ],\n    },\n  ],\n  [\n    NetworkUpdateArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['fees', TwoTieredFees], // Supports both: LinearFees | TwoTieredFees\n      ],\n    },\n  ],\n  [\n    MarketArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['duration', 'u64'],\n        ['contractSize', 'u64'],\n        ['fees', FixedFees],\n      ],\n    },\n  ],\n  [\n    StoreArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['fees', FixedFees],\n      ],\n    },\n  ],\n  [\n    ParimutuelArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['marketOpen', 'u64'],\n        ['marketClose', 'u64'],\n        ['timeWindowStart', 'u64'],\n      ],\n    },\n  ],\n  [\n    UpdatePriceArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    TraderAccountsArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    TraderSequenceNumberArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    TraderPositionAccountArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    AttachCookieArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    UpdatePositionArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['size', 'u64'],\n        ['side', 'u8'],\n        ['seq', 'u64'],\n      ],\n    },\n  ],\n  [\n    SettlePositionArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    NetworkTraderFeePayerArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    WithdrawFeeArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['amount', 'u64'],\n      ],\n    },\n  ],\n  [\n    DestroyParimutuelArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    DestroyPositionArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    DestroyPositionEntryArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    LinearFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['protocolTokenRequiredForMinFee', 'u64'],\n        ['minProtocolFeeBps', 'u16'],\n        ['maxProtocolFeeBps', 'u16'],\n        ['minSettlementFeeBps', 'u16'],\n        ['maxSettlementFeeBps', 'u16'],\n        ['_padding1', 'u8'],\n        ['_padding2', 'u16'],\n        ['_padding4', 'u32'],\n        ['_padding8', 'u64'],\n        ['_padding8_0', 'u64'],\n        ['_padding8_1', 'u64'],\n        ['_padding8_2', 'u64'],\n        ['_padding8_3', 'u64'],\n      ],\n    },\n  ],\n  [\n    TwoTieredFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['protocolTokenRequiredForMinFee', 'u64'],\n        ['minProtocolFeeBps', 'u16'],\n        ['maxProtocolFeeBps', 'u16'],\n        ['minSettlementFeeBps', 'u16'],\n        ['maxSettlementFeeBps', 'u16'],\n        ['_padding1', 'u8'],\n        ['_padding2', 'u16'],\n        ['_padding4', 'u32'],\n        ['_padding8', 'u64'],\n        ['_padding8_0', 'u64'],\n        ['_padding8_1', 'u64'],\n        ['_padding8_2', 'u64'],\n        ['_padding8_3', 'u64'],\n      ],\n    },\n  ],\n  [\n    FixedFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['protocolFeeBps', 'u16'],\n        ['settlementFeeBps', 'u16'],\n        ['_padding1', 'u8'],\n        ['_padding2', 'u16'],\n        ['_padding8', 'u64'],\n        ['_padding16', 'u128'],\n        ['_padding8_0', 'u64'],\n        ['_padding8_1', 'u64'],\n        ['_padding8_2', 'u64'],\n        ['_padding8_3', 'u64'],\n      ],\n    },\n  ],\n  [\n    Network,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['authority', 'pubkeyAsString'],\n        ['protocolToken', 'pubkeyAsString'],\n        ['settlementToken', 'pubkeyAsString'],\n        ['protocolProductOracle', 'pubkeyAsString'],\n        ['protocolPriceOracle', 'pubkeyAsString'],\n        ['protocolFeeCollector', 'pubkeyAsString'],\n        ['settlementFeeCollector', 'pubkeyAsString'],\n        ['fee', LinearFees],\n      ],\n    },\n  ],\n  [\n    Market,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['authority', 'pubkeyAsString'],\n        ['network', 'pubkeyAsString'],\n        ['underlyingProductOracle', 'pubkeyAsString'],\n        ['underlyingPriceOracle', 'pubkeyAsString'],\n        ['duration', 'u64'],\n        ['contractSize', 'u64'],\n        ['protocolFeeCollector', 'pubkeyAsString'],\n        ['settlementFeeCollector', 'pubkeyAsString'],\n        ['fee', FixedFees],\n      ],\n    },\n  ],\n  [\n    Store,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['marketKey', 'pubkeyAsString'],\n        ['wallet', 'pubkeyAsString'],\n        ['protocolFeeCollector', 'pubkeyAsString'],\n        ['settlementFeeCollector', 'pubkeyAsString'],\n        ['fee', LinearFees],\n      ],\n    },\n  ],\n  [\n    Parimutuel,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['strike', 'u64'],\n        ['index', 'u64'],\n        ['slot', 'u64'],\n        ['marketOpen', 'u64'],\n        ['marketClose', 'u64'],\n        ['timeWindowStart', 'u64'],\n        ['marketKey', 'pubkeyAsString'],\n        ['honeypot', 'pubkeyAsString'],\n        ['numPositions', 'u64'],\n        ['numPositionsSettled', 'u64'],\n        ['numPositionsDestroyed', 'u64'],\n        ['expired', 'u8'],\n        ['rewardPerShare', 'u64'],\n        ['activeLongPositions', 'u64'],\n        ['activeShortPositions', 'u64'],\n        ['networkFees', TwoTieredFees],\n        ['marketFees', FixedFees],\n        ['creator', 'pubkeyAsString'],\n      ],\n    },\n  ],\n  [\n    TraderAccount,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['aggregationLevelKey', 'pubkeyAsString'],\n        ['profit', 'u64'],\n        ['loss', 'u64'],\n        ['wins', 'u64'],\n        ['losses', 'u64'],\n      ],\n    },\n  ],\n  [\n    TraderSequenceNumber,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['parimutuel', 'pubkeyAsString'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['sequenceNumber', 'u64'],\n      ],\n    },\n  ],\n  [\n    TraderPositionAccount,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['sequenceNumber', 'u64'],\n        ['parimutuel', 'pubkeyAsString'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['hasStore', 'u8'],\n        ['store', 'pubkeyAsString'],\n        ['longPosition', 'u64'],\n        ['shortPosition', 'u64'],\n        ['numEntries', 'u64'],\n        ['paid', 'u8'],\n        ['payout', 'u64'],\n      ],\n    },\n  ],\n  [\n    TraderEntryAccount,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['traderPosition', 'pubkeyAsString'],\n        ['sequenceNumber', 'u64'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['direction', 'u8'],\n        ['amount', 'u64'],\n        ['timestamp', 'u64'],\n      ],\n    },\n  ],\n]);\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { AttachCookieArgs, schema } from '../borsh';\n\nexport const createAttachCookieInstruction = async (\n  programId: PublicKey,\n  settings: AttachCookieArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  storePubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { NetworkArgs, schema } from '../borsh';\n\nexport const createNetworkInstruction = async (\n  programId: PublicKey,\n  settings: NetworkArgs,\n  networkPubkey: PublicKey,\n  networkWalletPubkey: PublicKey,\n  payerPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: networkProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n\n\nexport const updateNetworkInstruction = async (\n  programId: PublicKey,\n  settings: NetworkArgs,\n  networkPubkey: PublicKey,\n  networkWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<TransactionInstruction> => new TransactionInstruction({\n  keys: [\n    {\n      pubkey: networkPubkey,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: protocolMintPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: protocolProductOraclePubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: protocolPriceOraclePubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: settlementMintPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: networkWalletPubkey,\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: networkProtocolFeeCollectorPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: networkSettlementFeeCollectorPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n  ],\n  programId,\n  data: Buffer.from(serialize(schema, settings)),\n});\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { MarketArgs, schema } from '../borsh';\n\nexport const createMarketInstruction = async (\n  programId: PublicKey,\n  settings: MarketArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  marketWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  marketProtocolFeeCollectorPubkey: PublicKey,\n  marketSettlementFeeCollectorPubkey: PublicKey,\n  payerPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: marketProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { UpdatePriceArgs, schema } from '../borsh';\n\nexport const createUpdatePriceInstruction = async (\n  programId: PublicKey,\n  settings: UpdatePriceArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  parimutuelCreatorPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: parimutuelCreatorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { NetworkTraderFeePayerArgs, schema } from '../borsh';\n\nexport const createNetworkTraderFeePayerInstruction = async (\n  programId: PublicKey,\n  settings: NetworkTraderFeePayerArgs,\n  networkPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  networkTraderFeePayerPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderFeePayerPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { TraderAccountsArgs, schema } from '../borsh';\n\nexport const createTraderAccountInstruction = async (\n  programId: PublicKey,\n  settings: TraderAccountsArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  marketTraderAccountPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { TraderSequenceNumberArgs, schema } from '../borsh';\n\nexport const createTraderSequenceNumberInstruction = async (\n  programId: PublicKey,\n  settings: TraderSequenceNumberArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  traderSequenceNumberPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: traderSequenceNumberPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { TraderPositionAccountArgs, schema } from '../borsh';\n\nexport const createTraderPositionAccountInstruction = async (\n  programId: PublicKey,\n  settings: TraderPositionAccountArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { ParimutuelArgs, schema } from '../borsh';\n\nexport const createParimutuelInstruction = async (\n  programId: PublicKey,\n  settings: ParimutuelArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { StoreArgs, schema } from '../borsh';\n\nexport const createStoreInstruction = async (\n  programId: PublicKey,\n  settings: StoreArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  storeWalletPubkey: PublicKey,\n  payerPubkey: PublicKey,\n  storePubkey: PublicKey,\n  storeProtocolFeeCollectorPubkey: PublicKey,\n  storeSettlementFeeCollectorPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storePubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: storeWalletPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { UpdatePositionArgs, schema } from '../borsh';\n\nexport const createPlacePositionInstruction = async (\n  programId: PublicKey,\n  settings: UpdatePositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  entryAccountPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: entryAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { SettlePositionArgs, schema } from '../borsh';\n\nexport const createSettlePositionInstruction = async (\n  programId: PublicKey,\n  settings: SettlePositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  networkTraderFeePayerPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  marketProtocolFeeCollectorPubkey: PublicKey,\n  marketSettlementFeeCollectorPubkey: PublicKey,\n  marketTraderAccountPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  parimutuelCreatorPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: parimutuelCreatorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: true, // TODO\n      },\n      {\n        pubkey: networkTraderFeePayerPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { SettlePositionArgs, schema } from '../borsh';\n\nexport const createTransferFundsInstruction = async (\n  programId: PublicKey,\n  settings: SettlePositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  marketTraderAccountPubkey: PublicKey,\n  marketProtocolFeeCollectorPubkey: PublicKey,\n  marketSettlementFeeCollectorPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  storePubkey: PublicKey,\n  storeProtocolFeeCollectorPubkey: PublicKey,\n  storeSettlementFeeCollectorPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { WithdrawFeeArgs, schema } from '../borsh';\n\nexport const createWithdrawFeeInstruction = async (\n  programId: PublicKey,\n  settings: WithdrawFeeArgs,\n  networkPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  networkTraderFeePayerPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderFeePayerPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\n\nimport { DestroyParimutuelArgs, schema } from '../borsh';\n\nexport const createDestroyParimutuelInstruction = async (\n  programId: PublicKey,\n  settings: DestroyParimutuelArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  parimutuelCreatorPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  settlementFeeCollector: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: parimutuelCreatorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementFeeCollector,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { DestroyPositionEntryArgs, schema } from '../borsh';\n\nexport const createDestroyPositionEntryInstruction = async (\n  programId: PublicKey,\n  settings: DestroyPositionEntryArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  entryAccountPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: entryAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { DestroyPositionArgs, schema } from '../borsh';\n\nexport const createDestroyPositionInstruction = async (\n  programId: PublicKey,\n  settings: DestroyPositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\n\nexport const extendBorsh = (): void => {\n  // eslint-disable-next-line\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  // eslint-disable-next-line\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  // eslint-disable-next-line\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as string;\n  };\n\n  // eslint-disable-next-line\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: string\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n","import { MintData } from '../types';\n\nexport const getMintDecimals = (\n  mints: MintData[],\n  cryptoAddress: string\n): number => {\n  const found = mints.find((mint) => mint.address === cryptoAddress);\n  return found?.mint.decimals ?? 0;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string =>\n  `${address.slice(0, chars)}...${address.slice(-chars)}`;\n","// old method\nexport const calculateOdd = (position: number, total: number): string =>\n  position && total ? Number(1 / (position / total)).toFixed(2) : \"0\";\n// new method\nexport const calculateNetOdd = (position: number, total: number, rake: number): string =>\n  position && total ? Number(total * (1.0 - rake) / position).toFixed(2) : \"0\";","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport _get from 'lodash/get';\n\nimport { MIN_1, MIN_5, MIN_15, HR_1, DAY_1 } from '../constants';\nimport { Version } from '../borsh';\nimport {\n  MarketPairEnum,\n  MarketPubkey,\n  ParimutuelAccount,\n  MarketStatusEnum,\n} from '../types';\nimport { ParimutuelConfig } from '../web3';\n\nexport const getProtocolMint = (\n  config: ParimutuelConfig,\n  marketPair: MarketPairEnum\n): PublicKey => _get(config.markets, [marketPair, 'PROTOCOL_MINT']);\n\nexport const getSettlementMint = (\n  config: ParimutuelConfig,\n  marketPair: MarketPairEnum\n): PublicKey => _get(config.markets, [marketPair, 'SETTLEMENT_MINT']);\n\nexport const getMarketPubkeys = (\n  config: ParimutuelConfig,\n  marketPair: MarketPairEnum\n): MarketPubkey[] => {\n  const market = [];\n\n  if (_get(config.markets, [marketPair, 'MARKET_60S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_60S']),\n      duration: MIN_1,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_300S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_300S']),\n      duration: MIN_5,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_900S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_900S']),\n      duration: MIN_15,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_3600S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_3600S']),\n      duration: HR_1,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_86400S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_86400S']),\n      duration: DAY_1,\n    });\n  }\n\n  return market;\n};\n\nexport const isExpired = (parimutuel: ParimutuelAccount): boolean => {\n  const { expired } = parimutuel.info.parimutuel;\n  return Boolean(expired);\n};\n\nexport const isLong = (parimutuel: ParimutuelAccount): boolean => {\n  const { strike, index } = parimutuel.info.parimutuel;\n  return index.toNumber() > strike.toNumber();\n};\n\nexport const getMarketStatus = (\n  timeWindowStart: string,\n  marketClose: string,\n  duration: number\n): MarketStatusEnum => {\n  const currentTime = new Date().getTime();\n\n  if (currentTime >= Number(marketClose) + duration * 1000)\n    return MarketStatusEnum.SETTLED;\n\n  if (\n    currentTime >= Number(timeWindowStart) &&\n    currentTime < Number(marketClose) + duration * 1000 // TODO: remove duration\n  ) {\n    return MarketStatusEnum.LIVE;\n  }\n\n  return MarketStatusEnum.UPCOMING;\n};\n\nexport const isMarketAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.MarketV1;\n\nexport const isNetworkAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.NetworkV1;\n\nexport const isStoreAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.StoreV1;\n\nexport const isParimutuelAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.ParimutuelV1;\n\nexport const isTraderAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.TraderAccountV1;\n\nexport const isTraderSequenceNumber = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.TraderSequenceNumberV1;\n\nexport const isTraderPositionAccount = (\n  account: AccountInfo<Buffer>\n): boolean => account.data[0] === Version.ParimutuelTraderPositionAccountV1;\n","import { PublicKey } from '@solana/web3.js';\n\nimport { AddressInfo } from '../types';\n\nexport const notEmpty = <T>(value: T): value is NonNullable<typeof value> =>\n  !!value;\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n): Promise<AddressInfo> => {\n  const key =\n    'pda-' +\n    seeds.reduce((acc, value) => acc + value.toString('hex'), '') +\n    programId.toString();\n\n  if (typeof window !== 'undefined') {\n    const cached = localStorage?.getItem(key);\n    if (cached) {\n      const value = JSON.parse(cached);\n      return [value.key, parseInt(value.nonce)] as [string, number];\n    }\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  if (typeof window !== 'undefined') {\n    localStorage?.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      })\n    );\n  }\n\n  return [result[0].toBase58(), result[1]];\n};\n","import { PublicKey } from '@solana/web3.js';\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport BN from 'bn.js';\n\nimport {\n  NETWORK_SEED,\n  MARKET_SEED,\n  PARIMUTUEL_SEED,\n  MARKET_TRADER_ACCOUNT_SEED,\n  NETWORK_TRADER_ACCOUNT_SEED,\n  HONEYPOT_SEED,\n  TRADER_POSITION_ACCOUNT_SEED,\n  TRADER_ENTRY_ACCOUNT_SEED,\n  NETWORK_FEE_PAYER_SEED,\n  TRADER_SEQUENCE_SEED,\n  STORE_SEED,\n} from '../constants';\nimport { findProgramAddress } from '../utils/utils';\n\nexport const findNetworkPubkey = async (\n  programId: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [Buffer.from(NETWORK_SEED), new Uint8Array(programId.toBuffer())],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketPubkey = async (\n  programId: PublicKey,\n  underlyingProductOraclePubkey: PublicKey,\n  underlyingPriceOraclePubkey: PublicKey,\n  protocolFeeCollectorPubkey: PublicKey,\n  settlementFeeCollectorPubkey: PublicKey,\n  duration: number,\n  contractSize: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(MARKET_SEED),\n      underlyingProductOraclePubkey.toBuffer(),\n      underlyingPriceOraclePubkey.toBuffer(),\n      protocolFeeCollectorPubkey.toBuffer(),\n      settlementFeeCollectorPubkey.toBuffer(),\n      new BN(duration).toBuffer(),\n      new BN(contractSize).toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findParimutuelPubkey = async (\n  programId: PublicKey,\n  marketPubKey: PublicKey,\n  marketOpen: number,\n  timeWindowStart: number,\n  marketClose: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(PARIMUTUEL_SEED),\n      marketPubKey.toBuffer(),\n      new Uint8Array(new BN(marketOpen).toArray('le', 8)),\n      new Uint8Array(new BN(marketClose).toArray('le', 8)),\n      new Uint8Array(new BN(timeWindowStart).toArray('le', 8)),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkProtocolFeeCollectorPubkey = async (\n  networkWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      networkWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      protocolMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkSettlementFeeCollectorPubkey = async (\n  networkWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      networkWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      settlementMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketProtocolFeeCollectorPubkey = async (\n  marketWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      marketWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      protocolMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketSettlementFeeCollectorPubkey = async (\n  marketWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      marketWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      settlementMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findAssociatedTokenAccountPubkey = async (\n  userWalletPubkey: PublicKey,\n  mintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      userWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      mintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkTraderAccountPubkey = async (\n  programId: PublicKey,\n  userWalletPubkey: PublicKey,\n  networkPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(NETWORK_TRADER_ACCOUNT_SEED),\n      networkPubkey.toBuffer(),\n      userWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketTraderAccountPubkey = async (\n  programId: PublicKey,\n  userWalletPubkey: PublicKey,\n  marketPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(MARKET_TRADER_ACCOUNT_SEED),\n      marketPubkey.toBuffer(),\n      userWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findHoneypotPubkey = async (\n  programId: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [Buffer.from(HONEYPOT_SEED), parimutuelPubkey.toBuffer()],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findTraderPositionAccountPubkey = async (\n  programId: PublicKey,\n  userWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(TRADER_POSITION_ACCOUNT_SEED),\n      parimutuelPubkey.toBuffer(),\n      userWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findEntryAccountPubkey = async (\n  programId: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  sequenceNumber: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(TRADER_ENTRY_ACCOUNT_SEED),\n      traderPositionAccountPubkey.toBuffer(),\n      new Uint8Array(new BN(sequenceNumber).toArray('le', 8)),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkTraderFeePayerPubkey = async (\n  programId: PublicKey,\n  networkTraderAccountPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(NETWORK_FEE_PAYER_SEED),\n      networkTraderAccountPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findTraderSequenceNumberPubkey = async (\n  programId: PublicKey,\n  parimutuelPubkey: PublicKey,\n  sequenceNumber: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(TRADER_SEQUENCE_SEED),\n      parimutuelPubkey.toBuffer(),\n      new Uint8Array(new BN(sequenceNumber).toArray('le', 8)),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findStorePubkey = async (\n  programId: PublicKey,\n  marketPubkey: PublicKey,\n  storeWalletPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(STORE_SEED),\n      marketPubkey.toBuffer(),\n      storeWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport _chunk from 'lodash/chunk';\n\nimport { Accounts } from '../types';\nimport { GET_MULTIPLE_ACCOUNTS_LIMIT } from '../constants';\n\nconst getMultipleAccountsCore = async (\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<Accounts> => {\n  const args = [pubkeys.map((key) => key.toBase58()), { commitment: 'recent' }];\n  // @ts-ignore\n  const res = await connection._rpcRequest('getMultipleAccounts', args);\n  if (res.error) {\n    throw new Error(\n      'failed to get info about accounts ' +\n        pubkeys.map((key) => key.toBase58()).join(', ') +\n        ': ' +\n        res.error.message\n    );\n  }\n  if (!res.result) return [];\n\n  const accounts: Array<null | AccountInfo<Buffer>> = res.result.value.map(\n    // eslint-disable-next-line\n    (account: AccountInfo<any>) => {\n      if (!account) return null;\n\n      const { executable, owner, lamports, data } = account;\n\n      return {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n  );\n\n  return accounts.map((account, idx) => {\n    if (account === null) {\n      return null;\n    }\n    return {\n      pubkey: pubkeys[idx],\n      account,\n    };\n  });\n};\n\nexport const getMultipleAccounts = async (\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<Accounts> => {\n  if (pubkeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {\n    const result = await getMultipleAccountsCore(connection, pubkeys);\n    return result;\n  } else {\n    const batches = _chunk(pubkeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n    const results = await Promise.all<Accounts>(\n      batches.map((batch) => getMultipleAccountsCore(connection, batch))\n    );\n    return results.flat();\n  }\n};\n","import moment from 'moment';\nimport { ParimutuelTime } from '../types';\n\nexport const getHistoricalTimes = (\n  marketPubkey: string,\n  duration: number,\n  number: number\n): ParimutuelTime[] => {\n  const currentTime = new Date().getTime();\n  const elapsed = currentTime % duration;\n  const startTime = currentTime - elapsed;\n\n  const times: ParimutuelTime[] = Array.from(Array(number).keys()).map(\n    (num) => {\n      return { marketPubkey, startTime: startTime - num * duration, duration };\n    }\n  );\n\n  return times.reverse();\n};\n\nexport const getUpcomingTimes = (\n  marketPubkey: string,\n  duration: number,\n  number: number\n): ParimutuelTime[] => {\n  const currentTime = new Date().getTime();\n  const elapsed = currentTime % duration;\n  const startTime = currentTime - elapsed;\n\n  const times: ParimutuelTime[] = Array.from(Array(number).keys()).map(\n    (num) => {\n      return { marketPubkey, startTime: startTime + num * duration, duration };\n    }\n  );\n\n  return times.reverse();\n};\n\nexport const formatDuration = (duration: number): string => {\n  const hours = Math.floor(duration / (60 * 60));\n  const minutes = Math.floor((duration / 60) % 60);\n  const seconds = Math.floor(duration % 60);\n\n  if (hours === 24) return '1 day';\n  if (hours === 1) return '1 hour';\n  if (minutes === 15) return '15 min';\n  if (minutes === 5) return '5 min';\n  if (seconds === 60) return '1 min';\n  return '1 MIN';\n};\n\nexport const formatTime = (unixTime: number): string =>\n  moment.unix(unixTime / 1000).format('MM/DD/YYYY hh:mm:ss');\n\nexport const formatDate = (unixTime: number): string =>\n  moment.unix(unixTime / 1000).format('MM/DD/YYYY');\n\nexport const formatHour = (unixTime: number): string =>\n  moment.unix(unixTime / 1000).format('hh:mm:ss');\n","import {\n  schema,\n  FixedFees,\n  LinearFees,\n  Network,\n  Store,\n  Market,\n  Parimutuel,\n  TraderAccount,\n  TraderSequenceNumber,\n  TraderPositionAccount,\n  TraderEntryAccount,\n} from '../borsh';\nimport { PublicKey } from '@solana/web3.js';\nimport {\n  AccountLayout,\n  AccountInfo,\n  MintInfo,\n  MintLayout,\n  u64,\n} from '@solana/spl-token';\nimport { deserializeUnchecked } from 'borsh';\n\nimport { extendBorsh } from './borsh'; // need to extend borsh custom reader and writer\n\nextendBorsh();\n\nexport const decodeAccount = (data: Buffer): AccountInfo => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\nexport const decodeMint = (data: Buffer): MintInfo => {\n  if (data.length !== MintLayout.span) {\n    throw new Error('Not a valid Mint');\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo;\n};\n\nexport const decodeFixedFees = (buffer: Buffer): FixedFees =>\n  deserializeUnchecked(schema, FixedFees, buffer);\n\nexport const decodeLinearFees = (buffer: Buffer): LinearFees =>\n  deserializeUnchecked(schema, LinearFees, buffer);\n\nexport const decodeNetwork = (buffer: Buffer): Network => {\n  return deserializeUnchecked(schema, Network, buffer);\n};\n\nexport const decodeStore = (buffer: Buffer): Store => {\n  return deserializeUnchecked(schema, Store, buffer);\n};\n\nexport const decodeMarket = (buffer: Buffer): Market => {\n  return deserializeUnchecked(schema, Market, buffer);\n};\n\nexport const decodeParimutuel = (buffer: Buffer): Parimutuel => {\n  return deserializeUnchecked(schema, Parimutuel, buffer);\n};\n\nexport const decodeTraderAccount = (buffer: Buffer): TraderAccount => {\n  return deserializeUnchecked(schema, TraderAccount, buffer);\n};\n\nexport const decodeTraderSequenceNumber = (\n  buffer: Buffer\n): TraderSequenceNumber => {\n  return deserializeUnchecked(schema, TraderSequenceNumber, buffer);\n};\n\nexport const decodeTraderPositionAccount = (\n  buffer: Buffer\n): TraderPositionAccount => {\n  return deserializeUnchecked(schema, TraderPositionAccount, buffer);\n};\n\nexport const decodeTraderEntryAccount = (\n  buffer: Buffer\n): TraderEntryAccount => {\n  return deserializeUnchecked(schema, TraderEntryAccount, buffer);\n};\n","/* eslint-disable no-console */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n  RpcResponseAndContext,\n} from '@solana/web3.js';\nimport { WalletSigner } from '../types';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport type TransactionState = {\n  transactionId: string;\n  slot: number;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport const getUnixTs = (): number => {\n  return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst simulateTransaction = async (\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> => {\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash()\n  ).blockhash;\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment }; // eslint-disable-line\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n};\n\nconst awaitTransactionSignatureConfirmation = async (\n  transactionId: TransactionSignature,\n  timeout: number,\n  connection: Connection\n): Promise<SignatureStatus | null | void> => {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n\n  // eslint-disable-next-line\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Timed out for txid', transactionId);\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        transactionId,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        'recent'\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', transactionId, e);\n    }\n\n    while (!done) {\n      // eslint-disable-next-line\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            transactionId,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          console.log(\n            `https://explorer.solana.com/tx/${transactionId}?cluster=devnet`\n          );\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', transactionId, status);\n            } else if (status.err) {\n              console.log('REST error for', transactionId, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', transactionId, status);\n            } else {\n              console.log('REST confirmation for', transactionId, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (err) {\n          if (!done) {\n            console.log(\n              'REST connection error: transactionId',\n              transactionId,\n              err\n            );\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions?.[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nexport const sendSignedTransaction = async ({\n  connection,\n  signedTransaction,\n  retry = true,\n  timeout = DEFAULT_TIMEOUT,\n  confirmation = true,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  retry?: boolean;\n  timeout?: number;\n  confirmation?: boolean;\n}): Promise<TransactionState> => {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const transactionId = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true,\n  });\n\n  let done = false;\n\n  if (retry) {\n    (async () => {\n      while (!done && getUnixTs() - startTime < timeout) {\n        connection\n          .sendRawTransaction(rawTransaction, {\n            skipPreflight: true,\n          })\n          .catch((error) => console.error(error));\n        await sleep(500);\n      }\n    })();\n  } else {\n    connection\n      .sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      })\n      .catch((error) => console.error(error));\n  }\n\n  if (confirmation) {\n    try {\n      console.log('Started awaiting confirmation for', transactionId);\n\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        transactionId,\n        timeout,\n        connection\n      );\n\n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n\n      if (confirmation.err) {\n        console.error(confirmation.err);\n        throw new Error('Transaction failed: Custom instruction error');\n      }\n\n      slot = confirmation?.slot || 0;\n    } catch (err) {\n      console.error('Timeout Error caught', err);\n      // eslint-disable-next-line\n      if ((err as any).timeout) {\n        throw new Error('Timed out awaiting confirmation on transaction');\n      }\n\n      let simulateResult: SimulatedTransactionResponse | null = null;\n      try {\n        simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n        ).value;\n      } catch (err) {\n        console.error('simulate error', err);\n      }\n\n      if (simulateResult && simulateResult.err) {\n        if (simulateResult.logs) {\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n            const line = simulateResult.logs[i];\n            if (line.startsWith('Program log: ')) {\n              throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length)\n              );\n            }\n          }\n        }\n        throw new Error(JSON.stringify(simulateResult.err));\n      }\n      throw new Error('Transaction failed');\n    } finally {\n      done = true;\n    }\n\n    console.log('Latency', transactionId, getUnixTs() - startTime);\n  }\n\n  return { transactionId, slot };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  userWallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  retry: boolean = true,\n  confirmation: boolean = true,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n): Promise<TransactionState | undefined> => {\n  if (!userWallet.publicKey) throw new Error('wallet is not connected');\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      userWallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  if (!includesFeePayer) {\n    transaction = await userWallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  try {\n    const { transactionId, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n      retry,\n      confirmation,\n    });\n\n    return { transactionId, slot };\n  } catch (error) {\n    console.error(error);\n    return undefined;\n  }\n};\n","import { PublicKey } from '@solana/web3.js';\n\nimport { MarketPairEnum } from '../types/enum';\n\nexport enum ConfigEnum {\n  DEV = 'dev',\n  STAGING = 'staging',\n  CUSTOM = 'custom',\n}\n\nexport type MarketConfig = {\n  [key: string]: PublicKey; // ex: MARKET_60S: PublicKey;\n};\n\nexport type OracleConfig = {\n  HXRO_USD_ORACLE: PublicKey;\n  HXRO_PRICE_ORACLE: PublicKey;\n  SOL_USD_ORACLE: PublicKey;\n  SOL_PRICE_ORACLE: PublicKey;\n  BTC_USD_ORACLE: PublicKey;\n  BTC_PRICE_ORACLE: PublicKey;\n  ETH_USD_ORACLE: PublicKey;\n  ETH_PRICE_ORACLE: PublicKey;\n};\n\nexport type ParimutuelConfig = {\n  SOLANA_CLUSTER_URL?: string;\n  PARIMUTUEL_PROGRAM_ID: PublicKey;\n  NETWORK: PublicKey;\n  NETWORK_PROTOCOL_FEE_COLLECTOR?: PublicKey;\n  MARKET_PROTOCOL_FEE_COLLECTOR?: PublicKey;\n  HXRO_MINT: PublicKey;\n  USDC_MINT: PublicKey;\n  BONK_MINT: PublicKey;\n  oracles: OracleConfig;\n  markets: {\n    [MarketPairEnum.SOLUSD]: MarketConfig;\n    [MarketPairEnum.BTCUSD]: MarketConfig;\n    [MarketPairEnum.ETHUSD]: MarketConfig;\n  };\n};\n\nexport const DEV_CONFIG: ParimutuelConfig = {\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n      '3kjK4HA6A4K86NgNB93gGhSt257wtN4QAqXMNPQ4fVTm'\n  ),\n  NETWORK: new PublicKey('2xJcpMZvegKZ6GCYzUp74DfEFtPss66XNzV932xgSgNW'),\n  NETWORK_PROTOCOL_FEE_COLLECTOR: new PublicKey(\n      '3QxkXnrh7EHYwQp7s6x7t5nJidyGVC7mVNFwGpy6FV5F'\n  ),\n  MARKET_PROTOCOL_FEE_COLLECTOR: new PublicKey(\n      'Fcbzf2591V4rWw83yLUjkA646F2twxzLeZinbbSMYece'\n  ),\n  HXRO_MINT: new PublicKey('265iYi4pVmorRzrq3X7Eudy6uCKMeDxXiTDkh92vARTE'),\n  USDC_MINT: new PublicKey('DXSVQJqJbNTTcGqCkfHnQYXwG5GhZsfg2Ka9tNkK3ohr'),\n  BONK_MINT: new PublicKey('bonkKjzREa7pVBRD6nFPAKRaHhS7XpDhhgZCZdGNkuU'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n        '6C4PJ4bMuLFmvHRqSkmGeyoSGAKMfPG1um1k1suryfs'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n        '6VrSw4Vxg5zs9shfdCxLqfUy2qSD3NCS9AsdBQUgbjnt'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n        '3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n        'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n        '3m1y5h2uv7EQL3KaJZehvAJa4yDNvgc5yAdL9KPMKwvk'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n        'HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n        '2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n        'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'\n    ),\n  },\n  markets: {\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('FBaFPMJZ9UPHwrbCYLytuSpA15u3pY9cKjJQ4z5Ag59q'),\n      MARKET_300S: new PublicKey(\n          'AySG6K4cNHvy3YpHFb1JcmmEhBfLfCzYgNXqpdfgbQoE'\n      ),\n      MARKET_900S: new PublicKey(\n          'HzLNwHEMH3aAY9F8gRAdJEfe2J3opdxr1mDPt8AuLEkh'\n      ),\n      MARKET_3600S: new PublicKey(\n          'BqJAZHr56t14QABZLygZYWe7WozVSVPLQb6yDSj9f8U1'\n      ),\n      MARKET_86400S: new PublicKey(\n          '2MMLwY7VaDTS3ZSd1ZkmzCQxrJWjxmWgEXLPEA3nm9Pz'\n      ),\n    },\n    [MarketPairEnum.BTCUSD]: {\n      MARKET_60S: new PublicKey('2J8yR9G1yXebijHYuRFe4iWQfKxYt8LLGN2mfxKCLWWM'),\n      MARKET_300S: new PublicKey(\n          '8WiZ4VTsq8fG92osksPbrc5E3raeL839D83Q8pxuXH8m'\n      ),\n      MARKET_900S: new PublicKey(\n          '79omw4hStqWfPnQXPinEF2yDFFakjvXanwMZZ7YYFL94'\n      ),\n      MARKET_3600S: new PublicKey(\n          '7hbU86BtQUkZUw8jJpqgaRgp1Wyxgp2LSTyY1oSoznvP'\n      ),\n      MARKET_86400S: new PublicKey(\n          'HjdzuJ5LhiLJLKaR4sCCHj3FwmkWEHNXpGVEPUTPFRtx'\n      ),\n    },\n    [MarketPairEnum.ETHUSD]: {\n      MARKET_60S: new PublicKey('CX9JDCAut5ShXYdQFAX9oSo93wmi86Xkb7SgagsgkXmM'),\n      MARKET_300S: new PublicKey(\n          'F35oVkVWKSYHqaw66U1PHgZtmPeJMcTArEPvX3PCukTH'\n      ),\n      MARKET_900S: new PublicKey(\n          'BRDqHv4enme3piwh228yyVk1sBuxa8Q7mgwq7SYwsPfA'\n      ),\n      MARKET_3600S: new PublicKey(\n          '7MDcHRxHhTdDmhCMRVC9hgb29CFMbTTG5jT3thpqqqJK'\n      ),\n      MARKET_86400S: new PublicKey(\n          '8kw8BAWcgm78PMmHsKoXUGKZXnUPZUaXCw8SdrRAjJ3E'\n      ),\n    },\n  },\n};\n\nexport const DEV_BONK_CONFIG: ParimutuelConfig = {\n  MARKET_PROTOCOL_FEE_COLLECTOR: undefined, NETWORK_PROTOCOL_FEE_COLLECTOR: undefined, SOLANA_CLUSTER_URL: \"https://api.devnet.solana.com\",\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n      '3kjK4HA6A4K86NgNB93gGhSt257wtN4QAqXMNPQ4fVTm'\n  ),\n  NETWORK: new PublicKey('5QW1YiTeLWft63Y4LCXfKCzQUDApzpJWeQh6gqXT8Mf1'),\n  HXRO_MINT: new PublicKey('265iYi4pVmorRzrq3X7Eudy6uCKMeDxXiTDkh92vARTE'),\n  USDC_MINT: new PublicKey('DXSVQJqJbNTTcGqCkfHnQYXwG5GhZsfg2Ka9tNkK3ohr'),\n  BONK_MINT: new PublicKey('bonkKjzREa7pVBRD6nFPAKRaHhS7XpDhhgZCZdGNkuU'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n        '6C4PJ4bMuLFmvHRqSkmGeyoSGAKMfPG1um1k1suryfs'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n        '6VrSw4Vxg5zs9shfdCxLqfUy2qSD3NCS9AsdBQUgbjnt'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n        '3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n        'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n        '3m1y5h2uv7EQL3KaJZehvAJa4yDNvgc5yAdL9KPMKwvk'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n        'HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n        '2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n        'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'\n    ),\n  },\n  markets:{\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('DeQFZzcWkEUeYju6GoizSbZotynYdB4XfkNgf21LtZjs'),\n    },\n    [MarketPairEnum.BTCUSD]: {\n      MARKET_60S: new PublicKey('BswfdHHVnYRMQmDMYNcMF89tWfnQcCwtraCNDgnv8sVE'),\n    },\n    [MarketPairEnum.ETHUSD]: {}\n  }\n};\n\nexport const STAGING_BONK_CONFIG: ParimutuelConfig = {\n  MARKET_PROTOCOL_FEE_COLLECTOR: undefined, NETWORK_PROTOCOL_FEE_COLLECTOR: undefined, SOLANA_CLUSTER_URL: \"https://api.mainnet-beta.solana.com\",\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n    'GUhB2ohrfqWspztgCrQpAmeVFBWmnWYhPcZuwY52WWRe'\n  ),\n  NETWORK: new PublicKey('AARaFgaGwAoZAGqwf8Kn5aqxpZvuDotMMH6HgckJpCC7'),\n  HXRO_MINT: new PublicKey('HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK'),\n  USDC_MINT: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'),\n  BONK_MINT: new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n      'BJqTdFytBhGWpq183a5EPo123cB6gitTAmSSsCta3RGG'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n      'B47CC1ULLw1jKTSsr1N1198zrUHp3LPduzepJyzgLn2g'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n      'ALP8SdU9oARYVLgLR7LrqMNCYBnhtnQz1cj6bwgwQmgj'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n      'H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n      '4aDoSXJ5o3AuvL7QFeR6h44jALQfTmUUCTVGDD6aoJTM'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n      'GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n      'EMkxjGC1CQ7JLiutDbfYb7UKb3zm9SJcUmr1YicBsdpZ'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n      'JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'\n    ),\n  },\n  markets:{\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('6BWYu93T3ZiRntvYfRhqpkJJb7VNGt8yUcKPVSFCiYCa'),\n    },\n    [MarketPairEnum.BTCUSD]: {\n    },\n    [MarketPairEnum.ETHUSD]: {}\n  }\n};\n\nexport const STAGING_CONFIG = {\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n    'GUhB2ohrfqWspztgCrQpAmeVFBWmnWYhPcZuwY52WWRe'\n  ),\n  NETWORK: new PublicKey('FoCmS48FRyJrx6bozDijaARYAThdUeUGu4rbGKqBegcH'),\n  HXRO_MINT: new PublicKey('HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK'),\n  USDC_MINT: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'),\n  BONK_MINT: new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n      'BJqTdFytBhGWpq183a5EPo123cB6gitTAmSSsCta3RGG'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n      'B47CC1ULLw1jKTSsr1N1198zrUHp3LPduzepJyzgLn2g'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n      'ALP8SdU9oARYVLgLR7LrqMNCYBnhtnQz1cj6bwgwQmgj'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n      'H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n      '4aDoSXJ5o3AuvL7QFeR6h44jALQfTmUUCTVGDD6aoJTM'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n      'GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n      'EMkxjGC1CQ7JLiutDbfYb7UKb3zm9SJcUmr1YicBsdpZ'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n      'JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'\n    ),\n  },\n  markets: {\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('FN46bryerznhVr6hJUJt6aYCW8wVCDPdQhTNFVvgr8JJ'),\n      MARKET_300S: new PublicKey(\n        '5m89C7XsQRtuFFARMmKucnYdaNEf9mYXbLxJVGcdyJTU'\n        ),\n      MARKET_900S: new PublicKey(\n        'FnD3PLAbbsJYRufYR9qp8BGgcKmEbSBiC1zkvmj51i3J'\n      ),\n      MARKET_3600S: new PublicKey(\n        'GemLV88r4QsUiVAmc34pwFfaNjaw5BMBmhjqtHVByNra'\n      ),\n      MARKET_86400S: new PublicKey(\n        'GNV2wry1pFCpJeGrhM2e3app99VXTP7rpXUwQGrL1hHi'\n      ),\n    },\n    [MarketPairEnum.BTCUSD]: {\n      MARKET_60S: new PublicKey('9bqu5kYo3RUBY1kxSQjwpKPYrFzsFxEK7tHrxwLs3XWH'),\n      MARKET_300S: new PublicKey(\n        '3bH2HWjWNLgGWXbhHhK73fJEDeRQ7spj3fkyRyom6vpx'\n        ),\n      MARKET_900S: new PublicKey(\n        'CsXwpYNwkfrbMdoGWrj97yhuseLRuofy7fxj3Beesxv9'\n      ),\n      MARKET_3600S: new PublicKey(\n        '7c5PqmbTGsrWxCHXAfi9Rt2tTvG1oAdCK13FS8TKEpZ7'\n        ),\n      MARKET_86400S: new PublicKey(\n        'DpMZ7BGRYLF6xi6uD7ecaEjMv5aKx8gShzjhU4pscuqY'\n        ),\n      },\n    [MarketPairEnum.ETHUSD]: {\n      MARKET_60S: new PublicKey('EfFQtUkjv1ehWg9XrskkUL89sJ8ts4vGHavbo8TkQusL'),\n      MARKET_300S: new PublicKey(\n        '3DzpjP5cPP32Jkacu7MbEHNZYpiFpPozWQcJJaLgUXRH'\n      ),\n      MARKET_900S: new PublicKey(\n        '9xvKy77EQMeDw7z4ikNgXeRc2vWJgdbaLKBMSmEZbjXi'\n      ),\n      MARKET_3600S: new PublicKey(\n        '6fvFpHoXCxsafVuvNaH7Kdzbk66xmYhCyiTz4H1T89Qy'\n      ),\n      MARKET_86400S: new PublicKey(\n        'CYBcN2nM7oCH1BTt87GA4eP2vqLw2rTR1osgtAy7xyAg'\n      ),\n    },\n  },\n};\n\n// To correct the name of the config, it has same value with DEV_CONFIG for time being\nexport const DEVNET_CONFIG: ParimutuelConfig = DEV_CONFIG;\n\n// To correct the name of the config, it has same value with STAGING_CONFIG for time being\nexport const MAINNET_CONFIG = STAGING_CONFIG;\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { AttachCookieArgs } from '../borsh';\nimport { createAttachCookieInstruction } from '../instructions';\nimport {\n  decodeParimutuel,\n  findTraderPositionAccountPubkey,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendAttachCookieTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  storePubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { \n    PARIMUTUEL_PROGRAM_ID,\n    NETWORK \n  } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const attachCookieInstruction = await createAttachCookieInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new AttachCookieArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    parimutuelPubkey,\n    storePubkey,\n    traderPositionAccountPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [attachCookieInstruction],\n    signers,\n    'single',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to attach cookie');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { PublicKey, Keypair } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { NetworkTraderFeePayerArgs } from '../borsh';\nimport { createNetworkTraderFeePayerInstruction } from '../instructions';\nimport {\n  findNetworkTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateNetworkTraderFeePayerTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const networkTraderFeePayerInstruction =\n    await createNetworkTraderFeePayerInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new NetworkTraderFeePayerArgs(),\n      networkPubkey,\n      userWallet.publicKey,\n      protocolMintPubkey,\n      networkTraderAccountPubkey,\n      networkTraderFeePayerPubkey\n    );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [networkTraderFeePayerInstruction],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create fee payer account');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { ParimutuelArgs } from '../borsh';\nimport { WalletSigner } from '../types';\nimport { createParimutuelInstruction } from '../instructions';\nimport {\n  findParimutuelPubkey,\n  findHoneypotPubkey,\n  decodeNetwork,\n  decodeMarket,\n  sendTransaction,\n} from '../utils';\n\n/**\n * create parimutuel transaction\n * @param userWallet user wallet\n * @param marketPubkey market pubkey where parimutuel will be created\n * @param marketOpen parimutuel creation time\n * @param timeWindowStart parimutuel start time\n * @param marketClose parimutuel end time\n * @returns transaction id\n */\nexport async function sendCreateParimutuelTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  marketPubkey: PublicKey,\n  marketOpen: number,\n  timeWindowStart: number,\n  marketClose: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelSettings = new ParimutuelArgs({\n    marketOpen: marketOpen,\n    marketClose: marketClose,\n    timeWindowStart: timeWindowStart,\n  });\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n\n  if (!networkAccount || !marketAccount) {\n    throw new Error('no network or market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const parimutuelPubkey = await findParimutuelPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    marketPubkey,\n    marketOpen,\n    timeWindowStart,\n    marketClose\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const createInstruction = await createParimutuelInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelSettings,\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementMintPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [createInstruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error(\n      `failed to create parimutuel: ${parimutuelPubkey.toBase58()}`\n    );\n  } else {\n    return response.transactionId;\n  }\n}\n","import { TransactionInstruction, Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { TraderAccountsArgs } from '../borsh';\nimport {\n  createTraderAccountInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport {\n  findAssociatedTokenAccountPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateTraderAccountTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  marketPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [...instructions, traderAccountInstruction],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create trader account');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { TraderPositionAccountArgs } from '../borsh';\nimport { createTraderPositionAccountInstruction } from '../instructions';\nimport {\n  findTraderPositionAccountPubkey,\n  decodeParimutuel,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateTraderPositionAccountTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [traderPositionAccountInstruction],\n    signers,\n    'single',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create trader account');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { TransactionInstruction, Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { StoreArgs, FixedFees, Version } from '../borsh';\nimport {\n  createStoreInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport {\n  findStorePubkey,\n  findAssociatedTokenAccountPubkey,\n  sendTransaction,\n  decodeNetwork,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateStoreTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  storeWalletPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  protocolFeeBps: number,\n  settlementFeeBps: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const settings = new StoreArgs({\n    fees: new FixedFees({\n      version: Version.FixedFeesV1,\n      protocolFeeBps,\n      settlementFeeBps,\n    }),\n  });\n\n  const networkPubkey = NETWORK;\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const storePubkey = await findStorePubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    marketPubkey,\n    storeWalletPubkey\n  );\n\n  const storeProtocolFeeCollectorPubkey =\n    await findAssociatedTokenAccountPubkey(\n      storeWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const storeSettlementFeeCollectorPubkey =\n    await findAssociatedTokenAccountPubkey(\n      storeWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const [protocolFeeCollectorAccount, settlementFeeCollectorAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      storeProtocolFeeCollectorPubkey,\n      storeSettlementFeeCollectorPubkey,\n    ]);\n\n  if (!protocolFeeCollectorAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      storeProtocolFeeCollectorPubkey,\n      storeWalletPubkey,\n      storeWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementFeeCollectorAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      storeSettlementFeeCollectorPubkey,\n      storeWalletPubkey,\n      storeWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const storeInstruction = await createStoreInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    settings,\n    networkPubkey,\n    marketPubkey,\n    storeWalletPubkey,\n    userWalletPubkey,\n    storePubkey,\n    storeProtocolFeeCollectorPubkey,\n    storeSettlementFeeCollectorPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [...instructions, storeInstruction],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create store');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { UpdatePriceArgs } from '../borsh';\nimport {\n  createUpdatePriceInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport { WalletSigner } from '../types';\nimport {\n  findNetworkSettlementFeeCollectorPubkey,\n  findHoneypotPubkey,\n  decodeParimutuel,\n  decodeNetwork,\n  decodeMarket,\n  sendTransaction,\n} from '../utils';\n\nexport async function sendUpdatePriceTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n  const networkWalletPubkey = new PublicKey(decodedNetworkAccount.authority);\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const networkSettlementFeeCollectorPubkey =\n    await findNetworkSettlementFeeCollectorPubkey(\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const networkSettlementFeeCollector = await this.connection.getAccountInfo(\n    networkSettlementFeeCollectorPubkey\n  );\n  if (!networkSettlementFeeCollector) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      networkSettlementFeeCollectorPubkey,\n      networkWalletPubkey,\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const updatePriceInstruction = await createUpdatePriceInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePriceArgs(),\n    networkPubkey,\n    marketPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    settlementMintPubkey,\n    networkSettlementFeeCollectorPubkey,\n    honeypotPubkey,\n    parimutuelPubkey,\n    new PublicKey(decodedParimutuelAccount.creator)\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [...instructions, updatePriceInstruction],\n    signers,\n    'single',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to update price');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { TransactionInstruction, Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  NetworkTraderFeePayerArgs,\n  TraderAccountsArgs,\n  TraderPositionAccountArgs,\n  UpdatePositionArgs,\n} from '../borsh';\nimport {\n  createNetworkTraderFeePayerInstruction,\n  createTraderAccountInstruction,\n  createPlacePositionInstruction,\n  createTraderPositionAccountInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport { PositionSideEnum, WalletSigner } from '../types';\nimport {\n  findAssociatedTokenAccountPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  findTraderPositionAccountPubkey,\n  findEntryAccountPubkey,\n  findHoneypotPubkey,\n  decodeNetwork,\n  decodeParimutuel,\n  sendTransaction,\n} from '../utils';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function sendPlacePositionTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey,\n  size: number,\n  side: PositionSideEnum,\n  seq: number,\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, parimutuelAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      parimutuelPubkey,\n    ]);\n\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    seq\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const updatePositionInstruction = await createPlacePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePositionArgs({ size, side, seq }),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [\n      ...instructions,\n      traderAccountInstruction,\n      feePayerInstruction,\n      traderPositionAccountInstruction,\n      updatePositionInstruction,\n    ],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to update position');\n  } else {\n    return response.transactionId;\n  }\n}\n\nconst OPERATOR_FEE: number = 2.0;\nexport async function sendPlacePositionWithOperatorTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey,\n  size: number,\n  side: PositionSideEnum,\n  seq: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n  const tradeSize = size - (size * (OPERATOR_FEE / 100))\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, parimutuelAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      parimutuelPubkey,\n    ]);\n\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    seq\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const updatePositionInstruction = await createPlacePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePositionArgs({ size: tradeSize, side: side, seq: seq }),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const sourceAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    settlementMintPubkey,\n    userWalletPubkey\n  );\n\n  let mATA;\n  if (settlementMintPubkey.toString() == this.config.BONK_MINT.toString()) {\n    mATA = new PublicKey('6p7aQTngHmPy3srAM1ZuC5BKoYz94TpQJqcYH941Z72B');\n  } else if (settlementMintPubkey.toString() == this.config.USDC_MINT.toString()) {\n    mATA = new PublicKey('8Ti1Wg3X6Bx4fuLwLcDwwsrmU3ghPBQwoRmqv8Gao73Q');\n  } else {\n    throw new Error('Settlement mint token not implemented');\n  }\n\n  const sendFeeToOperatorInstruction = Token.createTransferInstruction(\n    TOKEN_PROGRAM_ID,\n    sourceAccount,\n    mATA,\n    userWalletPubkey,\n    [],\n    ((OPERATOR_FEE / 100) * size),\n  )\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [\n      ...instructions,\n      sendFeeToOperatorInstruction,\n      traderAccountInstruction,\n      feePayerInstruction,\n      traderPositionAccountInstruction,\n      updatePositionInstruction,\n    ],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to update position');\n  } else {\n    return response.transactionId;\n  }\n}\n\nexport async function getPlacePositionInstruction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey,\n  size: number,\n  side: PositionSideEnum,\n  seq: number,\n): Promise<TransactionInstruction[]> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, parimutuelAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      parimutuelPubkey,\n    ]);\n\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    seq\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const updatePositionInstruction = await createPlacePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePositionArgs({ size, side, seq }),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const PlacePositionInstructionArr: TransactionInstruction[] = [\n    ...instructions,\n    traderAccountInstruction,\n    feePayerInstruction,\n    traderPositionAccountInstruction,\n    updatePositionInstruction,\n  ]\n\n  return PlacePositionInstructionArr\n}\n\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { SettlePositionArgs } from '../borsh';\nimport { createSettlePositionInstruction } from '../instructions';\nimport {\n  findNetworkProtocolFeeCollectorPubkey,\n  findNetworkSettlementFeeCollectorPubkey,\n  findMarketProtocolFeeCollectorPubkey,\n  findMarketSettlementFeeCollectorPubkey,\n  findAssociatedTokenAccountPubkey,\n  findHoneypotPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeNetwork,\n  decodeParimutuel,\n  decodeMarket,\n  findTraderPositionAccountPubkey,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendSettlePositionTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  traderWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const {\n    NETWORK,\n    PARIMUTUEL_PROGRAM_ID,\n    NETWORK_PROTOCOL_FEE_COLLECTOR,\n    MARKET_PROTOCOL_FEE_COLLECTOR,\n  } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const parimutuelCreatorPubkey = new PublicKey(decodedParimutuelAccount.creator);\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n  const networkWalletPubkey = new PublicKey(decodedNetworkAccount.authority);\n\n  const networkProtocolFeeCollectorPubkey =\n    await findNetworkProtocolFeeCollectorPubkey(\n      networkWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const networkSettlementFeeCollectorPubkey =\n    await findNetworkSettlementFeeCollectorPubkey(\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const marketWalletPubkey = new PublicKey(decodeMarketAccount.authority);\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const marketProtocolFeeCollectorPubkey =\n    await findMarketProtocolFeeCollectorPubkey(\n      marketWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const marketSettlementFeeCollectorPubkey =\n    await findMarketSettlementFeeCollectorPubkey(\n      marketWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    traderWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    traderWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const [\n    networkProtocolFeeCollectorAccount,\n    networkSettlementFeeCollectorAccount,\n    marketProtocolFeeCollectorAccount,\n    marketSettlementFeeCollectorAccount,\n    protocolTokenAccount,\n    settlementTokenAccount,\n    positionAccount,\n  ] = await this.connection.getMultipleAccountsInfo([\n    NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n    networkSettlementFeeCollectorPubkey,\n    MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n    marketSettlementFeeCollectorPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n  ]);\n\n  if (!networkProtocolFeeCollectorAccount) {\n    throw new Error('no network protocol account');\n  }\n\n  if (!networkSettlementFeeCollectorAccount) {\n    throw new Error('no network settlement account');\n  }\n\n  if (!marketProtocolFeeCollectorAccount) {\n    throw new Error('no market protocol account');\n  }\n\n  if (!marketSettlementFeeCollectorAccount) {\n    throw new Error('no market settlement account');\n  }\n\n  if (!protocolTokenAccount) {\n    throw new Error('no protocol token account');\n  }\n\n  if (!settlementTokenAccount) {\n    throw new Error('no settlement token account');\n  }\n\n  if (!positionAccount) {\n    throw new Error('no position account');\n  }\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const instruction = await createSettlePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new SettlePositionArgs(),\n    networkPubkey,\n    marketPubkey,\n    traderWalletPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    protocolMintPubkey,\n    settlementMintPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderFeePayerPubkey,\n    networkTraderAccountPubkey,\n    NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n    networkSettlementFeeCollectorPubkey,\n    MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n    marketSettlementFeeCollectorPubkey,\n    marketTraderAccountPubkey,\n    traderPositionAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey,\n    parimutuelCreatorPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to settle position');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { WithdrawFeeArgs } from '../borsh';\nimport { createWithdrawFeeInstruction } from '../instructions';\nimport {\n  findNetworkTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  findAssociatedTokenAccountPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendWithdrawFeeTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  amount: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const withdrawInstruction = await createWithdrawFeeInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new WithdrawFeeArgs({ amount }),\n    networkPubkey,\n    userWallet.publicKey,\n    protocolMintPubkey,\n    protocolTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [withdrawInstruction],\n    signers,\n    'single',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to withdraw fee');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { NetworkTraderFeePayerArgs, TraderAccountsArgs } from '../borsh';\nimport {\n  createTraderAccountInstruction,\n  createNetworkTraderFeePayerInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport {\n  findAssociatedTokenAccountPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDepositFeeTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  marketPubkey: PublicKey,\n  mintPubkey: PublicKey,\n  amount: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const tradeAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const walletTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    mintPubkey\n  );\n  const walletTokenAccount = await this.connection.getAccountInfo(\n    walletTokenAccountPubkey\n  );\n\n  let walletAccountInstruction: TransactionInstruction | undefined = undefined;\n  if (!walletTokenAccount) {\n    walletAccountInstruction = createAssociatedTokenAccountInstruction(\n      walletTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      mintPubkey\n    );\n    instructions.push(walletAccountInstruction);\n  }\n\n  const depositInstruction = Token.createTransferInstruction(\n    TOKEN_PROGRAM_ID,\n    walletTokenAccountPubkey,\n    networkTraderFeePayerPubkey,\n    userWalletPubkey,\n    [],\n    amount\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [\n      ...instructions,\n      tradeAccountInstruction,\n      feePayerInstruction,\n      depositInstruction,\n    ],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to deposit fee');\n  } else {\n    return response.transactionId;\n  }\n}\n","import {\n  Transaction,\n  PublicKey,\n  Keypair,\n  sendAndConfirmTransaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { createAssociatedTokenAccountInstruction } from '../instructions';\nimport { findAssociatedTokenAccountPubkey } from '../utils';\n\n/**\n * send mint token\n * @param walletPubkey user wallet pubkey where token will send to\n * @param mintPubkey mint token pubkey\n * @param authorityKeypair keypair that owns mint token\n * @param amount amount to send\n * @returns void\n */\nexport async function sendTransferTokenTransaction(\n  this: ParimutuelWeb3,\n  walletPubkey: PublicKey,\n  mintPubkey: PublicKey,\n  authorityKeypair: Keypair,\n  amount: number\n): Promise<void> {\n  const tradeTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    walletPubkey,\n    mintPubkey\n  );\n\n  const traderTokenAccount = await this.connection.getAccountInfo(\n    tradeTokenAccountPubkey\n  );\n\n  if (!traderTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      tradeTokenAccountPubkey,\n      authorityKeypair.publicKey,\n      walletPubkey,\n      mintPubkey\n    );\n\n    const transaction = new Transaction().add(instruction);\n\n    const signature = await sendAndConfirmTransaction(\n      this.connection,\n      transaction,\n      [authorityKeypair],\n      { commitment: 'confirmed' }\n    );\n\n    if (!signature) {\n      throw new Error('failed to create trader token account');\n    }\n  }\n\n  const splToken = new Token(\n    this.connection,\n    mintPubkey,\n    TOKEN_PROGRAM_ID,\n    authorityKeypair\n  );\n\n  await splToken.mintTo(tradeTokenAccountPubkey, authorityKeypair, [], amount);\n}\n","import BN from 'bn.js';\nimport { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { NetworkUpdateArgs } from '../borsh';\nimport { WalletSigner } from '../types';\nimport { updateNetworkInstruction } from '../instructions';\nimport { TwoTieredFees } from '../borsh'\nimport {\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\n\n/**\n * update network transaction\n * @param userWallet user wallet\n * @param protocolMintPubkey: protocol mint address\n * @param settlementMintPubkey settlement mint address\n * @param protocolProductOraclePubkey: protocol product oracle address\n * @param protocolPriceOraclePubkey: protocol price oracle address\n * @param networkProtocolFeeCollectorPubkey: network protocol fee collector address\n * @param networkSettlementFeeCollectorPubkey: network settlement fee collector address\n * @param protocolTokenRequiredForMinFee: min protocol token required for reduced fee workflow\n * @param minProtocolFeeBps: min protocol fee bps in Tiered and Linear Fee structures\n * @param maxProtocolFeeBps: max protocol fee bps in Tiered and Linear Fee structures\n * @param minSettlementFeeBps: min settlement fee bps in Tiered and Linear Fee structures\n * @param maxSettlementFeeBps: min settlement fee bps in Tiered and Linear Fee structures\n * @returns transaction id\n */\nexport async function sendUpdateNetworkTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  protocolMintPubkey: PublicKey | unknown,\n  settlementMintPubkey: PublicKey | unknown,\n  protocolProductOraclePubkey: PublicKey | unknown,\n  protocolPriceOraclePubkey: PublicKey | unknown,\n  networkProtocolFeeCollectorPubkey: PublicKey | unknown,\n  networkSettlementFeeCollectorPubkey: PublicKey | unknown,\n  protocolTokenRequiredForMinFee: BN = new BN(1000000),\n  minProtocolFeeBps: number = 10,\n  maxProtocolFeeBps: number = 150,\n  minSettlementFeeBps: number = 100,\n  maxSettlementFeeBps: number = 300,\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkSettings = new NetworkUpdateArgs({\n    fees: new TwoTieredFees({\n      version: 1,\n      protocolTokenRequiredForMinFee,\n      minProtocolFeeBps,\n      maxProtocolFeeBps,\n      minSettlementFeeBps,\n      maxSettlementFeeBps,\n    }),\n  });\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount] = await this.connection.getMultipleAccountsInfo([\n    networkPubkey,\n  ]);\n\n  if (!networkAccount) {\n    throw new Error('no network or market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n\n  const ix = await updateNetworkInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    networkSettings,\n    networkPubkey,\n    userWalletPubkey, // User must be network authority\n    protocolProductOraclePubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolProductOracle),\n    protocolPriceOraclePubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolPriceOracle),\n    networkProtocolFeeCollectorPubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolFeeCollector),\n    networkSettlementFeeCollectorPubkey as PublicKey || new PublicKey(decodedNetworkAccount.settlementFeeCollector),\n    protocolMintPubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolToken),\n    settlementMintPubkey as PublicKey || new PublicKey(decodedNetworkAccount.settlementToken)\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [ix],\n    signers,\n    'max',\n    signers.length > 0,\n    false\n  );\n\n  if (!response) {\n    throw new Error(\n      `failed to update network: ${networkPubkey.toBase58()}`\n    );\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { DestroyParimutuelArgs } from '../borsh';\nimport { createDestroyParimutuelInstruction } from '../instructions';\nimport {\n  findHoneypotPubkey,\n  decodeNetwork,\n  decodeParimutuel,\n  decodeMarket,\n  sendTransaction,\n  findNetworkSettlementFeeCollectorPubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDestroyParimutuelTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const parimutuelCreatorPubkey = new PublicKey(\n    decodedParimutuelAccount.creator\n  );\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const settlementFeeCollector = await findNetworkSettlementFeeCollectorPubkey(networkPubkey, settlementMintPubkey)\n\n  const instruction = await createDestroyParimutuelInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new DestroyParimutuelArgs(),\n    networkPubkey,\n    marketPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    parimutuelPubkey,\n    parimutuelCreatorPubkey,\n    honeypotPubkey,\n    settlementMintPubkey,\n    settlementFeeCollector\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to destroy parimutuel');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { DestroyPositionEntryArgs } from '../borsh';\nimport { createDestroyPositionEntryInstruction } from '../instructions';\nimport {\n  decodeParimutuel,\n  sendTransaction,\n  findTraderPositionAccountPubkey,\n  findEntryAccountPubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDestroyPositionEntryTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  traderWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  sequenceNumber: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const networkPubkey = NETWORK;\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    sequenceNumber\n  );\n\n  const instruction = await createDestroyPositionEntryInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new DestroyPositionEntryArgs(),\n    networkPubkey,\n    marketPubkey,\n    traderWalletPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to destroy position entry');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { DestroyPositionArgs } from '../borsh';\nimport { createDestroyPositionInstruction } from '../instructions';\nimport {\n  decodeParimutuel,\n  sendTransaction,\n  findTraderPositionAccountPubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDestroyPositionTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  traderWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const networkPubkey = NETWORK;\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const instruction = await createDestroyPositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new DestroyPositionArgs(),\n    networkPubkey,\n    marketPubkey,\n    traderWalletPubkey,\n    traderPositionAccountPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to destroy position');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { ParimutuelWeb3 } from '../web3';\nimport { decodeLinearFees, decodeNetwork } from '../utils';\nimport { ParimutuelNetwork } from '../types';\n\nexport async function getNetwork(\n  this: ParimutuelWeb3\n): Promise<ParimutuelNetwork> {\n  const { NETWORK } = this.config;\n  const networkPubkey = NETWORK;\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('Failed to find network account');\n  }\n\n  const data = Buffer.from(networkAccount.data);\n  return {\n    pubkey: networkPubkey,\n    account: networkAccount,\n    info: {\n      network: decodeNetwork(data),\n      linearFees: decodeLinearFees(data.slice(-65)),\n    },\n  };\n}\n","import { getMarketPubkeys } from './../utils/parimutuel';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { decodeFixedFees, decodeMarket } from '../utils';\nimport { MarketPairEnum, ParimutuelMarket } from '../types';\nimport { notEmpty } from '../utils';\n\nexport async function getMarkets(\n  this: ParimutuelWeb3,\n  marketPair: MarketPairEnum\n): Promise<ParimutuelMarket[]> {\n  const markets = getMarketPubkeys(this.config, marketPair);\n  const marketPubkeys = markets.map((market) => market.pubkey);\n\n  const marketAccounts = await this.connection.getMultipleAccountsInfo(\n    marketPubkeys\n  );\n\n  return marketAccounts\n    .map((account, index) => {\n      if (!account) return null;\n\n      const data = Buffer.from(account.data);\n      return {\n        pubkey: marketPubkeys[index],\n        account: account,\n        info: {\n          market: decodeMarket(data),\n          fixedFees: decodeFixedFees(data.slice(-65)),\n        },\n      };\n    })\n    .filter(notEmpty);\n}\n","import { PublicKey } from '@solana/web3.js';\nimport _uniqWith from 'lodash/uniqWith';\nimport _isEqual from 'lodash/isEqual';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { MarketPubkey, ParimutuelAccount } from '../types';\nimport {\n  getUpcomingTimes,\n  getHistoricalTimes,\n  decodeParimutuel,\n  findParimutuelPubkey,\n  notEmpty,\n  getMultipleAccounts,\n} from '../utils';\n\nexport async function getParimutuel(\n  this: ParimutuelWeb3,\n  parimutuelPubkey: PublicKey\n): Promise<ParimutuelAccount> {\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  return {\n    pubkey: parimutuelPubkey,\n    account: parimutuelAccount,\n    info: {\n      parimutuel: decodeParimutuel(parimutuelAccount.data),\n    },\n  };\n}\n\nexport async function getParimutuels(\n  this: ParimutuelWeb3,\n  markets: MarketPubkey[],\n  number?: number\n): Promise<ParimutuelAccount[]> {\n  if (!markets) return [];\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const upcoming = markets\n    .map((market) => {\n      const { duration } = market;\n      return getUpcomingTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  const historical = markets\n    .map((market) => {\n      const { duration } = market;\n      return getHistoricalTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  // get unique time\n  const times = _uniqWith([...historical, ...upcoming], _isEqual);\n\n  const parimutuelPubkeys = await Promise.all(\n    times.map(async (time) => {\n      const pubkey = await findParimutuelPubkey(\n        PARIMUTUEL_PROGRAM_ID,\n        new PublicKey(time.marketPubkey),\n        0,\n        time.startTime,\n        time.startTime\n      );\n      return pubkey;\n    })\n  );\n\n  const parimutuelAccounts = await getMultipleAccounts(\n    this.connection,\n    parimutuelPubkeys.map((pubkey) => pubkey)\n  );\n\n  const filteredAccounts = parimutuelAccounts\n    .map((parimutuel, index) => {\n      if (!parimutuel) return null;\n      return {\n        pubkey: parimutuelPubkeys[index],\n        account: parimutuel.account,\n        info: {\n          parimutuel: decodeParimutuel(parimutuel.account.data),\n        },\n      };\n    })\n    .filter(notEmpty);\n\n  return filteredAccounts;\n}\n\nexport async function getUpcomingParimutuels(\n  this: ParimutuelWeb3,\n  markets: MarketPubkey[],\n  number?: number\n): Promise<ParimutuelAccount[]> {\n  if (!markets) return [];\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const upcoming = markets\n    .map((market) => {\n      const { duration } = market;\n      return getUpcomingTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  const parimutuelPubkeys = await Promise.all(\n    upcoming.map(async (time) => {\n      const pubkey = await findParimutuelPubkey(\n        PARIMUTUEL_PROGRAM_ID,\n        new PublicKey(time.marketPubkey),\n        0,\n        time.startTime,\n        time.startTime\n      );\n      return pubkey;\n    })\n  );\n\n  const parimutuelAccounts = await this.connection.getMultipleAccountsInfo(\n    parimutuelPubkeys.map((pubkey) => pubkey)\n  );\n\n  const filteredAccounts = parimutuelAccounts\n    .map((parimutuel, index) => {\n      if (!parimutuel) return null;\n      return {\n        pubkey: parimutuelPubkeys[index],\n        account: parimutuel,\n        info: {\n          parimutuel: decodeParimutuel(parimutuel.data),\n        },\n      };\n    })\n    .filter(notEmpty);\n\n  return filteredAccounts;\n}\n\nexport async function getLiveParimutuels(\n  this: ParimutuelWeb3,\n  markets: MarketPubkey[],\n  number?: number\n): Promise<ParimutuelAccount[]> {\n  if (!markets) return [];\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const historical = markets\n    .map((market) => {\n      const { duration } = market;\n      return getHistoricalTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  const parimutuelPubkeys = await Promise.all(\n    historical.map(async (time) => {\n      const pubkey = await findParimutuelPubkey(\n        PARIMUTUEL_PROGRAM_ID,\n        new PublicKey(time.marketPubkey),\n        0,\n        time.startTime,\n        time.startTime\n      );\n      return pubkey;\n    })\n  );\n\n  const parimutuelAccounts = await this.connection.getMultipleAccountsInfo(\n    parimutuelPubkeys.map((pubkey) => pubkey)\n  );\n\n  const filteredAccounts = parimutuelAccounts\n    .map((parimutuel, index) => {\n      if (!parimutuel) return null;\n      return {\n        pubkey: parimutuelPubkeys[index],\n        account: parimutuel,\n        info: {\n          parimutuel: decodeParimutuel(parimutuel.data),\n        },\n      };\n    })\n    .filter(notEmpty);\n\n  return filteredAccounts;\n}\n","import {\n  PublicKey,\n  GetProgramAccountsConfig,\n  MemcmpFilter,\n  DataSizeFilter,\n} from '@solana/web3.js';\nimport _get from 'lodash/get';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  decodeParimutuel,\n  decodeTraderPositionAccount,\n  getMultipleAccounts,\n} from '../utils';\nimport { ParimutuelMarket, MarketInfo, ParimutuelPosition } from '../types';\n\nexport async function getUserPositions(\n  this: ParimutuelWeb3,\n  userWalletPubkey: PublicKey,\n  markets: ParimutuelMarket[]\n): Promise<ParimutuelPosition[]> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const traderPositionAccounts = await this.connection.getProgramAccounts(\n    PARIMUTUEL_PROGRAM_ID,\n    {\n      filters: [\n        { dataSize: 172 } as DataSizeFilter,\n        {\n          memcmp: {\n            offset: 74,\n            bytes: userWalletPubkey?.toBase58(),\n          },\n        } as MemcmpFilter,\n      ],\n    } as GetProgramAccountsConfig\n  );\n\n  const decodedAccounts = traderPositionAccounts.map((account) =>\n    decodeTraderPositionAccount(account.account.data)\n  );\n\n  const parimutuelAccounts = await getMultipleAccounts(\n    this.connection,\n    decodedAccounts.map((account) => new PublicKey(account.parimutuel))\n  );\n\n  const positions = traderPositionAccounts.map((account, index) => {\n    const parimutuel = decodeParimutuel(\n      _get(parimutuelAccounts, [index, 'account', 'data']) as Buffer\n    );\n    const position = decodeTraderPositionAccount(account.account.data);\n\n    return {\n      pubkey: account.pubkey,\n      account: account.account,\n      info: {\n        parimutuelPubkey: new PublicKey(position.parimutuel),\n        parimutuel,\n        market: _get(markets, [parimutuel.marketKey, 'info']) as MarketInfo,\n        position,\n      },\n    };\n  });\n\n  return positions;\n}\n\nexport async function getParimutuelPositions(\n  this: ParimutuelWeb3,\n  parimutuelPubkey: PublicKey\n): Promise<ParimutuelPosition[]> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const traderPositionAccounts = await this.connection.getProgramAccounts(\n    PARIMUTUEL_PROGRAM_ID,\n    {\n      filters: [\n        { dataSize: 172 } as DataSizeFilter,\n        {\n          memcmp: {\n            offset: 42,\n            bytes: parimutuelPubkey?.toBase58(),\n          },\n        } as MemcmpFilter,\n      ],\n    } as GetProgramAccountsConfig\n  );\n\n  const decodedAccounts = traderPositionAccounts.map((account) =>\n    decodeTraderPositionAccount(account.account.data)\n  );\n\n  const parimutuelAccounts = await getMultipleAccounts(\n    this.connection,\n    decodedAccounts.map((account) => new PublicKey(account.parimutuel))\n  );\n\n  const positions = traderPositionAccounts.map((account, index) => {\n    const parimutuel = decodeParimutuel(\n      _get(parimutuelAccounts, [index, 'account', 'data']) as Buffer\n    );\n    const position = decodeTraderPositionAccount(account.account.data);\n\n    return {\n      pubkey: account.pubkey,\n      account: account.account,\n      info: {\n        parimutuelPubkey: new PublicKey(position.parimutuel),\n        parimutuel,\n        market: _get([], [parimutuel.marketKey, 'info']) as MarketInfo,\n        position,\n      },\n    };\n  });\n\n  return positions;\n}\n","import {\n  PublicKey,\n  GetProgramAccountsConfig,\n  MemcmpFilter,\n  DataSizeFilter,\n} from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  decodeTraderEntryAccount,\n  decodeTraderPositionAccount,\n  getMultipleAccounts,\n} from '../utils';\nimport { ParimutuelEntry } from '../types';\n\nexport async function getEntries(\n  this: ParimutuelWeb3,\n  traderPositionPubkey: PublicKey\n): Promise<ParimutuelEntry[]> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const traderEntryAccounts = await this.connection.getProgramAccounts(\n    PARIMUTUEL_PROGRAM_ID,\n    {\n      filters: [\n        { dataSize: 123 } as DataSizeFilter,\n        {\n          memcmp: {\n            offset: 34,\n            bytes: traderPositionPubkey?.toBase58(),\n          },\n        } as MemcmpFilter,\n      ],\n    } as GetProgramAccountsConfig\n  );\n\n  const decodedEntryAccounts = traderEntryAccounts.map((account) =>\n    decodeTraderEntryAccount(account.account.data)\n  );\n\n  const traderPositionPubkeys = decodedEntryAccounts.map(\n    (account) => new PublicKey(account.traderPosition)\n  );\n\n  const traderPositionAccounts = await getMultipleAccounts(\n    this.connection,\n    traderPositionPubkeys\n  );\n\n  const decodedPositionAccounts = traderPositionAccounts.map((account) => {\n    if (account) {\n      return decodeTraderPositionAccount(account.account.data);\n    } else return null;\n  });\n\n  const entries = traderEntryAccounts.map((account, index) => {\n    const positionAccount = decodedPositionAccounts[index];\n\n    return {\n      pubkey: account.pubkey,\n      account: account.account,\n      info: {\n        parimutuelPubkey: new PublicKey(\n          positionAccount !== null ? positionAccount.parimutuel : ''\n        ),\n        entry: decodedEntryAccounts[index],\n      },\n    };\n  });\n\n  return entries;\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { ParimutuelFees } from '../types';\nimport { decodeAccount } from '../utils';\nimport {\n  findMarketProtocolFeeCollectorPubkey,\n  findMarketSettlementFeeCollectorPubkey,\n  findNetworkProtocolFeeCollectorPubkey,\n  findNetworkSettlementFeeCollectorPubkey,\n  decodeNetwork,\n} from '../utils';\n\nexport async function getFees(\n  this: ParimutuelWeb3,\n  networkWalletPubkey: PublicKey,\n  marketWalletPubkey: PublicKey\n): Promise<ParimutuelFees> {\n  let networkProtocolFeeAmount = 0;\n  let networkSettlementFeeAmount = 0;\n  let marketProtocolFeeAmount = 0;\n  let marketSettlementFeeAmount = 0;\n\n  const {\n    NETWORK,\n    NETWORK_PROTOCOL_FEE_COLLECTOR,\n    MARKET_PROTOCOL_FEE_COLLECTOR,\n  } = this.config;\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const networkProtocolFeeCollectorPubkey =\n    await findNetworkProtocolFeeCollectorPubkey(\n      networkWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const networkSettlementFeeCollectorPubkey =\n    await findNetworkSettlementFeeCollectorPubkey(\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const marketProtocolFeeCollectorPubkey =\n    await findMarketProtocolFeeCollectorPubkey(\n      marketWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const marketSettlementFeeCollectorPubkey =\n    await findMarketSettlementFeeCollectorPubkey(\n      marketWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const [\n    networkProtocolFeeCollectorAccount,\n    networkSettlementFeeCollectorAccount,\n    marketProtocolFeeCollectorAccount,\n    marketSettlementFeeCollectorAccount,\n  ] = await this.connection.getMultipleAccountsInfo([\n    NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n    networkSettlementFeeCollectorPubkey,\n    MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n    marketSettlementFeeCollectorPubkey,\n  ]);\n\n  if (networkProtocolFeeCollectorAccount) {\n    const decodedProtocolFeeCollector = decodeAccount(\n      networkProtocolFeeCollectorAccount.data\n    );\n    networkProtocolFeeAmount = Number(decodedProtocolFeeCollector.amount) || 0;\n  }\n\n  if (networkSettlementFeeCollectorAccount) {\n    const decodedSettlementFeeCollector = decodeAccount(\n      networkSettlementFeeCollectorAccount.data\n    );\n    networkSettlementFeeAmount = Number(decodedSettlementFeeCollector.amount) || 0;\n  }\n\n  if (marketProtocolFeeCollectorAccount) {\n    const decodedProtocolFeeCollector = decodeAccount(\n      marketProtocolFeeCollectorAccount.data\n    );\n    marketProtocolFeeAmount = Number(decodedProtocolFeeCollector.amount) || 0;\n  }\n\n  if (marketSettlementFeeCollectorAccount) {\n    const decodedSettlementFeeCollector = decodeAccount(\n      marketSettlementFeeCollectorAccount.data\n    );\n    marketSettlementFeeAmount = Number(decodedSettlementFeeCollector.amount) || 0;\n  }\n\n  return {\n    network: {\n      protocolFeeAccountPubkey:\n        NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n      protocolFeeAmount: networkProtocolFeeAmount,\n      settlementFeeAccountPubkey: networkSettlementFeeCollectorPubkey,\n      settlementFeeAmount: networkSettlementFeeAmount,\n    },\n    market: {\n      protocolFeeAccountPubkey:\n        MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n      protocolFeeAmount: marketProtocolFeeAmount,\n      settlementFeeAccountPubkey: marketSettlementFeeCollectorPubkey,\n      settlementFeeAmount: marketSettlementFeeAmount,\n    },\n  };\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { decodeTraderAccount, findNetworkTraderAccountPubkey } from '../utils';\nimport { ParimutuelTraderAccount } from '../types';\n\nexport async function getNetworkTraderAccount(\n  this: ParimutuelWeb3,\n  userWalletPubkey: PublicKey,\n  networkPubkey: PublicKey\n): Promise<ParimutuelTraderAccount> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderAccount = await this.connection.getAccountInfo(\n    networkTraderAccountPubkey\n  );\n\n  if (!networkTraderAccount) {\n    throw new Error('no trader account');\n  }\n\n  return {\n    pubkey: networkTraderAccountPubkey,\n    account: networkTraderAccount,\n    info: {\n      traderAccount: decodeTraderAccount(networkTraderAccount?.data),\n    },\n  };\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  findNetworkTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeAccount,\n} from '../utils';\nimport { ParimutuelTraderFeePayerAccount } from '../types';\n\nexport async function getTraderFeePayerAccount(\n  this: ParimutuelWeb3,\n  userWalletPubkey: PublicKey,\n  networkPubkey: PublicKey\n): Promise<ParimutuelTraderFeePayerAccount> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderFeePayerAccount = await this.connection.getAccountInfo(\n    networkTraderFeePayerPubkey\n  );\n\n  if (!traderFeePayerAccount) {\n    throw new Error('no fee payer account');\n  }\n\n  return {\n    pubkey: networkTraderFeePayerPubkey,\n    account: traderFeePayerAccount,\n    info: {\n      tokenAccount: {\n        pubkey: networkTraderFeePayerPubkey.toBase58(),\n        account: traderFeePayerAccount,\n        info: decodeAccount(traderFeePayerAccount.data),\n      },\n    },\n  };\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { Store } from '../borsh';\nimport { decodeFixedFees, decodeStore } from '../utils';\n\nexport async function getStore(\n  this: ParimutuelWeb3,\n  storePubkey: PublicKey\n): Promise<Store> {\n  const account = await this.connection.getAccountInfo(storePubkey);\n\n  if (!account) {\n    throw new Error('Failed to find account');\n  }\n\n  const data = Buffer.from(account.data);\n  const store = decodeStore(data);\n  const storeFees = decodeFixedFees(data.slice(-65));\n  store.fee = storeFees;\n  return store;\n}\n","import { Connection, clusterApiUrl } from '@solana/web3.js';\n\nimport {\n  sendAttachCookieTransaction,\n  sendCreateParimutuelTransaction,\n  sendCreateStoreTransaction,\n  sendDepositFeeTransaction,\n  sendPlacePositionTransaction,\n  getPlacePositionInstruction,\n  sendPlacePositionWithOperatorTransaction,\n  sendSettlePositionTransaction,\n  sendTransferTokenTransaction,\n  sendUpdatePriceTransaction,\n  sendWithdrawFeeTransaction,\n  sendUpdateNetworkTransaction,\n  sendDestroyParimutuelTransaction,\n  sendDestroyPositionTransaction,\n  sendDestroyPositionEntryTransaction,\n} from '../transactions';\nimport {\n  getFees,\n  getMarkets,\n  getNetwork,\n  getStore,\n  getNetworkTraderAccount,\n  getParimutuel,\n  getParimutuels,\n  getUserPositions,\n  getParimutuelPositions,\n  getTraderFeePayerAccount,\n  getEntries,\n} from '../queries';\n\nimport { ParimutuelConfig } from './config';\nimport { ParimutuelWeb3Interface } from './interface';\n\nexport class ParimutuelWeb3 implements ParimutuelWeb3Interface {\n  config: ParimutuelConfig;\n  connection: Connection;\n\n  constructor(config: ParimutuelConfig, connection?: Connection) {\n    this.config = config;\n    this.connection = new Connection(\n      config.SOLANA_CLUSTER_URL ?? clusterApiUrl('devnet'),\n      'recent'\n    );\n\n    if (connection) {\n      this.connection = connection;\n    }\n  }\n\n  updateNetwork = sendUpdateNetworkTransaction.bind(this);\n\n  createParimutuel = sendCreateParimutuelTransaction.bind(this);\n\n  updatePrice = sendUpdatePriceTransaction.bind(this);\n\n  placePosition = sendPlacePositionTransaction.bind(this);\n\n  getPlacePositionInstruction = getPlacePositionInstruction.bind(this);\n\n  placePositionWithOperator = sendPlacePositionWithOperatorTransaction.bind(this);\n\n  settlePosition = sendSettlePositionTransaction.bind(this);\n\n  destroyParimutuel = sendDestroyParimutuelTransaction.bind(this);\n\n  destroyPosition = sendDestroyPositionTransaction.bind(this);\n\n  destroyPositionEntry = sendDestroyPositionEntryTransaction.bind(this);\n\n  transferToken = sendTransferTokenTransaction.bind(this);\n\n  depositFee = sendDepositFeeTransaction.bind(this);\n\n  withdrawFee = sendWithdrawFeeTransaction.bind(this);\n\n  createStore = sendCreateStoreTransaction.bind(this);\n\n  attachCookie = sendAttachCookieTransaction.bind(this);\n\n  getFees = getFees.bind(this);\n\n  getMarkets = getMarkets.bind(this);\n\n  getNetwork = getNetwork.bind(this);\n\n  getNetworkTraderAccount = getNetworkTraderAccount.bind(this);\n\n  getParimutuel = getParimutuel.bind(this);\n\n  getParimutuels = getParimutuels.bind(this);\n\n  getUserPositions = getUserPositions.bind(this);\n\n  getParimutuelPositions = getParimutuelPositions.bind(this);\n\n  getEntries = getEntries.bind(this);\n\n  getStore = getStore.bind(this);\n\n  getTraderFeePayerAccount = getTraderFeePayerAccount.bind(this);\n}\n"],"names":["PARIMUTUEL_SEED","Version","NETWORK_SEED","MARKET_SEED","STORE_SEED","HONEYPOT_SEED","NETWORK_TRADER_ACCOUNT_SEED","NETWORK_FEE_PAYER_SEED","MARKET_TRADER_ACCOUNT_SEED","TRADER_POSITION_ACCOUNT_SEED","TRADER_ENTRY_ACCOUNT_SEED","TRADER_SEQUENCE_SEED","MIN_1","MIN_5","MIN_15","HR_1","DAY_1","GET_MULTIPLE_ACCOUNTS_LIMIT","createAssociatedTokenAccountInstruction","associatedTokenPubkey","payerPubkey","walletPubkey","splTokenMintPubkey","TransactionInstruction","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","ASSOCIATED_TOKEN_PROGRAM_ID","data","Buffer","from","FixedFees","args","version","protocolFeeBps","settlementFeeBps","_padding1","_padding2","_padding8","BN","_padding16","_padding8_0","_padding8_1","_padding8_2","_padding8_3","this","LinearFees","protocolTokenRequiredForMinFee","minProtocolFeeBps","maxProtocolFeeBps","minSettlementFeeBps","maxSettlementFeeBps","_padding4","TwoTieredFees","CryptoEnum","MarketEnum","MarketTypeEnum","MarketPairEnum","CurrencyEnum","DurationEnum","MarketStatusEnum","PositionSideEnum","_this","Network","bumpSeed","authority","protocolToken","settlementToken","protocolProductOracle","protocolPriceOracle","protocolFeeCollector","settlementFeeCollector","fee","Store","marketKey","wallet","Market","network","underlyingProductOracle","underlyingPriceOracle","duration","contractSize","Parimutuel","strike","index","slot","marketOpen","marketClose","timeWindowStart","honeypot","numPositions","numPositionsSettled","numPositionsDestroyed","expired","rewardPerShare","activeLongPositions","activeShortPositions","networkFees","marketFees","creator","TraderAccount","traderWallet","aggregationLevelKey","profit","loss","wins","losses","TraderPositionAccount","sequenceNumber","parimutuel","hasStore","store","longPosition","shortPosition","numEntries","paid","payout","TraderEntryAccount","traderPosition","direction","amount","timestamp","TraderSequenceNumber","traderKey","NetworkArgs","instruction","fees","NetworkUpdateArgs","MarketArgs","StoreArgs","ParimutuelArgs","UpdatePriceArgs","TraderAccountsArgs","TraderPositionAccountArgs","TraderSequenceNumberArgs","AttachCookieArgs","UpdatePositionArgs","size","side","seq","SettlePositionArgs","NetworkTraderFeePayerArgs","WithdrawFeeArgs","DestroyParimutuelArgs","DestroyPositionArgs","DestroyPositionEntryArgs","schema","Map","kind","fields","createAttachCookieInstruction","settings","networkPubkey","marketPubkey","userWalletPubkey","parimutuelPubkey","storePubkey","traderPositionAccountPubkey","serialize","createNetworkInstruction","networkWalletPubkey","protocolProductOraclePubkey","protocolPriceOraclePubkey","networkProtocolFeeCollectorPubkey","networkSettlementFeeCollectorPubkey","protocolMintPubkey","settlementMintPubkey","updateNetworkInstruction","createMarketInstruction","marketWalletPubkey","marketProtocolFeeCollectorPubkey","marketSettlementFeeCollectorPubkey","createUpdatePriceInstruction","honeypotPubkey","parimutuelCreatorPubkey","SYSVAR_CLOCK_PUBKEY","createNetworkTraderFeePayerInstruction","networkTraderAccountPubkey","networkTraderFeePayerPubkey","createTraderAccountInstruction","protocolTokenAccountPubkey","settlementTokenAccountPubkey","marketTraderAccountPubkey","createTraderSequenceNumberInstruction","traderSequenceNumberPubkey","createTraderPositionAccountInstruction","createParimutuelInstruction","createStoreInstruction","storeWalletPubkey","storeProtocolFeeCollectorPubkey","storeSettlementFeeCollectorPubkey","createPlacePositionInstruction","entryAccountPubkey","createSettlePositionInstruction","createTransferFundsInstruction","createWithdrawFeeInstruction","createDestroyParimutuelInstruction","createDestroyPositionEntryInstruction","createDestroyPositionInstruction","extendBorsh","BinaryReader","prototype","readPubkey","array","readFixedArray","PublicKey","BinaryWriter","writePubkey","value","writeFixedArray","toBuffer","readPubkeyAsString","base58","encode","writePubkeyAsString","decode","getMintDecimals","mints","cryptoAddress","found","find","mint","address","decimals","shortenAddress","chars","slice","calculateOdd","position","total","Number","toFixed","calculateNetOdd","rake","getProtocolMint","config","marketPair","_get","markets","getSettlementMint","getMarketPubkeys","market","push","isExpired","Boolean","info","isLong","toNumber","getMarketStatus","currentTime","Date","getTime","SETTLED","LIVE","UPCOMING","isMarketAccount","account","MarketV1","isNetworkAccount","NetworkV1","isStoreAccount","StoreV1","isParimutuelAccount","ParimutuelV1","isTraderAccount","TraderAccountV1","isTraderSequenceNumber","TraderSequenceNumberV1","isTraderPositionAccount","ParimutuelTraderPositionAccountV1","notEmpty","findProgramAddress","seeds","key","reduce","acc","toString","window","cached","localStorage","_localStorage","getItem","JSON","parse","parseInt","nonce","result","setItem","stringify","toBase58","findNetworkPubkey","Uint8Array","findMarketPubkey","underlyingProductOraclePubkey","underlyingPriceOraclePubkey","protocolFeeCollectorPubkey","settlementFeeCollectorPubkey","findParimutuelPubkey","marketPubKey","toArray","findNetworkProtocolFeeCollectorPubkey","findNetworkSettlementFeeCollectorPubkey","findMarketProtocolFeeCollectorPubkey","findMarketSettlementFeeCollectorPubkey","findAssociatedTokenAccountPubkey","mintPubkey","findNetworkTraderAccountPubkey","findMarketTraderAccountPubkey","findHoneypotPubkey","findTraderPositionAccountPubkey","findEntryAccountPubkey","findNetworkTraderFeePayerPubkey","findTraderSequenceNumberPubkey","findStorePubkey","getMultipleAccountsCore","connection","pubkeys","map","commitment","_rpcRequest","res","error","Error","join","message","lamports","executable","owner","idx","getMultipleAccounts","length","batches","_chunk","Promise","all","batch","results","flat","getHistoricalTimes","number","startTime","Array","num","reverse","getUpcomingTimes","formatDuration","hours","Math","floor","minutes","seconds","formatTime","unixTime","moment","unix","format","formatDate","formatHour","decodeAccount","accountInfo","AccountLayout","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","state","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthority","closeAuthorityOption","decodeMint","MintLayout","span","mintInfo","mintAuthority","mintAuthorityOption","supply","freezeAuthority","freezeAuthorityOption","decodeFixedFees","buffer","deserializeUnchecked","decodeLinearFees","decodeNetwork","decodeStore","decodeMarket","decodeParimutuel","decodeTraderAccount","decodeTraderSequenceNumber","decodeTraderPositionAccount","decodeTraderEntryAccount","pact","o","onRejected","s","getUnixTs","sleep","ms","resolve","setTimeout","ConfigEnum","sendSignedTransaction","signedTransaction","retry","timeout","confirmation","rawTransaction","sendRawTransaction","skipPreflight","transactionId","done","console","log","status","confirmations","err","subId","reject","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","_connection$_signatur","removeSignatureListener","awaitTransactionSignatureConfirmation","simulateResult","logs","i","line","startsWith","transaction","getRecentBlockhash","recentBlockhash","_connection$getRecent","blockhash","signData","serializeMessage","encodedTransaction","_serialize","encoding","simulateTransaction","_simulateTransaction","sendTransaction","userWallet","instructions","signers","includesFeePayer","block","beforeSend","_connection$getRecent2","setSigners","publicKey","partialSign","signTransaction","Transaction","forEach","add","sendAttachCookieTransaction","_this2","PARIMUTUEL_PROGRAM_ID","NETWORK","hasOwnProperty","getAccountInfo","parimutuelAccount","decodedParimutuelAccount","attachCookieInstruction","response","sendCreateNetworkTraderFeePayerTransaction","networkAccount","decodedNetworkAccount","networkTraderFeePayerInstruction","sendCreateParimutuelTransaction","parimutuelSettings","getMultipleAccountsInfo","marketAccount","decodeMarketAccount","createInstruction","sendCreateTraderAccountTransaction","settlementTokenAccount","traderAccountInstruction","sendCreateTraderPositionAccountTransaction","traderPositionAccountInstruction","sendCreateStoreTransaction","FixedFeesV1","settlementFeeCollectorAccount","storeInstruction","sendUpdatePriceTransaction","networkSettlementFeeCollector","updatePriceInstruction","getPlacePositionInstruction","_this6","feePayerInstruction","updatePositionInstruction","sendPlacePositionWithOperatorTransaction","_this4","tradeSize","OPERATOR_FEE","Token","getAssociatedTokenAddress","sourceAccount","mATA","BONK_MINT","USDC_MINT","sendFeeToOperatorInstruction","createTransferInstruction","sendPlacePositionTransaction","sendSettlePositionTransaction","traderWalletPubkey","NETWORK_PROTOCOL_FEE_COLLECTOR","MARKET_PROTOCOL_FEE_COLLECTOR","networkSettlementFeeCollectorAccount","marketProtocolFeeCollectorAccount","marketSettlementFeeCollectorAccount","protocolTokenAccount","positionAccount","sendWithdrawFeeTransaction","withdrawInstruction","sendDepositFeeTransaction","tradeAccountInstruction","walletTokenAccountPubkey","walletTokenAccount","walletAccountInstruction","undefined","depositInstruction","sendTransferTokenTransaction","authorityKeypair","tradeTokenAccountPubkey","traderTokenAccount","splToken","mintTo","sendAndConfirmTransaction","signature","sendUpdateNetworkTransaction","networkSettings","ix","sendDestroyParimutuelTransaction","sendDestroyPositionEntryTransaction","sendDestroyPositionTransaction","getNetwork","linearFees","getMarkets","marketPubkeys","marketAccounts","fixedFees","filter","getParimutuels","upcoming","historical","times","_uniqWith","_isEqual","time","parimutuelPubkeys","parimutuelAccounts","getParimutuel","getParimutuelPositions","getProgramAccounts","filters","dataSize","memcmp","offset","bytes","traderPositionAccounts","decodedAccounts","getUserPositions","getEntries","traderPositionPubkey","traderEntryAccounts","decodedEntryAccounts","traderPositionPubkeys","decodedPositionAccounts","entry","getFees","networkProtocolFeeAmount","networkSettlementFeeAmount","marketProtocolFeeAmount","marketSettlementFeeAmount","networkProtocolFeeCollectorAccount","decodedProtocolFeeCollector","decodedSettlementFeeCollector","protocolFeeAccountPubkey","protocolFeeAmount","settlementFeeAccountPubkey","settlementFeeAmount","getNetworkTraderAccount","networkTraderAccount","traderAccount","getTraderFeePayerAccount","traderFeePayerAccount","tokenAccount","getStore","storeFees","ParimutuelWeb3","updateNetwork","bind","createParimutuel","updatePrice","placePosition","placePositionWithOperator","settlePosition","destroyParimutuel","destroyPosition","destroyPositionEntry","transferToken","depositFee","withdrawFee","createStore","attachCookie","Connection","SOLANA_CLUSTER_URL","clusterApiUrl","DEV_CONFIG","HXRO_MINT","oracles","HXRO_USD_ORACLE","HXRO_PRICE_ORACLE","SOL_USD_ORACLE","SOL_PRICE_ORACLE","BTC_USD_ORACLE","BTC_PRICE_ORACLE","ETH_USD_ORACLE","ETH_PRICE_ORACLE","SOLUSD","MARKET_60S","MARKET_300S","MARKET_900S","MARKET_3600S","MARKET_86400S","BTCUSD","ETHUSD","DEV_BONK_CONFIG","STAGING_BONK_CONFIG","STAGING_CONFIG","DEVNET_CONFIG","MAINNET_CONFIG"],"mappings":"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"}