/// <reference types="bn.js" />
import { Connection } from '@solana/web3.js';
import { ParimutuelConfig } from './config';
import { ParimutuelWeb3Interface } from './interface';
export declare class ParimutuelWeb3 implements ParimutuelWeb3Interface {
    config: ParimutuelConfig;
    connection: Connection;
    constructor(config: ParimutuelConfig, connection?: Connection);
    updateNetwork: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, protocolMintPubkey: unknown, settlementMintPubkey: unknown, protocolProductOraclePubkey: unknown, protocolPriceOraclePubkey: unknown, networkProtocolFeeCollectorPubkey: unknown, networkSettlementFeeCollectorPubkey: unknown, protocolTokenRequiredForMinFee?: import("bn.js") | undefined, minProtocolFeeBps?: number | undefined, maxProtocolFeeBps?: number | undefined, minSettlementFeeBps?: number | undefined, maxSettlementFeeBps?: number | undefined) => Promise<string>;
    createParimutuel: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, marketPubkey: import("@solana/web3.js").PublicKey, marketOpen: number, timeWindowStart: number, marketClose: number) => Promise<string>;
    updatePrice: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, parimutuelPubkey: import("@solana/web3.js").PublicKey) => Promise<string>;
    placePosition: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, parimutuelPubkey: import("@solana/web3.js").PublicKey, size: number, side: import("..").PositionSideEnum, seq: number) => Promise<string>;
    getPlacePositionInstruction: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, parimutuelPubkey: import("@solana/web3.js").PublicKey, size: number, side: import("..").PositionSideEnum, seq: number) => Promise<import("@solana/web3.js").TransactionInstruction[]>;
    placePositionWithOperator: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, parimutuelPubkey: import("@solana/web3.js").PublicKey, size: number, side: import("..").PositionSideEnum, seq: number) => Promise<string>;
    settlePosition: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, traderWalletPubkey: import("@solana/web3.js").PublicKey, parimutuelPubkey: import("@solana/web3.js").PublicKey) => Promise<string>;
    destroyParimutuel: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, parimutuelPubkey: import("@solana/web3.js").PublicKey) => Promise<string>;
    destroyPosition: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, traderWalletPubkey: import("@solana/web3.js").PublicKey, parimutuelPubkey: import("@solana/web3.js").PublicKey) => Promise<string>;
    destroyPositionEntry: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, traderWalletPubkey: import("@solana/web3.js").PublicKey, parimutuelPubkey: import("@solana/web3.js").PublicKey, sequenceNumber: number) => Promise<string>;
    transferToken: (walletPubkey: import("@solana/web3.js").PublicKey, mintPubkey: import("@solana/web3.js").PublicKey, authorityKeypair: import("@solana/web3.js").Keypair, amount: number) => Promise<void>;
    depositFee: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, marketPubkey: import("@solana/web3.js").PublicKey, mintPubkey: import("@solana/web3.js").PublicKey, amount: number) => Promise<string>;
    withdrawFee: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, amount: number) => Promise<string>;
    createStore: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, storeWalletPubkey: import("@solana/web3.js").PublicKey, marketPubkey: import("@solana/web3.js").PublicKey, protocolFeeBps: number, settlementFeeBps: number) => Promise<string>;
    attachCookie: (userWallet: import("..").WalletSigner | import("@solana/web3.js").Keypair, storePubkey: import("@solana/web3.js").PublicKey, parimutuelPubkey: import("@solana/web3.js").PublicKey) => Promise<string>;
    getFees: (networkWalletPubkey: import("@solana/web3.js").PublicKey, marketWalletPubkey: import("@solana/web3.js").PublicKey) => Promise<import("..").ParimutuelFees>;
    getMarkets: (marketPair: import("..").MarketPairEnum) => Promise<import("..").ParimutuelMarket[]>;
    getNetwork: () => Promise<import("..").ParimutuelNetwork>;
    getNetworkTraderAccount: (userWalletPubkey: import("@solana/web3.js").PublicKey, networkPubkey: import("@solana/web3.js").PublicKey) => Promise<import("..").ParimutuelTraderAccount>;
    getParimutuel: (parimutuelPubkey: import("@solana/web3.js").PublicKey) => Promise<import("..").ParimutuelAccount>;
    getParimutuels: (markets: import("..").MarketPubkey[], number?: number | undefined) => Promise<import("..").ParimutuelAccount[]>;
    getUserPositions: (userWalletPubkey: import("@solana/web3.js").PublicKey, markets: import("..").ParimutuelMarket[]) => Promise<import("..").ParimutuelPosition[]>;
    getParimutuelPositions: (parimutuelPubkey: import("@solana/web3.js").PublicKey) => Promise<import("..").ParimutuelPosition[]>;
    getEntries: (traderPositionPubkey: import("@solana/web3.js").PublicKey) => Promise<import("..").ParimutuelEntry[]>;
    getStore: (storePubkey: import("@solana/web3.js").PublicKey) => Promise<import("..").Store>;
    getTraderFeePayerAccount: (userWalletPubkey: import("@solana/web3.js").PublicKey, networkPubkey: import("@solana/web3.js").PublicKey) => Promise<import("..").ParimutuelTraderFeePayerAccount>;
}
