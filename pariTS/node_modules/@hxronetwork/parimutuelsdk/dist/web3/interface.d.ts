import BN from 'bn.js';
import { Connection, PublicKey, Keypair, TransactionInstruction } from '@solana/web3.js';
import { ParimutuelConfig } from './config';
import { WalletSigner, PositionSideEnum, ParimutuelFees, MarketPairEnum, ParimutuelMarket, ParimutuelNetwork, ParimutuelTraderAccount, ParimutuelAccount, MarketPubkey, ParimutuelPosition, ParimutuelTraderFeePayerAccount, ParimutuelEntry } from '../types';
import { Store } from '../borsh';
export interface ParimutuelWeb3Interface {
    config: ParimutuelConfig;
    connection: Connection;
    updateNetwork: (userWallet: WalletSigner | Keypair, protocolMintPubkey: PublicKey | unknown, settlementMintPubkey: PublicKey | unknown, protocolProductOraclePubkey: PublicKey | unknown, protocolPriceOraclePubkey: PublicKey | unknown, networkProtocolFeeCollectorPubkey: PublicKey | unknown, networkSettlementFeeCollectorPubkey: PublicKey | unknown, protocolTokenRequiredForMinFee: BN, minProtocolFeeBps: number, maxProtocolFeeBps: number, minSettlementFeeBps: number, maxSettlementFeeBps: number) => Promise<string>;
    createParimutuel: (userWallet: WalletSigner, marketPubkey: PublicKey, marketOpen: number, timeWindowStart: number, marketClose: number, signers?: Keypair[]) => Promise<string>;
    updatePrice: (userWallet: WalletSigner, parimutuelPubkey: PublicKey) => Promise<string>;
    placePosition: (userWallet: WalletSigner, parimutuelPubkey: PublicKey, size: number, side: PositionSideEnum, seq: number) => Promise<string>;
    getPlacePositionInstruction: (userWallet: WalletSigner, parimutuelPubkey: PublicKey, size: number, side: PositionSideEnum, seq: number) => Promise<TransactionInstruction[]>;
    settlePosition: (userWallet: WalletSigner, traderWalletPubkey: PublicKey, parimutuelPubkey: PublicKey) => Promise<string>;
    destroyParimutuel: (userWallet: WalletSigner, parimutuelPubkey: PublicKey) => Promise<string>;
    destroyPosition: (userWallet: WalletSigner, traderWalletPubkey: PublicKey, parimutuelPubkey: PublicKey) => Promise<string>;
    destroyPositionEntry: (userWallet: WalletSigner, traderWalletPubkey: PublicKey, parimutuelPubkey: PublicKey, sequenceNumber: number) => Promise<string>;
    transferToken: (walletPubkey: PublicKey, mintPubkey: PublicKey, authorityKeypair: Keypair, amount: number) => Promise<void>;
    depositFee: (userWallet: WalletSigner, marketPubkey: PublicKey, mintPubkey: PublicKey, amount: number) => Promise<string>;
    withdrawFee: (userWallet: WalletSigner, amount: number) => Promise<string>;
    createStore: (userWallet: WalletSigner, storeWalletPubkey: PublicKey, marketPubkey: PublicKey, protocolFeeBps: number, settlementFeeBps: number) => Promise<string>;
    attachCookie: (userWallet: WalletSigner, storePubkey: PublicKey, parimutuelPubkey: PublicKey) => Promise<string>;
    getFees: (networkWalletPubkey: PublicKey, marketWalletPubkey: PublicKey) => Promise<ParimutuelFees>;
    getMarkets: (marketPair: MarketPairEnum) => Promise<ParimutuelMarket[]>;
    getNetwork: () => Promise<ParimutuelNetwork>;
    getNetworkTraderAccount: (userWalletPubkey: PublicKey, networkPubkey: PublicKey) => Promise<ParimutuelTraderAccount>;
    getParimutuel: (parimutuelPubkey: PublicKey) => Promise<ParimutuelAccount>;
    getParimutuels: (markets: MarketPubkey[], number?: number) => Promise<ParimutuelAccount[]>;
    getUserPositions: (userWalletPubkey: PublicKey, markets: ParimutuelMarket[]) => Promise<ParimutuelPosition[]>;
    getParimutuelPositions: (parimutuelPubkey: PublicKey) => Promise<ParimutuelPosition[]>;
    getEntries: (traderPositionPubkey: PublicKey) => Promise<ParimutuelEntry[]>;
    getStore: (storePubkey: PublicKey) => Promise<Store>;
    getTraderFeePayerAccount: (userWalletPubkey: PublicKey, networkPubkey: PublicKey) => Promise<ParimutuelTraderFeePayerAccount>;
}
