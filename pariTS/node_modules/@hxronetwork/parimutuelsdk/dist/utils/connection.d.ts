import { Keypair, Commitment, Connection, Transaction, TransactionInstruction, Blockhash, FeeCalculator } from '@solana/web3.js';
import { WalletSigner } from '../types';
interface BlockhashAndFeeCalculator {
    blockhash: Blockhash;
    feeCalculator: FeeCalculator;
}
export declare type TransactionState = {
    transactionId: string;
    slot: number;
};
export declare const getUnixTs: () => number;
export declare function sleep(ms: number): Promise<void>;
export declare const sendSignedTransaction: ({ connection, signedTransaction, retry, timeout, confirmation, }: {
    signedTransaction: Transaction;
    connection: Connection;
    sendingMessage?: string | undefined;
    sentMessage?: string | undefined;
    successMessage?: string | undefined;
    retry?: boolean | undefined;
    timeout?: number | undefined;
    confirmation?: boolean | undefined;
}) => Promise<TransactionState>;
export declare const sendTransaction: (connection: Connection, userWallet: WalletSigner, instructions: TransactionInstruction[], signers: Keypair[], commitment?: Commitment, includesFeePayer?: boolean, retry?: boolean, confirmation?: boolean, block?: BlockhashAndFeeCalculator | undefined, beforeSend?: (() => void) | undefined) => Promise<TransactionState | undefined>;
export {};
