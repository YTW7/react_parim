{"version":3,"file":"index.umd.js","sources":["../src/borsh/Version.ts","../src/constants/parimutuel.ts","../src/instructions/ata.ts","../src/borsh/FixedFees.ts","../src/borsh/LinearFees.ts","../src/types/enum.ts","../src/borsh/TwoTieredFees.ts","../src/borsh/Network.ts","../src/borsh/Store.ts","../src/borsh/Market.ts","../src/borsh/Parimutuel.ts","../src/borsh/TraderAccount.ts","../src/borsh/TraderPositionAccount.ts","../src/borsh/TraderEntryAccount.ts","../src/borsh/TraderSequenceNumber.ts","../src/borsh/args.ts","../src/borsh/schema.ts","../src/instructions/attachCookie.ts","../src/instructions/network.ts","../src/instructions/updatePrice.ts","../src/instructions/networkTraderFeePayer.ts","../src/instructions/traderAccounts.ts","../src/instructions/traderPositionAccount.ts","../src/instructions/parimutuel.ts","../src/instructions/store.ts","../src/instructions/placePosition.ts","../src/instructions/settlePosition.ts","../src/instructions/withdrawFee.ts","../src/instructions/destroyParimutuel.ts","../src/instructions/destroyPositionEntry.ts","../src/instructions/destroyPosition.ts","../src/utils/borsh.ts","../src/utils/parimutuel.ts","../src/utils/utils.ts","../src/utils/pubkey.ts","../src/utils/rpc.ts","../src/utils/time.ts","../src/utils/decode.ts","../src/utils/connection.ts","../src/web3/config.ts","../src/transactions/attachCookie.ts","../src/transactions/createParimutuel.ts","../src/transactions/createStore.ts","../src/transactions/updatePrice.ts","../src/transactions/placePosition.ts","../src/transactions/settlePosition.ts","../src/transactions/withdrawFee.ts","../src/transactions/depositFee.ts","../src/transactions/transferToken.ts","../src/transactions/updateNetwork.ts","../src/transactions/destroyParimutuel.ts","../src/transactions/destroyPositionEntry.ts","../src/transactions/destroyPosition.ts","../src/queries/getNetwork.ts","../src/queries/getMarkets.ts","../src/queries/getParimutuels.ts","../src/queries/getPositions.ts","../src/queries/getEntries.ts","../src/queries/getFees.ts","../src/queries/getNetworkTraderAccount.ts","../src/queries/getTraderFeePayerAccount.ts","../src/queries/getStore.ts","../src/web3/web3.ts","../src/utils/number.ts","../src/instructions/market.ts","../src/instructions/traderSequenceNumber.ts","../src/instructions/transferFunds.ts","../src/utils/crypto.ts","../src/transactions/createNetworkTraderFeePayer.ts","../src/transactions/createTraderAccounts.ts","../src/transactions/createTraderPositionAccount.ts"],"sourcesContent":["export enum Version {\n  Uninitialized,\n  NetworkV1,\n  MarketV1,\n  StoreV1,\n  ParimutuelV1,\n  TraderAccountV1,\n  ParimutuelTraderPositionAccountV1,\n  TraderSequenceNumberV1,\n  FixedFeesV1,\n  LinearFeesV1,\n}\n","export const PARIMUTUEL_SEED = 'parimutuel';\nexport const NETWORK_SEED = 'network';\nexport const MARKET_SEED = 'market';\nexport const STORE_SEED = 'store';\nexport const HONEYPOT_SEED = 'honeypot';\nexport const NETWORK_TRADER_ACCOUNT_SEED = 'network_trader_account';\nexport const NETWORK_FEE_PAYER_SEED = 'network_trader_fee_payer';\nexport const MARKET_TRADER_ACCOUNT_SEED = 'market_trader_account';\nexport const TRADER_POSITION_ACCOUNT_SEED = 'parimutuel_trader_position';\nexport const TRADER_ENTRY_ACCOUNT_SEED = 'parimutuel_trader_entry';\nexport const TRADER_SEQUENCE_SEED = 'trader_sequence';\n\nexport const MIN_1 = 60;\nexport const MIN_5 = 300;\nexport const MIN_15 = 900;\nexport const HR_1 = 3600;\nexport const DAY_1 = 86400;\n\nexport const GET_MULTIPLE_ACCOUNTS_LIMIT = 99; // solana sdk limit\n","import {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\n\nexport const createAssociatedTokenAccountInstruction = (\n  associatedTokenPubkey: PublicKey,\n  payerPubkey: PublicKey,\n  walletPubkey: PublicKey,\n  splTokenMintPubkey: PublicKey\n): TransactionInstruction => {\n  const keys = [\n    {\n      pubkey: payerPubkey,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenPubkey,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n","import BN from 'bn.js';\n\nexport class FixedFees {\n  enum: number = 1;\n  version: number;\n  protocolFeeBps: BN;\n  settlementFeeBps: BN;\n  _padding1: number = 0;\n  _padding2: number = 0;\n  _padding8: BN = new BN(0);\n  _padding16: BN = new BN(0);\n  _padding8_0: BN = new BN(0);\n  _padding8_1: BN = new BN(0);\n  _padding8_2: BN = new BN(0);\n  _padding8_3: BN = new BN(0);\n\n  constructor(args: {\n    version: number;\n    protocolFeeBps: number;\n    settlementFeeBps: number;\n  }) {\n    this.version = args.version;\n    this.protocolFeeBps = new BN(args.protocolFeeBps);\n    this.settlementFeeBps = new BN(args.settlementFeeBps);\n  }\n}\n","import BN from 'bn.js';\n\nexport class LinearFees {\n  enum: number = 2;\n  version: number;\n  protocolTokenRequiredForMinFee: BN;\n  minProtocolFeeBps: number;\n  maxProtocolFeeBps: number;\n  minSettlementFeeBps: number;\n  maxSettlementFeeBps: number;\n  _padding1: number = 0;\n  _padding2: number = 0;\n  _padding4: number = 0;\n  _padding8: BN = new BN(0);\n  _padding8_0: BN = new BN(0);\n  _padding8_1: BN = new BN(0);\n  _padding8_2: BN = new BN(0);\n  _padding8_3: BN = new BN(0);\n\n  constructor(args: {\n    version: number;\n    protocolTokenRequiredForMinFee: BN;\n    minProtocolFeeBps: number;\n    maxProtocolFeeBps: number;\n    minSettlementFeeBps: number;\n    maxSettlementFeeBps: number;\n  }) {\n    this.version = args.version;\n    this.protocolTokenRequiredForMinFee = args.protocolTokenRequiredForMinFee;\n    this.minProtocolFeeBps = args.minProtocolFeeBps;\n    this.maxProtocolFeeBps = args.maxProtocolFeeBps;\n    this.minSettlementFeeBps = args.minSettlementFeeBps;\n    this.maxSettlementFeeBps = args.maxSettlementFeeBps;\n  }\n}\n","export enum CryptoEnum {\n  SOLANA = 'solana',\n  USDC = 'usdc',\n  HXRO = 'hxro',\n}\n\nexport enum MarketEnum {\n  PARIMUTUEL = 'parimutuel',\n  OPTIONS = 'options',\n}\n\nexport enum MarketTypeEnum {\n  CRYPTO = 'crypto',\n  FINANCIAL = 'financial',\n  SPORTS = 'sports',\n}\n\nexport enum MarketPairEnum {\n  BTCUSD = 'BTCUSD',\n  SOLUSD = 'SOLUSD',\n  ETHUSD = 'ETHUSD',\n  HXROUSD = 'HXROUSD',\n}\n\nexport enum CurrencyEnum {\n  USDC = 'USDC',\n  HXRO = 'HXRO',\n}\n\nexport enum DurationEnum {\n  ONE_MIN = '1min',\n  FIVE_MIN = '5min',\n  FIFTEEN_MIN = '15min',\n  ONE_HOUR = '1hour',\n  ONE_DAY = '1day',\n}\n\nexport enum MarketStatusEnum {\n  UPCOMING = 'upcoming',\n  LIVE = 'live',\n  SETTLED = 'settled',\n}\n\nexport enum PositionSideEnum {\n  SHORT = 1,\n  LONG = 0,\n}\n","import BN from 'bn.js';\n\nimport { LinearFees } from './LinearFees'\n\nexport class TwoTieredFees extends LinearFees {\n  enum: number = 3;\n\n  constructor(args: {\n    version: number;\n    protocolTokenRequiredForMinFee: BN;\n    minProtocolFeeBps: number;\n    maxProtocolFeeBps: number;\n    minSettlementFeeBps: number;\n    maxSettlementFeeBps: number;\n  }) {\n    super(args);\n  }\n}\n","import { LinearFees } from './LinearFees';\n\nexport class Network {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  authority: string;\n  protocolToken: string;\n  settlementToken: string;\n  protocolProductOracle: string;\n  protocolPriceOracle: string;\n  protocolFeeCollector: string;\n  settlementFeeCollector: string;\n  fee: LinearFees;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    authority: string;\n    protocolToken: string;\n    settlementToken: string;\n    protocolProductOracle: string;\n    protocolPriceOracle: string;\n    protocolFeeCollector: string;\n    settlementFeeCollector: string;\n    fee: LinearFees;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.authority = args.authority;\n    this.protocolToken = args.protocolToken;\n    this.settlementToken = args.settlementToken;\n    this.protocolProductOracle = args.protocolProductOracle;\n    this.protocolPriceOracle = args.protocolPriceOracle;\n    this.protocolFeeCollector = args.protocolFeeCollector;\n    this.settlementFeeCollector = args.settlementFeeCollector;\n    this.fee = args.fee;\n  }\n}\n","import { FixedFees } from './FixedFees';\n\nexport class Store {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  marketKey: string;\n  wallet: string;\n  protocolFeeCollector: string;\n  settlementFeeCollector: string;\n  fee: FixedFees;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    marketKey: string;\n    wallet: string;\n    protocolFeeCollector: string;\n    settlementFeeCollector: string;\n    fee: FixedFees;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.marketKey = args.marketKey;\n    this.wallet = args.wallet;\n    this.protocolFeeCollector = args.protocolFeeCollector;\n    this.settlementFeeCollector = args.settlementFeeCollector;\n    this.fee = args.fee;\n  }\n}\n","import BN from 'bn.js';\n\nimport { FixedFees } from './FixedFees';\n\nexport class Market {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  authority: string;\n  network: string;\n  underlyingProductOracle: string;\n  underlyingPriceOracle: string;\n  duration: BN;\n  contractSize: BN;\n  protocolFeeCollector: string;\n  settlementFeeCollector: string;\n  fee: FixedFees;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    authority: string;\n    network: string;\n    underlyingProductOracle: string;\n    underlyingPriceOracle: string;\n    duration: BN;\n    contractSize: BN;\n    protocolFeeCollector: string;\n    settlementFeeCollector: string;\n    fee: FixedFees;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.authority = args.authority;\n    this.network = args.network;\n    this.underlyingProductOracle = args.underlyingProductOracle;\n    this.underlyingPriceOracle = args.underlyingPriceOracle;\n    this.duration = args.duration;\n    this.contractSize = args.contractSize;\n    this.protocolFeeCollector = args.protocolFeeCollector;\n    this.settlementFeeCollector = args.settlementFeeCollector;\n    this.fee = args.fee;\n  }\n}\n","import BN from 'bn.js';\n\nimport { LinearFees } from './LinearFees';\n\nexport class Parimutuel {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  strike: BN;\n  index: BN;\n  slot: BN;\n  marketOpen: BN;\n  marketClose: BN;\n  timeWindowStart: BN;\n  marketKey: string;\n  honeypot: string;\n  numPositions: BN;\n  numPositionsSettled: BN;\n  numPositionsDestroyed: BN;\n  expired: boolean;\n  rewardPerShare: BN;\n  activeLongPositions: BN;\n  activeShortPositions: BN;\n  networkFees: LinearFees;\n  marketFees: LinearFees;\n  creator: string;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    strike: BN;\n    index: BN;\n    slot: BN;\n    marketOpen: BN;\n    marketClose: BN;\n    timeWindowStart: BN;\n    marketKey: string;\n    honeypot: string;\n    numPositions: BN;\n    numPositionsSettled: BN;\n    numPositionsDestroyed: BN;\n    expired: boolean;\n    rewardPerShare: BN;\n    activeLongPositions: BN;\n    activeShortPositions: BN;\n    networkFees: LinearFees;\n    marketFees: LinearFees;\n    creator: string;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.strike = args.strike;\n    this.index = args.index;\n    this.slot = args.slot;\n    this.marketOpen = args.marketOpen;\n    this.marketClose = args.marketClose;\n    this.timeWindowStart = args.timeWindowStart;\n    this.marketKey = args.marketKey;\n    this.honeypot = args.honeypot;\n    this.numPositions = args.numPositions;\n    this.numPositionsSettled = args.numPositionsSettled;\n    this.numPositionsDestroyed = args.numPositionsDestroyed;\n    this.expired = args.expired;\n    this.rewardPerShare = args.rewardPerShare;\n    this.activeLongPositions = args.activeLongPositions;\n    this.activeShortPositions = args.activeShortPositions;\n    this.networkFees = args.networkFees;\n    this.marketFees = args.marketFees;\n    this.creator = args.creator;\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderAccount {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  traderWallet: string;\n  aggregationLevelKey: string;\n  profit: BN;\n  loss: BN;\n  wins: BN;\n  losses: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    traderWallet: string;\n    aggregationLevelKey: string;\n    profit: number;\n    loss: number;\n    wins: number;\n    losses: number;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.traderWallet = args.traderWallet;\n    this.aggregationLevelKey = args.aggregationLevelKey;\n    this.profit = new BN(args.profit);\n    this.loss = new BN(args.loss);\n    this.wins = new BN(args.wins);\n    this.losses = new BN(args.losses);\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderPositionAccount {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  sequenceNumber: BN;\n  parimutuel: string;\n  traderWallet: string;\n  hasStore: boolean;\n  store: string;\n  longPosition: BN;\n  shortPosition: BN;\n  numEntries: BN;\n  paid: boolean;\n  payout: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    sequenceNumber: BN;\n    parimutuel: string;\n    traderWallet: string;\n    hasStore: boolean;\n    store: string;\n    longPosition: BN;\n    shortPosition: BN;\n    numEntries: BN;\n    paid: boolean;\n    payout: BN;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.sequenceNumber = args.sequenceNumber;\n    this.parimutuel = args.parimutuel;\n    this.traderWallet = args.traderWallet;\n    this.hasStore = args.hasStore;\n    this.store = args.store;\n    this.longPosition = args.longPosition;\n    this.shortPosition = args.shortPosition;\n    this.numEntries = args.numEntries;\n    this.paid = args.paid;\n    this.payout = args.payout;\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderEntryAccount {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  traderPosition: string;\n  sequenceNumber: BN;\n  traderWallet: string;\n  direction: number;\n  amount: BN;\n  timestamp: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    traderPosition: string;\n    sequenceNumber: BN;\n    traderWallet: string;\n    direction: number;\n    amount: BN;\n    timestamp: BN;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.traderPosition = args.traderPosition;\n    this.sequenceNumber = args.sequenceNumber;\n    this.traderWallet = args.traderWallet;\n    this.direction = args.direction;\n    this.amount = args.amount;\n    this.timestamp = args.timestamp;\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderSequenceNumber {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  parimutuel: string;\n  traderKey: string;\n  sequenceNumber: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    parimutuel: string;\n    traderKey: string;\n    sequenceNumber: BN;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.parimutuel = args.parimutuel;\n    this.traderKey = args.traderKey;\n    this.sequenceNumber = args.sequenceNumber;\n  }\n}\n","import BN from 'bn.js';\nimport { FixedFees } from './FixedFees';\nimport { LinearFees } from './LinearFees';\nimport { TwoTieredFees } from './TwoTieredFees';\n\nexport type DynamicFees = LinearFees | TwoTieredFees;\n\nexport class NetworkArgs {\n  instruction: number = 0;\n  fees: DynamicFees;\n\n  constructor(args: { fees: DynamicFees }) {\n    this.fees = args.fees;\n  }\n}\n\nexport class NetworkUpdateArgs {\n  instruction: number = 14;\n  fees: DynamicFees;\n\n  constructor(args: { fees: DynamicFees }) {\n    this.fees = args.fees;\n  }\n}\n\nexport class MarketArgs {\n  instruction: number = 1;\n  duration: BN;\n  contractSize: BN;\n  fees: FixedFees;\n\n  constructor(args: {\n    duration: number;\n    contractSize: number;\n    fees: FixedFees;\n  }) {\n    this.duration = new BN(args.duration);\n    this.contractSize = new BN(args.contractSize);\n    this.fees = args.fees;\n  }\n}\n\nexport class StoreArgs {\n  instruction: number = 2;\n  fees: FixedFees;\n\n  constructor(args: { fees: FixedFees }) {\n    this.fees = args.fees;\n  }\n}\n\nexport class ParimutuelArgs {\n  instruction: number = 3;\n  marketOpen: BN;\n  marketClose: BN;\n  timeWindowStart: BN;\n\n  constructor(args: {\n    marketOpen: number;\n    marketClose: number;\n    timeWindowStart: number;\n  }) {\n    this.marketOpen = new BN(args.marketOpen);\n    this.marketClose = new BN(args.marketClose);\n    this.timeWindowStart = new BN(args.timeWindowStart);\n  }\n}\n\nexport class UpdatePriceArgs {\n  instruction: number = 4;\n}\n\nexport class TraderAccountsArgs {\n  instruction: number = 5;\n}\n\nexport class TraderPositionAccountArgs {\n  instruction: number = 6;\n}\n\nexport class TraderSequenceNumberArgs {\n  instruction: number = 7;\n}\n\nexport class AttachCookieArgs {\n  instruction: number = 8;\n}\n\nexport class UpdatePositionArgs {\n  instruction: number = 9;\n  size: BN;\n  side: number;\n  seq: BN;\n\n  constructor(args: { size: number; side: number, seq: number }) {\n    this.size = new BN(args.size);\n    this.side = args.side;\n    this.seq = new BN(args.seq);\n  }\n}\n\nexport class SettlePositionArgs {\n  instruction: number = 10;\n}\n\nexport class NetworkTraderFeePayerArgs {\n  instruction: number = 11;\n}\n\nexport class WithdrawFeeArgs {\n  instruction: number = 12;\n  amount: BN;\n\n  constructor(args: { amount: number }) {\n    this.amount = new BN(args.amount);\n  }\n}\n\nexport class DestroyParimutuelArgs {\n  instruction: number = 15;\n}\n\nexport class DestroyPositionArgs {\n  instruction: number = 18;\n}\n\nexport class DestroyPositionEntryArgs {\n  instruction: number = 17;\n}\n","import {\n  NetworkArgs,\n  NetworkUpdateArgs,\n  MarketArgs,\n  StoreArgs,\n  ParimutuelArgs,\n  UpdatePriceArgs,\n  TraderAccountsArgs,\n  TraderPositionAccountArgs,\n  TraderSequenceNumberArgs,\n  AttachCookieArgs,\n  UpdatePositionArgs,\n  SettlePositionArgs,\n  NetworkTraderFeePayerArgs,\n  WithdrawFeeArgs,\n  DestroyParimutuelArgs,\n  DestroyPositionArgs,\n  DestroyPositionEntryArgs,\n} from './args';\n\nimport { FixedFees } from './FixedFees';\nimport { LinearFees } from './LinearFees';\nimport { TwoTieredFees } from './TwoTieredFees';\nimport { Network } from './Network';\nimport { Store } from './Store';\nimport { Market } from './Market';\nimport { Parimutuel } from './Parimutuel';\nimport { TraderAccount } from './TraderAccount';\nimport { TraderSequenceNumber } from './TraderSequenceNumber';\nimport { TraderPositionAccount } from './TraderPositionAccount';\nimport { TraderEntryAccount } from './TraderEntryAccount';\n\n// eslint-disable-next-line\nexport const schema = new Map<any, any>([\n  [\n    NetworkArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['fees', TwoTieredFees], // Supports both: LinearFees | TwoTieredFees\n      ],\n    },\n  ],\n  [\n    NetworkUpdateArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['fees', TwoTieredFees], // Supports both: LinearFees | TwoTieredFees\n      ],\n    },\n  ],\n  [\n    MarketArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['duration', 'u64'],\n        ['contractSize', 'u64'],\n        ['fees', FixedFees],\n      ],\n    },\n  ],\n  [\n    StoreArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['fees', FixedFees],\n      ],\n    },\n  ],\n  [\n    ParimutuelArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['marketOpen', 'u64'],\n        ['marketClose', 'u64'],\n        ['timeWindowStart', 'u64'],\n      ],\n    },\n  ],\n  [\n    UpdatePriceArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    TraderAccountsArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    TraderSequenceNumberArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    TraderPositionAccountArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    AttachCookieArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    UpdatePositionArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['size', 'u64'],\n        ['side', 'u8'],\n        ['seq', 'u64'],\n      ],\n    },\n  ],\n  [\n    SettlePositionArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    NetworkTraderFeePayerArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    WithdrawFeeArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['amount', 'u64'],\n      ],\n    },\n  ],\n  [\n    DestroyParimutuelArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    DestroyPositionArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    DestroyPositionEntryArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    LinearFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['protocolTokenRequiredForMinFee', 'u64'],\n        ['minProtocolFeeBps', 'u16'],\n        ['maxProtocolFeeBps', 'u16'],\n        ['minSettlementFeeBps', 'u16'],\n        ['maxSettlementFeeBps', 'u16'],\n        ['_padding1', 'u8'],\n        ['_padding2', 'u16'],\n        ['_padding4', 'u32'],\n        ['_padding8', 'u64'],\n        ['_padding8_0', 'u64'],\n        ['_padding8_1', 'u64'],\n        ['_padding8_2', 'u64'],\n        ['_padding8_3', 'u64'],\n      ],\n    },\n  ],\n  [\n    TwoTieredFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['protocolTokenRequiredForMinFee', 'u64'],\n        ['minProtocolFeeBps', 'u16'],\n        ['maxProtocolFeeBps', 'u16'],\n        ['minSettlementFeeBps', 'u16'],\n        ['maxSettlementFeeBps', 'u16'],\n        ['_padding1', 'u8'],\n        ['_padding2', 'u16'],\n        ['_padding4', 'u32'],\n        ['_padding8', 'u64'],\n        ['_padding8_0', 'u64'],\n        ['_padding8_1', 'u64'],\n        ['_padding8_2', 'u64'],\n        ['_padding8_3', 'u64'],\n      ],\n    },\n  ],\n  [\n    FixedFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['protocolFeeBps', 'u16'],\n        ['settlementFeeBps', 'u16'],\n        ['_padding1', 'u8'],\n        ['_padding2', 'u16'],\n        ['_padding8', 'u64'],\n        ['_padding16', 'u128'],\n        ['_padding8_0', 'u64'],\n        ['_padding8_1', 'u64'],\n        ['_padding8_2', 'u64'],\n        ['_padding8_3', 'u64'],\n      ],\n    },\n  ],\n  [\n    Network,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['authority', 'pubkeyAsString'],\n        ['protocolToken', 'pubkeyAsString'],\n        ['settlementToken', 'pubkeyAsString'],\n        ['protocolProductOracle', 'pubkeyAsString'],\n        ['protocolPriceOracle', 'pubkeyAsString'],\n        ['protocolFeeCollector', 'pubkeyAsString'],\n        ['settlementFeeCollector', 'pubkeyAsString'],\n        ['fee', LinearFees],\n      ],\n    },\n  ],\n  [\n    Market,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['authority', 'pubkeyAsString'],\n        ['network', 'pubkeyAsString'],\n        ['underlyingProductOracle', 'pubkeyAsString'],\n        ['underlyingPriceOracle', 'pubkeyAsString'],\n        ['duration', 'u64'],\n        ['contractSize', 'u64'],\n        ['protocolFeeCollector', 'pubkeyAsString'],\n        ['settlementFeeCollector', 'pubkeyAsString'],\n        ['fee', FixedFees],\n      ],\n    },\n  ],\n  [\n    Store,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['marketKey', 'pubkeyAsString'],\n        ['wallet', 'pubkeyAsString'],\n        ['protocolFeeCollector', 'pubkeyAsString'],\n        ['settlementFeeCollector', 'pubkeyAsString'],\n        ['fee', LinearFees],\n      ],\n    },\n  ],\n  [\n    Parimutuel,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['strike', 'u64'],\n        ['index', 'u64'],\n        ['slot', 'u64'],\n        ['marketOpen', 'u64'],\n        ['marketClose', 'u64'],\n        ['timeWindowStart', 'u64'],\n        ['marketKey', 'pubkeyAsString'],\n        ['honeypot', 'pubkeyAsString'],\n        ['numPositions', 'u64'],\n        ['numPositionsSettled', 'u64'],\n        ['numPositionsDestroyed', 'u64'],\n        ['expired', 'u8'],\n        ['rewardPerShare', 'u64'],\n        ['activeLongPositions', 'u64'],\n        ['activeShortPositions', 'u64'],\n        ['networkFees', TwoTieredFees],\n        ['marketFees', FixedFees],\n        ['creator', 'pubkeyAsString'],\n      ],\n    },\n  ],\n  [\n    TraderAccount,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['aggregationLevelKey', 'pubkeyAsString'],\n        ['profit', 'u64'],\n        ['loss', 'u64'],\n        ['wins', 'u64'],\n        ['losses', 'u64'],\n      ],\n    },\n  ],\n  [\n    TraderSequenceNumber,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['parimutuel', 'pubkeyAsString'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['sequenceNumber', 'u64'],\n      ],\n    },\n  ],\n  [\n    TraderPositionAccount,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['sequenceNumber', 'u64'],\n        ['parimutuel', 'pubkeyAsString'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['hasStore', 'u8'],\n        ['store', 'pubkeyAsString'],\n        ['longPosition', 'u64'],\n        ['shortPosition', 'u64'],\n        ['numEntries', 'u64'],\n        ['paid', 'u8'],\n        ['payout', 'u64'],\n      ],\n    },\n  ],\n  [\n    TraderEntryAccount,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['traderPosition', 'pubkeyAsString'],\n        ['sequenceNumber', 'u64'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['direction', 'u8'],\n        ['amount', 'u64'],\n        ['timestamp', 'u64'],\n      ],\n    },\n  ],\n]);\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { AttachCookieArgs, schema } from '../borsh';\n\nexport const createAttachCookieInstruction = async (\n  programId: PublicKey,\n  settings: AttachCookieArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  storePubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { NetworkArgs, schema } from '../borsh';\n\nexport const createNetworkInstruction = async (\n  programId: PublicKey,\n  settings: NetworkArgs,\n  networkPubkey: PublicKey,\n  networkWalletPubkey: PublicKey,\n  payerPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: networkProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n\n\nexport const updateNetworkInstruction = async (\n  programId: PublicKey,\n  settings: NetworkArgs,\n  networkPubkey: PublicKey,\n  networkWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<TransactionInstruction> => new TransactionInstruction({\n  keys: [\n    {\n      pubkey: networkPubkey,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: protocolMintPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: protocolProductOraclePubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: protocolPriceOraclePubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: settlementMintPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: networkWalletPubkey,\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: networkProtocolFeeCollectorPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: networkSettlementFeeCollectorPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n  ],\n  programId,\n  data: Buffer.from(serialize(schema, settings)),\n});\n","import {\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { UpdatePriceArgs, schema } from '../borsh';\n\nexport const createUpdatePriceInstruction = async (\n  programId: PublicKey,\n  settings: UpdatePriceArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  parimutuelCreatorPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: parimutuelCreatorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { NetworkTraderFeePayerArgs, schema } from '../borsh';\n\nexport const createNetworkTraderFeePayerInstruction = async (\n  programId: PublicKey,\n  settings: NetworkTraderFeePayerArgs,\n  networkPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  networkTraderFeePayerPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderFeePayerPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { TraderAccountsArgs, schema } from '../borsh';\n\nexport const createTraderAccountInstruction = async (\n  programId: PublicKey,\n  settings: TraderAccountsArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  marketTraderAccountPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { TraderPositionAccountArgs, schema } from '../borsh';\n\nexport const createTraderPositionAccountInstruction = async (\n  programId: PublicKey,\n  settings: TraderPositionAccountArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { ParimutuelArgs, schema } from '../borsh';\n\nexport const createParimutuelInstruction = async (\n  programId: PublicKey,\n  settings: ParimutuelArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { StoreArgs, schema } from '../borsh';\n\nexport const createStoreInstruction = async (\n  programId: PublicKey,\n  settings: StoreArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  storeWalletPubkey: PublicKey,\n  payerPubkey: PublicKey,\n  storePubkey: PublicKey,\n  storeProtocolFeeCollectorPubkey: PublicKey,\n  storeSettlementFeeCollectorPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storePubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: storeWalletPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { UpdatePositionArgs, schema } from '../borsh';\n\nexport const createPlacePositionInstruction = async (\n  programId: PublicKey,\n  settings: UpdatePositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  entryAccountPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: entryAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { SettlePositionArgs, schema } from '../borsh';\n\nexport const createSettlePositionInstruction = async (\n  programId: PublicKey,\n  settings: SettlePositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  networkTraderFeePayerPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  marketProtocolFeeCollectorPubkey: PublicKey,\n  marketSettlementFeeCollectorPubkey: PublicKey,\n  marketTraderAccountPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  parimutuelCreatorPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: parimutuelCreatorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: true, // TODO\n      },\n      {\n        pubkey: networkTraderFeePayerPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { WithdrawFeeArgs, schema } from '../borsh';\n\nexport const createWithdrawFeeInstruction = async (\n  programId: PublicKey,\n  settings: WithdrawFeeArgs,\n  networkPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  networkTraderFeePayerPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderFeePayerPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\n\nimport { DestroyParimutuelArgs, schema } from '../borsh';\n\nexport const createDestroyParimutuelInstruction = async (\n  programId: PublicKey,\n  settings: DestroyParimutuelArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  parimutuelCreatorPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  settlementFeeCollector: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: parimutuelCreatorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementFeeCollector,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { DestroyPositionEntryArgs, schema } from '../borsh';\n\nexport const createDestroyPositionEntryInstruction = async (\n  programId: PublicKey,\n  settings: DestroyPositionEntryArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  entryAccountPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: entryAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { DestroyPositionArgs, schema } from '../borsh';\n\nexport const createDestroyPositionInstruction = async (\n  programId: PublicKey,\n  settings: DestroyPositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\n\nexport const extendBorsh = (): void => {\n  // eslint-disable-next-line\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  // eslint-disable-next-line\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  // eslint-disable-next-line\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as string;\n  };\n\n  // eslint-disable-next-line\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: string\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport _get from 'lodash/get';\n\nimport { MIN_1, MIN_5, MIN_15, HR_1, DAY_1 } from '../constants';\nimport { Version } from '../borsh';\nimport {\n  MarketPairEnum,\n  MarketPubkey,\n  ParimutuelAccount,\n  MarketStatusEnum,\n} from '../types';\nimport { ParimutuelConfig } from '../web3';\n\nexport const getProtocolMint = (\n  config: ParimutuelConfig,\n  marketPair: MarketPairEnum\n): PublicKey => _get(config.markets, [marketPair, 'PROTOCOL_MINT']);\n\nexport const getSettlementMint = (\n  config: ParimutuelConfig,\n  marketPair: MarketPairEnum\n): PublicKey => _get(config.markets, [marketPair, 'SETTLEMENT_MINT']);\n\nexport const getMarketPubkeys = (\n  config: ParimutuelConfig,\n  marketPair: MarketPairEnum\n): MarketPubkey[] => {\n  const market = [];\n\n  if (_get(config.markets, [marketPair, 'MARKET_60S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_60S']),\n      duration: MIN_1,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_300S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_300S']),\n      duration: MIN_5,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_900S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_900S']),\n      duration: MIN_15,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_3600S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_3600S']),\n      duration: HR_1,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_86400S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_86400S']),\n      duration: DAY_1,\n    });\n  }\n\n  return market;\n};\n\nexport const isExpired = (parimutuel: ParimutuelAccount): boolean => {\n  const { expired } = parimutuel.info.parimutuel;\n  return Boolean(expired);\n};\n\nexport const isLong = (parimutuel: ParimutuelAccount): boolean => {\n  const { strike, index } = parimutuel.info.parimutuel;\n  return index.toNumber() > strike.toNumber();\n};\n\nexport const getMarketStatus = (\n  timeWindowStart: string,\n  marketClose: string,\n  duration: number\n): MarketStatusEnum => {\n  const currentTime = new Date().getTime();\n\n  if (currentTime >= Number(marketClose) + duration * 1000)\n    return MarketStatusEnum.SETTLED;\n\n  if (\n    currentTime >= Number(timeWindowStart) &&\n    currentTime < Number(marketClose) + duration * 1000 // TODO: remove duration\n  ) {\n    return MarketStatusEnum.LIVE;\n  }\n\n  return MarketStatusEnum.UPCOMING;\n};\n\nexport const isMarketAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.MarketV1;\n\nexport const isNetworkAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.NetworkV1;\n\nexport const isStoreAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.StoreV1;\n\nexport const isParimutuelAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.ParimutuelV1;\n\nexport const isTraderAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.TraderAccountV1;\n\nexport const isTraderSequenceNumber = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.TraderSequenceNumberV1;\n\nexport const isTraderPositionAccount = (\n  account: AccountInfo<Buffer>\n): boolean => account.data[0] === Version.ParimutuelTraderPositionAccountV1;\n","import { PublicKey } from '@solana/web3.js';\n\nimport { AddressInfo } from '../types';\n\nexport const notEmpty = <T>(value: T): value is NonNullable<typeof value> =>\n  !!value;\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n): Promise<AddressInfo> => {\n  const key =\n    'pda-' +\n    seeds.reduce((acc, value) => acc + value.toString('hex'), '') +\n    programId.toString();\n\n  if (typeof window !== 'undefined') {\n    const cached = localStorage?.getItem(key);\n    if (cached) {\n      const value = JSON.parse(cached);\n      return [value.key, parseInt(value.nonce)] as [string, number];\n    }\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  if (typeof window !== 'undefined') {\n    localStorage?.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      })\n    );\n  }\n\n  return [result[0].toBase58(), result[1]];\n};\n","import { PublicKey } from '@solana/web3.js';\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport BN from 'bn.js';\n\nimport {\n  NETWORK_SEED,\n  MARKET_SEED,\n  PARIMUTUEL_SEED,\n  MARKET_TRADER_ACCOUNT_SEED,\n  NETWORK_TRADER_ACCOUNT_SEED,\n  HONEYPOT_SEED,\n  TRADER_POSITION_ACCOUNT_SEED,\n  TRADER_ENTRY_ACCOUNT_SEED,\n  NETWORK_FEE_PAYER_SEED,\n  TRADER_SEQUENCE_SEED,\n  STORE_SEED,\n} from '../constants';\nimport { findProgramAddress } from '../utils/utils';\n\nexport const findNetworkPubkey = async (\n  programId: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [Buffer.from(NETWORK_SEED), new Uint8Array(programId.toBuffer())],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketPubkey = async (\n  programId: PublicKey,\n  underlyingProductOraclePubkey: PublicKey,\n  underlyingPriceOraclePubkey: PublicKey,\n  protocolFeeCollectorPubkey: PublicKey,\n  settlementFeeCollectorPubkey: PublicKey,\n  duration: number,\n  contractSize: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(MARKET_SEED),\n      underlyingProductOraclePubkey.toBuffer(),\n      underlyingPriceOraclePubkey.toBuffer(),\n      protocolFeeCollectorPubkey.toBuffer(),\n      settlementFeeCollectorPubkey.toBuffer(),\n      new BN(duration).toBuffer(),\n      new BN(contractSize).toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findParimutuelPubkey = async (\n  programId: PublicKey,\n  marketPubKey: PublicKey,\n  marketOpen: number,\n  timeWindowStart: number,\n  marketClose: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(PARIMUTUEL_SEED),\n      marketPubKey.toBuffer(),\n      new Uint8Array(new BN(marketOpen).toArray('le', 8)),\n      new Uint8Array(new BN(marketClose).toArray('le', 8)),\n      new Uint8Array(new BN(timeWindowStart).toArray('le', 8)),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkProtocolFeeCollectorPubkey = async (\n  networkWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      networkWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      protocolMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkSettlementFeeCollectorPubkey = async (\n  networkWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      networkWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      settlementMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketProtocolFeeCollectorPubkey = async (\n  marketWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      marketWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      protocolMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketSettlementFeeCollectorPubkey = async (\n  marketWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      marketWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      settlementMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findAssociatedTokenAccountPubkey = async (\n  userWalletPubkey: PublicKey,\n  mintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      userWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      mintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkTraderAccountPubkey = async (\n  programId: PublicKey,\n  userWalletPubkey: PublicKey,\n  networkPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(NETWORK_TRADER_ACCOUNT_SEED),\n      networkPubkey.toBuffer(),\n      userWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketTraderAccountPubkey = async (\n  programId: PublicKey,\n  userWalletPubkey: PublicKey,\n  marketPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(MARKET_TRADER_ACCOUNT_SEED),\n      marketPubkey.toBuffer(),\n      userWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findHoneypotPubkey = async (\n  programId: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [Buffer.from(HONEYPOT_SEED), parimutuelPubkey.toBuffer()],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findTraderPositionAccountPubkey = async (\n  programId: PublicKey,\n  userWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(TRADER_POSITION_ACCOUNT_SEED),\n      parimutuelPubkey.toBuffer(),\n      userWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findEntryAccountPubkey = async (\n  programId: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  sequenceNumber: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(TRADER_ENTRY_ACCOUNT_SEED),\n      traderPositionAccountPubkey.toBuffer(),\n      new Uint8Array(new BN(sequenceNumber).toArray('le', 8)),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkTraderFeePayerPubkey = async (\n  programId: PublicKey,\n  networkTraderAccountPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(NETWORK_FEE_PAYER_SEED),\n      networkTraderAccountPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findTraderSequenceNumberPubkey = async (\n  programId: PublicKey,\n  parimutuelPubkey: PublicKey,\n  sequenceNumber: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(TRADER_SEQUENCE_SEED),\n      parimutuelPubkey.toBuffer(),\n      new Uint8Array(new BN(sequenceNumber).toArray('le', 8)),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findStorePubkey = async (\n  programId: PublicKey,\n  marketPubkey: PublicKey,\n  storeWalletPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(STORE_SEED),\n      marketPubkey.toBuffer(),\n      storeWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport _chunk from 'lodash/chunk';\n\nimport { Accounts } from '../types';\nimport { GET_MULTIPLE_ACCOUNTS_LIMIT } from '../constants';\n\nconst getMultipleAccountsCore = async (\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<Accounts> => {\n  const args = [pubkeys.map((key) => key.toBase58()), { commitment: 'recent' }];\n  // @ts-ignore\n  const res = await connection._rpcRequest('getMultipleAccounts', args);\n  if (res.error) {\n    throw new Error(\n      'failed to get info about accounts ' +\n        pubkeys.map((key) => key.toBase58()).join(', ') +\n        ': ' +\n        res.error.message\n    );\n  }\n  if (!res.result) return [];\n\n  const accounts: Array<null | AccountInfo<Buffer>> = res.result.value.map(\n    // eslint-disable-next-line\n    (account: AccountInfo<any>) => {\n      if (!account) return null;\n\n      const { executable, owner, lamports, data } = account;\n\n      return {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n  );\n\n  return accounts.map((account, idx) => {\n    if (account === null) {\n      return null;\n    }\n    return {\n      pubkey: pubkeys[idx],\n      account,\n    };\n  });\n};\n\nexport const getMultipleAccounts = async (\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<Accounts> => {\n  if (pubkeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {\n    const result = await getMultipleAccountsCore(connection, pubkeys);\n    return result;\n  } else {\n    const batches = _chunk(pubkeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n    const results = await Promise.all<Accounts>(\n      batches.map((batch) => getMultipleAccountsCore(connection, batch))\n    );\n    return results.flat();\n  }\n};\n","import moment from 'moment';\nimport { ParimutuelTime } from '../types';\n\nexport const getHistoricalTimes = (\n  marketPubkey: string,\n  duration: number,\n  number: number\n): ParimutuelTime[] => {\n  const currentTime = new Date().getTime();\n  const elapsed = currentTime % duration;\n  const startTime = currentTime - elapsed;\n\n  const times: ParimutuelTime[] = Array.from(Array(number).keys()).map(\n    (num) => {\n      return { marketPubkey, startTime: startTime - num * duration, duration };\n    }\n  );\n\n  return times.reverse();\n};\n\nexport const getUpcomingTimes = (\n  marketPubkey: string,\n  duration: number,\n  number: number\n): ParimutuelTime[] => {\n  const currentTime = new Date().getTime();\n  const elapsed = currentTime % duration;\n  const startTime = currentTime - elapsed;\n\n  const times: ParimutuelTime[] = Array.from(Array(number).keys()).map(\n    (num) => {\n      return { marketPubkey, startTime: startTime + num * duration, duration };\n    }\n  );\n\n  return times.reverse();\n};\n\nexport const formatDuration = (duration: number): string => {\n  const hours = Math.floor(duration / (60 * 60));\n  const minutes = Math.floor((duration / 60) % 60);\n  const seconds = Math.floor(duration % 60);\n\n  if (hours === 24) return '1 day';\n  if (hours === 1) return '1 hour';\n  if (minutes === 15) return '15 min';\n  if (minutes === 5) return '5 min';\n  if (seconds === 60) return '1 min';\n  return '1 MIN';\n};\n\nexport const formatTime = (unixTime: number): string =>\n  moment.unix(unixTime / 1000).format('MM/DD/YYYY hh:mm:ss');\n\nexport const formatDate = (unixTime: number): string =>\n  moment.unix(unixTime / 1000).format('MM/DD/YYYY');\n\nexport const formatHour = (unixTime: number): string =>\n  moment.unix(unixTime / 1000).format('hh:mm:ss');\n","import {\n  schema,\n  FixedFees,\n  LinearFees,\n  Network,\n  Store,\n  Market,\n  Parimutuel,\n  TraderAccount,\n  TraderSequenceNumber,\n  TraderPositionAccount,\n  TraderEntryAccount,\n} from '../borsh';\nimport { PublicKey } from '@solana/web3.js';\nimport {\n  AccountLayout,\n  AccountInfo,\n  MintInfo,\n  MintLayout,\n  u64,\n} from '@solana/spl-token';\nimport { deserializeUnchecked } from 'borsh';\n\nimport { extendBorsh } from './borsh'; // need to extend borsh custom reader and writer\n\nextendBorsh();\n\nexport const decodeAccount = (data: Buffer): AccountInfo => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\nexport const decodeMint = (data: Buffer): MintInfo => {\n  if (data.length !== MintLayout.span) {\n    throw new Error('Not a valid Mint');\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo;\n};\n\nexport const decodeFixedFees = (buffer: Buffer): FixedFees =>\n  deserializeUnchecked(schema, FixedFees, buffer);\n\nexport const decodeLinearFees = (buffer: Buffer): LinearFees =>\n  deserializeUnchecked(schema, LinearFees, buffer);\n\nexport const decodeNetwork = (buffer: Buffer): Network => {\n  return deserializeUnchecked(schema, Network, buffer);\n};\n\nexport const decodeStore = (buffer: Buffer): Store => {\n  return deserializeUnchecked(schema, Store, buffer);\n};\n\nexport const decodeMarket = (buffer: Buffer): Market => {\n  return deserializeUnchecked(schema, Market, buffer);\n};\n\nexport const decodeParimutuel = (buffer: Buffer): Parimutuel => {\n  return deserializeUnchecked(schema, Parimutuel, buffer);\n};\n\nexport const decodeTraderAccount = (buffer: Buffer): TraderAccount => {\n  return deserializeUnchecked(schema, TraderAccount, buffer);\n};\n\nexport const decodeTraderSequenceNumber = (\n  buffer: Buffer\n): TraderSequenceNumber => {\n  return deserializeUnchecked(schema, TraderSequenceNumber, buffer);\n};\n\nexport const decodeTraderPositionAccount = (\n  buffer: Buffer\n): TraderPositionAccount => {\n  return deserializeUnchecked(schema, TraderPositionAccount, buffer);\n};\n\nexport const decodeTraderEntryAccount = (\n  buffer: Buffer\n): TraderEntryAccount => {\n  return deserializeUnchecked(schema, TraderEntryAccount, buffer);\n};\n","/* eslint-disable no-console */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n  RpcResponseAndContext,\n} from '@solana/web3.js';\nimport { WalletSigner } from '../types';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport type TransactionState = {\n  transactionId: string;\n  slot: number;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport const getUnixTs = (): number => {\n  return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst simulateTransaction = async (\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> => {\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash()\n  ).blockhash;\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment }; // eslint-disable-line\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n};\n\nconst awaitTransactionSignatureConfirmation = async (\n  transactionId: TransactionSignature,\n  timeout: number,\n  connection: Connection\n): Promise<SignatureStatus | null | void> => {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n\n  // eslint-disable-next-line\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Timed out for txid', transactionId);\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        transactionId,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        'recent'\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', transactionId, e);\n    }\n\n    while (!done) {\n      // eslint-disable-next-line\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            transactionId,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          console.log(\n            `https://explorer.solana.com/tx/${transactionId}?cluster=devnet`\n          );\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', transactionId, status);\n            } else if (status.err) {\n              console.log('REST error for', transactionId, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', transactionId, status);\n            } else {\n              console.log('REST confirmation for', transactionId, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (err) {\n          if (!done) {\n            console.log(\n              'REST connection error: transactionId',\n              transactionId,\n              err\n            );\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions?.[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nexport const sendSignedTransaction = async ({\n  connection,\n  signedTransaction,\n  retry = true,\n  timeout = DEFAULT_TIMEOUT,\n  confirmation = true,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  retry?: boolean;\n  timeout?: number;\n  confirmation?: boolean;\n}): Promise<TransactionState> => {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const transactionId = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true,\n  });\n\n  let done = false;\n\n  if (retry) {\n    (async () => {\n      while (!done && getUnixTs() - startTime < timeout) {\n        connection\n          .sendRawTransaction(rawTransaction, {\n            skipPreflight: true,\n          })\n          .catch((error) => console.error(error));\n        await sleep(500);\n      }\n    })();\n  } else {\n    connection\n      .sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      })\n      .catch((error) => console.error(error));\n  }\n\n  if (confirmation) {\n    try {\n      console.log('Started awaiting confirmation for', transactionId);\n\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        transactionId,\n        timeout,\n        connection\n      );\n\n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n\n      if (confirmation.err) {\n        console.error(confirmation.err);\n        throw new Error('Transaction failed: Custom instruction error');\n      }\n\n      slot = confirmation?.slot || 0;\n    } catch (err) {\n      console.error('Timeout Error caught', err);\n      // eslint-disable-next-line\n      if ((err as any).timeout) {\n        throw new Error('Timed out awaiting confirmation on transaction');\n      }\n\n      let simulateResult: SimulatedTransactionResponse | null = null;\n      try {\n        simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n        ).value;\n      } catch (err) {\n        console.error('simulate error', err);\n      }\n\n      if (simulateResult && simulateResult.err) {\n        if (simulateResult.logs) {\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n            const line = simulateResult.logs[i];\n            if (line.startsWith('Program log: ')) {\n              throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length)\n              );\n            }\n          }\n        }\n        throw new Error(JSON.stringify(simulateResult.err));\n      }\n      throw new Error('Transaction failed');\n    } finally {\n      done = true;\n    }\n\n    console.log('Latency', transactionId, getUnixTs() - startTime);\n  }\n\n  return { transactionId, slot };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  userWallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  retry: boolean = true,\n  confirmation: boolean = true,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n): Promise<TransactionState | undefined> => {\n  if (!userWallet.publicKey) throw new Error('wallet is not connected');\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      userWallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  if (!includesFeePayer) {\n    transaction = await userWallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  try {\n    const { transactionId, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n      retry,\n      confirmation,\n    });\n\n    return { transactionId, slot };\n  } catch (error) {\n    console.error(error);\n    return undefined;\n  }\n};\n","import { PublicKey } from '@solana/web3.js';\n\nimport { MarketPairEnum } from '../types/enum';\n\nexport enum ConfigEnum {\n  DEV = 'dev',\n  STAGING = 'staging',\n  CUSTOM = 'custom',\n}\n\nexport type MarketConfig = {\n  [key: string]: PublicKey; // ex: MARKET_60S: PublicKey;\n};\n\nexport type OracleConfig = {\n  HXRO_USD_ORACLE: PublicKey;\n  HXRO_PRICE_ORACLE: PublicKey;\n  SOL_USD_ORACLE: PublicKey;\n  SOL_PRICE_ORACLE: PublicKey;\n  BTC_USD_ORACLE: PublicKey;\n  BTC_PRICE_ORACLE: PublicKey;\n  ETH_USD_ORACLE: PublicKey;\n  ETH_PRICE_ORACLE: PublicKey;\n};\n\nexport type ParimutuelConfig = {\n  SOLANA_CLUSTER_URL?: string;\n  PARIMUTUEL_PROGRAM_ID: PublicKey;\n  NETWORK: PublicKey;\n  NETWORK_PROTOCOL_FEE_COLLECTOR?: PublicKey;\n  MARKET_PROTOCOL_FEE_COLLECTOR?: PublicKey;\n  HXRO_MINT: PublicKey;\n  USDC_MINT: PublicKey;\n  BONK_MINT: PublicKey;\n  oracles: OracleConfig;\n  markets: {\n    [MarketPairEnum.SOLUSD]: MarketConfig;\n    [MarketPairEnum.BTCUSD]: MarketConfig;\n    [MarketPairEnum.ETHUSD]: MarketConfig;\n  };\n};\n\nexport const DEV_CONFIG: ParimutuelConfig = {\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n      '3kjK4HA6A4K86NgNB93gGhSt257wtN4QAqXMNPQ4fVTm'\n  ),\n  NETWORK: new PublicKey('2xJcpMZvegKZ6GCYzUp74DfEFtPss66XNzV932xgSgNW'),\n  NETWORK_PROTOCOL_FEE_COLLECTOR: new PublicKey(\n      '3QxkXnrh7EHYwQp7s6x7t5nJidyGVC7mVNFwGpy6FV5F'\n  ),\n  MARKET_PROTOCOL_FEE_COLLECTOR: new PublicKey(\n      'Fcbzf2591V4rWw83yLUjkA646F2twxzLeZinbbSMYece'\n  ),\n  HXRO_MINT: new PublicKey('265iYi4pVmorRzrq3X7Eudy6uCKMeDxXiTDkh92vARTE'),\n  USDC_MINT: new PublicKey('DXSVQJqJbNTTcGqCkfHnQYXwG5GhZsfg2Ka9tNkK3ohr'),\n  BONK_MINT: new PublicKey('bonkKjzREa7pVBRD6nFPAKRaHhS7XpDhhgZCZdGNkuU'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n        '6C4PJ4bMuLFmvHRqSkmGeyoSGAKMfPG1um1k1suryfs'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n        '6VrSw4Vxg5zs9shfdCxLqfUy2qSD3NCS9AsdBQUgbjnt'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n        '3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n        'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n        '3m1y5h2uv7EQL3KaJZehvAJa4yDNvgc5yAdL9KPMKwvk'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n        'HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n        '2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n        'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'\n    ),\n  },\n  markets: {\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('FBaFPMJZ9UPHwrbCYLytuSpA15u3pY9cKjJQ4z5Ag59q'),\n      MARKET_300S: new PublicKey(\n          'AySG6K4cNHvy3YpHFb1JcmmEhBfLfCzYgNXqpdfgbQoE'\n      ),\n      MARKET_900S: new PublicKey(\n          'HzLNwHEMH3aAY9F8gRAdJEfe2J3opdxr1mDPt8AuLEkh'\n      ),\n      MARKET_3600S: new PublicKey(\n          'BqJAZHr56t14QABZLygZYWe7WozVSVPLQb6yDSj9f8U1'\n      ),\n      MARKET_86400S: new PublicKey(\n          '2MMLwY7VaDTS3ZSd1ZkmzCQxrJWjxmWgEXLPEA3nm9Pz'\n      ),\n    },\n    [MarketPairEnum.BTCUSD]: {\n      MARKET_60S: new PublicKey('2J8yR9G1yXebijHYuRFe4iWQfKxYt8LLGN2mfxKCLWWM'),\n      MARKET_300S: new PublicKey(\n          '8WiZ4VTsq8fG92osksPbrc5E3raeL839D83Q8pxuXH8m'\n      ),\n      MARKET_900S: new PublicKey(\n          '79omw4hStqWfPnQXPinEF2yDFFakjvXanwMZZ7YYFL94'\n      ),\n      MARKET_3600S: new PublicKey(\n          '7hbU86BtQUkZUw8jJpqgaRgp1Wyxgp2LSTyY1oSoznvP'\n      ),\n      MARKET_86400S: new PublicKey(\n          'HjdzuJ5LhiLJLKaR4sCCHj3FwmkWEHNXpGVEPUTPFRtx'\n      ),\n    },\n    [MarketPairEnum.ETHUSD]: {\n      MARKET_60S: new PublicKey('CX9JDCAut5ShXYdQFAX9oSo93wmi86Xkb7SgagsgkXmM'),\n      MARKET_300S: new PublicKey(\n          'F35oVkVWKSYHqaw66U1PHgZtmPeJMcTArEPvX3PCukTH'\n      ),\n      MARKET_900S: new PublicKey(\n          'BRDqHv4enme3piwh228yyVk1sBuxa8Q7mgwq7SYwsPfA'\n      ),\n      MARKET_3600S: new PublicKey(\n          '7MDcHRxHhTdDmhCMRVC9hgb29CFMbTTG5jT3thpqqqJK'\n      ),\n      MARKET_86400S: new PublicKey(\n          '8kw8BAWcgm78PMmHsKoXUGKZXnUPZUaXCw8SdrRAjJ3E'\n      ),\n    },\n  },\n};\n\nexport const DEV_BONK_CONFIG: ParimutuelConfig = {\n  MARKET_PROTOCOL_FEE_COLLECTOR: undefined, NETWORK_PROTOCOL_FEE_COLLECTOR: undefined, SOLANA_CLUSTER_URL: \"https://api.devnet.solana.com\",\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n      '3kjK4HA6A4K86NgNB93gGhSt257wtN4QAqXMNPQ4fVTm'\n  ),\n  NETWORK: new PublicKey('5QW1YiTeLWft63Y4LCXfKCzQUDApzpJWeQh6gqXT8Mf1'),\n  HXRO_MINT: new PublicKey('265iYi4pVmorRzrq3X7Eudy6uCKMeDxXiTDkh92vARTE'),\n  USDC_MINT: new PublicKey('DXSVQJqJbNTTcGqCkfHnQYXwG5GhZsfg2Ka9tNkK3ohr'),\n  BONK_MINT: new PublicKey('bonkKjzREa7pVBRD6nFPAKRaHhS7XpDhhgZCZdGNkuU'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n        '6C4PJ4bMuLFmvHRqSkmGeyoSGAKMfPG1um1k1suryfs'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n        '6VrSw4Vxg5zs9shfdCxLqfUy2qSD3NCS9AsdBQUgbjnt'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n        '3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n        'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n        '3m1y5h2uv7EQL3KaJZehvAJa4yDNvgc5yAdL9KPMKwvk'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n        'HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n        '2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n        'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'\n    ),\n  },\n  markets:{\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('DeQFZzcWkEUeYju6GoizSbZotynYdB4XfkNgf21LtZjs'),\n    },\n    [MarketPairEnum.BTCUSD]: {\n      MARKET_60S: new PublicKey('BswfdHHVnYRMQmDMYNcMF89tWfnQcCwtraCNDgnv8sVE'),\n    },\n    [MarketPairEnum.ETHUSD]: {}\n  }\n};\n\nexport const STAGING_BONK_CONFIG: ParimutuelConfig = {\n  MARKET_PROTOCOL_FEE_COLLECTOR: undefined, NETWORK_PROTOCOL_FEE_COLLECTOR: undefined, SOLANA_CLUSTER_URL: \"https://api.mainnet-beta.solana.com\",\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n    'GUhB2ohrfqWspztgCrQpAmeVFBWmnWYhPcZuwY52WWRe'\n  ),\n  NETWORK: new PublicKey('AARaFgaGwAoZAGqwf8Kn5aqxpZvuDotMMH6HgckJpCC7'),\n  HXRO_MINT: new PublicKey('HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK'),\n  USDC_MINT: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'),\n  BONK_MINT: new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n      'BJqTdFytBhGWpq183a5EPo123cB6gitTAmSSsCta3RGG'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n      'B47CC1ULLw1jKTSsr1N1198zrUHp3LPduzepJyzgLn2g'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n      'ALP8SdU9oARYVLgLR7LrqMNCYBnhtnQz1cj6bwgwQmgj'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n      'H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n      '4aDoSXJ5o3AuvL7QFeR6h44jALQfTmUUCTVGDD6aoJTM'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n      'GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n      'EMkxjGC1CQ7JLiutDbfYb7UKb3zm9SJcUmr1YicBsdpZ'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n      'JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'\n    ),\n  },\n  markets:{\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('6BWYu93T3ZiRntvYfRhqpkJJb7VNGt8yUcKPVSFCiYCa'),\n    },\n    [MarketPairEnum.BTCUSD]: {\n    },\n    [MarketPairEnum.ETHUSD]: {}\n  }\n};\n\nexport const STAGING_CONFIG = {\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n    'GUhB2ohrfqWspztgCrQpAmeVFBWmnWYhPcZuwY52WWRe'\n  ),\n  NETWORK: new PublicKey('FoCmS48FRyJrx6bozDijaARYAThdUeUGu4rbGKqBegcH'),\n  HXRO_MINT: new PublicKey('HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK'),\n  USDC_MINT: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'),\n  BONK_MINT: new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n      'BJqTdFytBhGWpq183a5EPo123cB6gitTAmSSsCta3RGG'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n      'B47CC1ULLw1jKTSsr1N1198zrUHp3LPduzepJyzgLn2g'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n      'ALP8SdU9oARYVLgLR7LrqMNCYBnhtnQz1cj6bwgwQmgj'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n      'H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n      '4aDoSXJ5o3AuvL7QFeR6h44jALQfTmUUCTVGDD6aoJTM'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n      'GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n      'EMkxjGC1CQ7JLiutDbfYb7UKb3zm9SJcUmr1YicBsdpZ'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n      'JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'\n    ),\n  },\n  markets: {\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('FN46bryerznhVr6hJUJt6aYCW8wVCDPdQhTNFVvgr8JJ'),\n      MARKET_300S: new PublicKey(\n        '5m89C7XsQRtuFFARMmKucnYdaNEf9mYXbLxJVGcdyJTU'\n        ),\n      MARKET_900S: new PublicKey(\n        'FnD3PLAbbsJYRufYR9qp8BGgcKmEbSBiC1zkvmj51i3J'\n      ),\n      MARKET_3600S: new PublicKey(\n        'GemLV88r4QsUiVAmc34pwFfaNjaw5BMBmhjqtHVByNra'\n      ),\n      MARKET_86400S: new PublicKey(\n        'GNV2wry1pFCpJeGrhM2e3app99VXTP7rpXUwQGrL1hHi'\n      ),\n    },\n    [MarketPairEnum.BTCUSD]: {\n      MARKET_60S: new PublicKey('9bqu5kYo3RUBY1kxSQjwpKPYrFzsFxEK7tHrxwLs3XWH'),\n      MARKET_300S: new PublicKey(\n        '3bH2HWjWNLgGWXbhHhK73fJEDeRQ7spj3fkyRyom6vpx'\n        ),\n      MARKET_900S: new PublicKey(\n        'CsXwpYNwkfrbMdoGWrj97yhuseLRuofy7fxj3Beesxv9'\n      ),\n      MARKET_3600S: new PublicKey(\n        '7c5PqmbTGsrWxCHXAfi9Rt2tTvG1oAdCK13FS8TKEpZ7'\n        ),\n      MARKET_86400S: new PublicKey(\n        'DpMZ7BGRYLF6xi6uD7ecaEjMv5aKx8gShzjhU4pscuqY'\n        ),\n      },\n    [MarketPairEnum.ETHUSD]: {\n      MARKET_60S: new PublicKey('EfFQtUkjv1ehWg9XrskkUL89sJ8ts4vGHavbo8TkQusL'),\n      MARKET_300S: new PublicKey(\n        '3DzpjP5cPP32Jkacu7MbEHNZYpiFpPozWQcJJaLgUXRH'\n      ),\n      MARKET_900S: new PublicKey(\n        '9xvKy77EQMeDw7z4ikNgXeRc2vWJgdbaLKBMSmEZbjXi'\n      ),\n      MARKET_3600S: new PublicKey(\n        '6fvFpHoXCxsafVuvNaH7Kdzbk66xmYhCyiTz4H1T89Qy'\n      ),\n      MARKET_86400S: new PublicKey(\n        'CYBcN2nM7oCH1BTt87GA4eP2vqLw2rTR1osgtAy7xyAg'\n      ),\n    },\n  },\n};\n\n// To correct the name of the config, it has same value with DEV_CONFIG for time being\nexport const DEVNET_CONFIG: ParimutuelConfig = DEV_CONFIG;\n\n// To correct the name of the config, it has same value with STAGING_CONFIG for time being\nexport const MAINNET_CONFIG = STAGING_CONFIG;\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { AttachCookieArgs } from '../borsh';\nimport { createAttachCookieInstruction } from '../instructions';\nimport {\n  decodeParimutuel,\n  findTraderPositionAccountPubkey,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendAttachCookieTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  storePubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { \n    PARIMUTUEL_PROGRAM_ID,\n    NETWORK \n  } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const attachCookieInstruction = await createAttachCookieInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new AttachCookieArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    parimutuelPubkey,\n    storePubkey,\n    traderPositionAccountPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [attachCookieInstruction],\n    signers,\n    'single',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to attach cookie');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { ParimutuelArgs } from '../borsh';\nimport { WalletSigner } from '../types';\nimport { createParimutuelInstruction } from '../instructions';\nimport {\n  findParimutuelPubkey,\n  findHoneypotPubkey,\n  decodeNetwork,\n  decodeMarket,\n  sendTransaction,\n} from '../utils';\n\n/**\n * create parimutuel transaction\n * @param userWallet user wallet\n * @param marketPubkey market pubkey where parimutuel will be created\n * @param marketOpen parimutuel creation time\n * @param timeWindowStart parimutuel start time\n * @param marketClose parimutuel end time\n * @returns transaction id\n */\nexport async function sendCreateParimutuelTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  marketPubkey: PublicKey,\n  marketOpen: number,\n  timeWindowStart: number,\n  marketClose: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelSettings = new ParimutuelArgs({\n    marketOpen: marketOpen,\n    marketClose: marketClose,\n    timeWindowStart: timeWindowStart,\n  });\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n\n  if (!networkAccount || !marketAccount) {\n    throw new Error('no network or market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const parimutuelPubkey = await findParimutuelPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    marketPubkey,\n    marketOpen,\n    timeWindowStart,\n    marketClose\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const createInstruction = await createParimutuelInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelSettings,\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementMintPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [createInstruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error(\n      `failed to create parimutuel: ${parimutuelPubkey.toBase58()}`\n    );\n  } else {\n    return response.transactionId;\n  }\n}\n","import { TransactionInstruction, Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { StoreArgs, FixedFees, Version } from '../borsh';\nimport {\n  createStoreInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport {\n  findStorePubkey,\n  findAssociatedTokenAccountPubkey,\n  sendTransaction,\n  decodeNetwork,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateStoreTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  storeWalletPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  protocolFeeBps: number,\n  settlementFeeBps: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const settings = new StoreArgs({\n    fees: new FixedFees({\n      version: Version.FixedFeesV1,\n      protocolFeeBps,\n      settlementFeeBps,\n    }),\n  });\n\n  const networkPubkey = NETWORK;\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const storePubkey = await findStorePubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    marketPubkey,\n    storeWalletPubkey\n  );\n\n  const storeProtocolFeeCollectorPubkey =\n    await findAssociatedTokenAccountPubkey(\n      storeWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const storeSettlementFeeCollectorPubkey =\n    await findAssociatedTokenAccountPubkey(\n      storeWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const [protocolFeeCollectorAccount, settlementFeeCollectorAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      storeProtocolFeeCollectorPubkey,\n      storeSettlementFeeCollectorPubkey,\n    ]);\n\n  if (!protocolFeeCollectorAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      storeProtocolFeeCollectorPubkey,\n      storeWalletPubkey,\n      storeWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementFeeCollectorAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      storeSettlementFeeCollectorPubkey,\n      storeWalletPubkey,\n      storeWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const storeInstruction = await createStoreInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    settings,\n    networkPubkey,\n    marketPubkey,\n    storeWalletPubkey,\n    userWalletPubkey,\n    storePubkey,\n    storeProtocolFeeCollectorPubkey,\n    storeSettlementFeeCollectorPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [...instructions, storeInstruction],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create store');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { UpdatePriceArgs } from '../borsh';\nimport {\n  createUpdatePriceInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport { WalletSigner } from '../types';\nimport {\n  findNetworkSettlementFeeCollectorPubkey,\n  findHoneypotPubkey,\n  decodeParimutuel,\n  decodeNetwork,\n  decodeMarket,\n  sendTransaction,\n} from '../utils';\n\nexport async function sendUpdatePriceTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n  const networkWalletPubkey = new PublicKey(decodedNetworkAccount.authority);\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const networkSettlementFeeCollectorPubkey =\n    await findNetworkSettlementFeeCollectorPubkey(\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const networkSettlementFeeCollector = await this.connection.getAccountInfo(\n    networkSettlementFeeCollectorPubkey\n  );\n  if (!networkSettlementFeeCollector) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      networkSettlementFeeCollectorPubkey,\n      networkWalletPubkey,\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const updatePriceInstruction = await createUpdatePriceInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePriceArgs(),\n    networkPubkey,\n    marketPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    settlementMintPubkey,\n    networkSettlementFeeCollectorPubkey,\n    honeypotPubkey,\n    parimutuelPubkey,\n    new PublicKey(decodedParimutuelAccount.creator)\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [...instructions, updatePriceInstruction],\n    signers,\n    'single',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to update price');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { TransactionInstruction, Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  NetworkTraderFeePayerArgs,\n  TraderAccountsArgs,\n  TraderPositionAccountArgs,\n  UpdatePositionArgs,\n} from '../borsh';\nimport {\n  createNetworkTraderFeePayerInstruction,\n  createTraderAccountInstruction,\n  createPlacePositionInstruction,\n  createTraderPositionAccountInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport { PositionSideEnum, WalletSigner } from '../types';\nimport {\n  findAssociatedTokenAccountPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  findTraderPositionAccountPubkey,\n  findEntryAccountPubkey,\n  findHoneypotPubkey,\n  decodeNetwork,\n  decodeParimutuel,\n  sendTransaction,\n} from '../utils';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function sendPlacePositionTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey,\n  size: number,\n  side: PositionSideEnum,\n  seq: number,\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, parimutuelAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      parimutuelPubkey,\n    ]);\n\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    seq\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const updatePositionInstruction = await createPlacePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePositionArgs({ size, side, seq }),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [\n      ...instructions,\n      traderAccountInstruction,\n      feePayerInstruction,\n      traderPositionAccountInstruction,\n      updatePositionInstruction,\n    ],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to update position');\n  } else {\n    return response.transactionId;\n  }\n}\n\nconst OPERATOR_FEE: number = 2.0;\nexport async function sendPlacePositionWithOperatorTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey,\n  size: number,\n  side: PositionSideEnum,\n  seq: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n  const tradeSize = size - (size * (OPERATOR_FEE / 100))\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, parimutuelAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      parimutuelPubkey,\n    ]);\n\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    seq\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const updatePositionInstruction = await createPlacePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePositionArgs({ size: tradeSize, side: side, seq: seq }),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const sourceAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    settlementMintPubkey,\n    userWalletPubkey\n  );\n\n  let mATA;\n  if (settlementMintPubkey.toString() == this.config.BONK_MINT.toString()) {\n    mATA = new PublicKey('6p7aQTngHmPy3srAM1ZuC5BKoYz94TpQJqcYH941Z72B');\n  } else if (settlementMintPubkey.toString() == this.config.USDC_MINT.toString()) {\n    mATA = new PublicKey('8Ti1Wg3X6Bx4fuLwLcDwwsrmU3ghPBQwoRmqv8Gao73Q');\n  } else {\n    throw new Error('Settlement mint token not implemented');\n  }\n\n  const sendFeeToOperatorInstruction = Token.createTransferInstruction(\n    TOKEN_PROGRAM_ID,\n    sourceAccount,\n    mATA,\n    userWalletPubkey,\n    [],\n    ((OPERATOR_FEE / 100) * size),\n  )\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [\n      ...instructions,\n      sendFeeToOperatorInstruction,\n      traderAccountInstruction,\n      feePayerInstruction,\n      traderPositionAccountInstruction,\n      updatePositionInstruction,\n    ],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to update position');\n  } else {\n    return response.transactionId;\n  }\n}\n\nexport async function getPlacePositionInstruction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey,\n  size: number,\n  side: PositionSideEnum,\n  seq: number,\n): Promise<TransactionInstruction[]> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, parimutuelAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      parimutuelPubkey,\n    ]);\n\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    seq\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const updatePositionInstruction = await createPlacePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePositionArgs({ size, side, seq }),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const PlacePositionInstructionArr: TransactionInstruction[] = [\n    ...instructions,\n    traderAccountInstruction,\n    feePayerInstruction,\n    traderPositionAccountInstruction,\n    updatePositionInstruction,\n  ]\n\n  return PlacePositionInstructionArr\n}\n\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { SettlePositionArgs } from '../borsh';\nimport { createSettlePositionInstruction } from '../instructions';\nimport {\n  findNetworkProtocolFeeCollectorPubkey,\n  findNetworkSettlementFeeCollectorPubkey,\n  findMarketProtocolFeeCollectorPubkey,\n  findMarketSettlementFeeCollectorPubkey,\n  findAssociatedTokenAccountPubkey,\n  findHoneypotPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeNetwork,\n  decodeParimutuel,\n  decodeMarket,\n  findTraderPositionAccountPubkey,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendSettlePositionTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  traderWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const {\n    NETWORK,\n    PARIMUTUEL_PROGRAM_ID,\n    NETWORK_PROTOCOL_FEE_COLLECTOR,\n    MARKET_PROTOCOL_FEE_COLLECTOR,\n  } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const parimutuelCreatorPubkey = new PublicKey(decodedParimutuelAccount.creator);\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n  const networkWalletPubkey = new PublicKey(decodedNetworkAccount.authority);\n\n  const networkProtocolFeeCollectorPubkey =\n    await findNetworkProtocolFeeCollectorPubkey(\n      networkWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const networkSettlementFeeCollectorPubkey =\n    await findNetworkSettlementFeeCollectorPubkey(\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const marketWalletPubkey = new PublicKey(decodeMarketAccount.authority);\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const marketProtocolFeeCollectorPubkey =\n    await findMarketProtocolFeeCollectorPubkey(\n      marketWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const marketSettlementFeeCollectorPubkey =\n    await findMarketSettlementFeeCollectorPubkey(\n      marketWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    traderWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    traderWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const [\n    networkProtocolFeeCollectorAccount,\n    networkSettlementFeeCollectorAccount,\n    marketProtocolFeeCollectorAccount,\n    marketSettlementFeeCollectorAccount,\n    protocolTokenAccount,\n    settlementTokenAccount,\n    positionAccount,\n  ] = await this.connection.getMultipleAccountsInfo([\n    NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n    networkSettlementFeeCollectorPubkey,\n    MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n    marketSettlementFeeCollectorPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n  ]);\n\n  if (!networkProtocolFeeCollectorAccount) {\n    throw new Error('no network protocol account');\n  }\n\n  if (!networkSettlementFeeCollectorAccount) {\n    throw new Error('no network settlement account');\n  }\n\n  if (!marketProtocolFeeCollectorAccount) {\n    throw new Error('no market protocol account');\n  }\n\n  if (!marketSettlementFeeCollectorAccount) {\n    throw new Error('no market settlement account');\n  }\n\n  if (!protocolTokenAccount) {\n    throw new Error('no protocol token account');\n  }\n\n  if (!settlementTokenAccount) {\n    throw new Error('no settlement token account');\n  }\n\n  if (!positionAccount) {\n    throw new Error('no position account');\n  }\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const instruction = await createSettlePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new SettlePositionArgs(),\n    networkPubkey,\n    marketPubkey,\n    traderWalletPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    protocolMintPubkey,\n    settlementMintPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderFeePayerPubkey,\n    networkTraderAccountPubkey,\n    NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n    networkSettlementFeeCollectorPubkey,\n    MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n    marketSettlementFeeCollectorPubkey,\n    marketTraderAccountPubkey,\n    traderPositionAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey,\n    parimutuelCreatorPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to settle position');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { WithdrawFeeArgs } from '../borsh';\nimport { createWithdrawFeeInstruction } from '../instructions';\nimport {\n  findNetworkTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  findAssociatedTokenAccountPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendWithdrawFeeTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  amount: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const withdrawInstruction = await createWithdrawFeeInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new WithdrawFeeArgs({ amount }),\n    networkPubkey,\n    userWallet.publicKey,\n    protocolMintPubkey,\n    protocolTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [withdrawInstruction],\n    signers,\n    'single',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to withdraw fee');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { NetworkTraderFeePayerArgs, TraderAccountsArgs } from '../borsh';\nimport {\n  createTraderAccountInstruction,\n  createNetworkTraderFeePayerInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport {\n  findAssociatedTokenAccountPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDepositFeeTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  marketPubkey: PublicKey,\n  mintPubkey: PublicKey,\n  amount: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const tradeAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const walletTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    mintPubkey\n  );\n  const walletTokenAccount = await this.connection.getAccountInfo(\n    walletTokenAccountPubkey\n  );\n\n  let walletAccountInstruction: TransactionInstruction | undefined = undefined;\n  if (!walletTokenAccount) {\n    walletAccountInstruction = createAssociatedTokenAccountInstruction(\n      walletTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      mintPubkey\n    );\n    instructions.push(walletAccountInstruction);\n  }\n\n  const depositInstruction = Token.createTransferInstruction(\n    TOKEN_PROGRAM_ID,\n    walletTokenAccountPubkey,\n    networkTraderFeePayerPubkey,\n    userWalletPubkey,\n    [],\n    amount\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [\n      ...instructions,\n      tradeAccountInstruction,\n      feePayerInstruction,\n      depositInstruction,\n    ],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to deposit fee');\n  } else {\n    return response.transactionId;\n  }\n}\n","import {\n  Transaction,\n  PublicKey,\n  Keypair,\n  sendAndConfirmTransaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { createAssociatedTokenAccountInstruction } from '../instructions';\nimport { findAssociatedTokenAccountPubkey } from '../utils';\n\n/**\n * send mint token\n * @param walletPubkey user wallet pubkey where token will send to\n * @param mintPubkey mint token pubkey\n * @param authorityKeypair keypair that owns mint token\n * @param amount amount to send\n * @returns void\n */\nexport async function sendTransferTokenTransaction(\n  this: ParimutuelWeb3,\n  walletPubkey: PublicKey,\n  mintPubkey: PublicKey,\n  authorityKeypair: Keypair,\n  amount: number\n): Promise<void> {\n  const tradeTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    walletPubkey,\n    mintPubkey\n  );\n\n  const traderTokenAccount = await this.connection.getAccountInfo(\n    tradeTokenAccountPubkey\n  );\n\n  if (!traderTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      tradeTokenAccountPubkey,\n      authorityKeypair.publicKey,\n      walletPubkey,\n      mintPubkey\n    );\n\n    const transaction = new Transaction().add(instruction);\n\n    const signature = await sendAndConfirmTransaction(\n      this.connection,\n      transaction,\n      [authorityKeypair],\n      { commitment: 'confirmed' }\n    );\n\n    if (!signature) {\n      throw new Error('failed to create trader token account');\n    }\n  }\n\n  const splToken = new Token(\n    this.connection,\n    mintPubkey,\n    TOKEN_PROGRAM_ID,\n    authorityKeypair\n  );\n\n  await splToken.mintTo(tradeTokenAccountPubkey, authorityKeypair, [], amount);\n}\n","import BN from 'bn.js';\nimport { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { NetworkUpdateArgs } from '../borsh';\nimport { WalletSigner } from '../types';\nimport { updateNetworkInstruction } from '../instructions';\nimport { TwoTieredFees } from '../borsh'\nimport {\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\n\n/**\n * update network transaction\n * @param userWallet user wallet\n * @param protocolMintPubkey: protocol mint address\n * @param settlementMintPubkey settlement mint address\n * @param protocolProductOraclePubkey: protocol product oracle address\n * @param protocolPriceOraclePubkey: protocol price oracle address\n * @param networkProtocolFeeCollectorPubkey: network protocol fee collector address\n * @param networkSettlementFeeCollectorPubkey: network settlement fee collector address\n * @param protocolTokenRequiredForMinFee: min protocol token required for reduced fee workflow\n * @param minProtocolFeeBps: min protocol fee bps in Tiered and Linear Fee structures\n * @param maxProtocolFeeBps: max protocol fee bps in Tiered and Linear Fee structures\n * @param minSettlementFeeBps: min settlement fee bps in Tiered and Linear Fee structures\n * @param maxSettlementFeeBps: min settlement fee bps in Tiered and Linear Fee structures\n * @returns transaction id\n */\nexport async function sendUpdateNetworkTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  protocolMintPubkey: PublicKey | unknown,\n  settlementMintPubkey: PublicKey | unknown,\n  protocolProductOraclePubkey: PublicKey | unknown,\n  protocolPriceOraclePubkey: PublicKey | unknown,\n  networkProtocolFeeCollectorPubkey: PublicKey | unknown,\n  networkSettlementFeeCollectorPubkey: PublicKey | unknown,\n  protocolTokenRequiredForMinFee: BN = new BN(1000000),\n  minProtocolFeeBps: number = 10,\n  maxProtocolFeeBps: number = 150,\n  minSettlementFeeBps: number = 100,\n  maxSettlementFeeBps: number = 300,\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkSettings = new NetworkUpdateArgs({\n    fees: new TwoTieredFees({\n      version: 1,\n      protocolTokenRequiredForMinFee,\n      minProtocolFeeBps,\n      maxProtocolFeeBps,\n      minSettlementFeeBps,\n      maxSettlementFeeBps,\n    }),\n  });\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount] = await this.connection.getMultipleAccountsInfo([\n    networkPubkey,\n  ]);\n\n  if (!networkAccount) {\n    throw new Error('no network or market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n\n  const ix = await updateNetworkInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    networkSettings,\n    networkPubkey,\n    userWalletPubkey, // User must be network authority\n    protocolProductOraclePubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolProductOracle),\n    protocolPriceOraclePubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolPriceOracle),\n    networkProtocolFeeCollectorPubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolFeeCollector),\n    networkSettlementFeeCollectorPubkey as PublicKey || new PublicKey(decodedNetworkAccount.settlementFeeCollector),\n    protocolMintPubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolToken),\n    settlementMintPubkey as PublicKey || new PublicKey(decodedNetworkAccount.settlementToken)\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [ix],\n    signers,\n    'max',\n    signers.length > 0,\n    false\n  );\n\n  if (!response) {\n    throw new Error(\n      `failed to update network: ${networkPubkey.toBase58()}`\n    );\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { DestroyParimutuelArgs } from '../borsh';\nimport { createDestroyParimutuelInstruction } from '../instructions';\nimport {\n  findHoneypotPubkey,\n  decodeNetwork,\n  decodeParimutuel,\n  decodeMarket,\n  sendTransaction,\n  findNetworkSettlementFeeCollectorPubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDestroyParimutuelTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const parimutuelCreatorPubkey = new PublicKey(\n    decodedParimutuelAccount.creator\n  );\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const settlementFeeCollector = await findNetworkSettlementFeeCollectorPubkey(networkPubkey, settlementMintPubkey)\n\n  const instruction = await createDestroyParimutuelInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new DestroyParimutuelArgs(),\n    networkPubkey,\n    marketPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    parimutuelPubkey,\n    parimutuelCreatorPubkey,\n    honeypotPubkey,\n    settlementMintPubkey,\n    settlementFeeCollector\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to destroy parimutuel');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { DestroyPositionEntryArgs } from '../borsh';\nimport { createDestroyPositionEntryInstruction } from '../instructions';\nimport {\n  decodeParimutuel,\n  sendTransaction,\n  findTraderPositionAccountPubkey,\n  findEntryAccountPubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDestroyPositionEntryTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  traderWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  sequenceNumber: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const networkPubkey = NETWORK;\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    sequenceNumber\n  );\n\n  const instruction = await createDestroyPositionEntryInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new DestroyPositionEntryArgs(),\n    networkPubkey,\n    marketPubkey,\n    traderWalletPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to destroy position entry');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { DestroyPositionArgs } from '../borsh';\nimport { createDestroyPositionInstruction } from '../instructions';\nimport {\n  decodeParimutuel,\n  sendTransaction,\n  findTraderPositionAccountPubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDestroyPositionTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  traderWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const networkPubkey = NETWORK;\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const instruction = await createDestroyPositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new DestroyPositionArgs(),\n    networkPubkey,\n    marketPubkey,\n    traderWalletPubkey,\n    traderPositionAccountPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to destroy position');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { ParimutuelWeb3 } from '../web3';\nimport { decodeLinearFees, decodeNetwork } from '../utils';\nimport { ParimutuelNetwork } from '../types';\n\nexport async function getNetwork(\n  this: ParimutuelWeb3\n): Promise<ParimutuelNetwork> {\n  const { NETWORK } = this.config;\n  const networkPubkey = NETWORK;\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('Failed to find network account');\n  }\n\n  const data = Buffer.from(networkAccount.data);\n  return {\n    pubkey: networkPubkey,\n    account: networkAccount,\n    info: {\n      network: decodeNetwork(data),\n      linearFees: decodeLinearFees(data.slice(-65)),\n    },\n  };\n}\n","import { getMarketPubkeys } from './../utils/parimutuel';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { decodeFixedFees, decodeMarket } from '../utils';\nimport { MarketPairEnum, ParimutuelMarket } from '../types';\nimport { notEmpty } from '../utils';\n\nexport async function getMarkets(\n  this: ParimutuelWeb3,\n  marketPair: MarketPairEnum\n): Promise<ParimutuelMarket[]> {\n  const markets = getMarketPubkeys(this.config, marketPair);\n  const marketPubkeys = markets.map((market) => market.pubkey);\n\n  const marketAccounts = await this.connection.getMultipleAccountsInfo(\n    marketPubkeys\n  );\n\n  return marketAccounts\n    .map((account, index) => {\n      if (!account) return null;\n\n      const data = Buffer.from(account.data);\n      return {\n        pubkey: marketPubkeys[index],\n        account: account,\n        info: {\n          market: decodeMarket(data),\n          fixedFees: decodeFixedFees(data.slice(-65)),\n        },\n      };\n    })\n    .filter(notEmpty);\n}\n","import { PublicKey } from '@solana/web3.js';\nimport _uniqWith from 'lodash/uniqWith';\nimport _isEqual from 'lodash/isEqual';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { MarketPubkey, ParimutuelAccount } from '../types';\nimport {\n  getUpcomingTimes,\n  getHistoricalTimes,\n  decodeParimutuel,\n  findParimutuelPubkey,\n  notEmpty,\n  getMultipleAccounts,\n} from '../utils';\n\nexport async function getParimutuel(\n  this: ParimutuelWeb3,\n  parimutuelPubkey: PublicKey\n): Promise<ParimutuelAccount> {\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  return {\n    pubkey: parimutuelPubkey,\n    account: parimutuelAccount,\n    info: {\n      parimutuel: decodeParimutuel(parimutuelAccount.data),\n    },\n  };\n}\n\nexport async function getParimutuels(\n  this: ParimutuelWeb3,\n  markets: MarketPubkey[],\n  number?: number\n): Promise<ParimutuelAccount[]> {\n  if (!markets) return [];\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const upcoming = markets\n    .map((market) => {\n      const { duration } = market;\n      return getUpcomingTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  const historical = markets\n    .map((market) => {\n      const { duration } = market;\n      return getHistoricalTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  // get unique time\n  const times = _uniqWith([...historical, ...upcoming], _isEqual);\n\n  const parimutuelPubkeys = await Promise.all(\n    times.map(async (time) => {\n      const pubkey = await findParimutuelPubkey(\n        PARIMUTUEL_PROGRAM_ID,\n        new PublicKey(time.marketPubkey),\n        0,\n        time.startTime,\n        time.startTime\n      );\n      return pubkey;\n    })\n  );\n\n  const parimutuelAccounts = await getMultipleAccounts(\n    this.connection,\n    parimutuelPubkeys.map((pubkey) => pubkey)\n  );\n\n  const filteredAccounts = parimutuelAccounts\n    .map((parimutuel, index) => {\n      if (!parimutuel) return null;\n      return {\n        pubkey: parimutuelPubkeys[index],\n        account: parimutuel.account,\n        info: {\n          parimutuel: decodeParimutuel(parimutuel.account.data),\n        },\n      };\n    })\n    .filter(notEmpty);\n\n  return filteredAccounts;\n}\n\nexport async function getUpcomingParimutuels(\n  this: ParimutuelWeb3,\n  markets: MarketPubkey[],\n  number?: number\n): Promise<ParimutuelAccount[]> {\n  if (!markets) return [];\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const upcoming = markets\n    .map((market) => {\n      const { duration } = market;\n      return getUpcomingTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  const parimutuelPubkeys = await Promise.all(\n    upcoming.map(async (time) => {\n      const pubkey = await findParimutuelPubkey(\n        PARIMUTUEL_PROGRAM_ID,\n        new PublicKey(time.marketPubkey),\n        0,\n        time.startTime,\n        time.startTime\n      );\n      return pubkey;\n    })\n  );\n\n  const parimutuelAccounts = await this.connection.getMultipleAccountsInfo(\n    parimutuelPubkeys.map((pubkey) => pubkey)\n  );\n\n  const filteredAccounts = parimutuelAccounts\n    .map((parimutuel, index) => {\n      if (!parimutuel) return null;\n      return {\n        pubkey: parimutuelPubkeys[index],\n        account: parimutuel,\n        info: {\n          parimutuel: decodeParimutuel(parimutuel.data),\n        },\n      };\n    })\n    .filter(notEmpty);\n\n  return filteredAccounts;\n}\n\nexport async function getLiveParimutuels(\n  this: ParimutuelWeb3,\n  markets: MarketPubkey[],\n  number?: number\n): Promise<ParimutuelAccount[]> {\n  if (!markets) return [];\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const historical = markets\n    .map((market) => {\n      const { duration } = market;\n      return getHistoricalTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  const parimutuelPubkeys = await Promise.all(\n    historical.map(async (time) => {\n      const pubkey = await findParimutuelPubkey(\n        PARIMUTUEL_PROGRAM_ID,\n        new PublicKey(time.marketPubkey),\n        0,\n        time.startTime,\n        time.startTime\n      );\n      return pubkey;\n    })\n  );\n\n  const parimutuelAccounts = await this.connection.getMultipleAccountsInfo(\n    parimutuelPubkeys.map((pubkey) => pubkey)\n  );\n\n  const filteredAccounts = parimutuelAccounts\n    .map((parimutuel, index) => {\n      if (!parimutuel) return null;\n      return {\n        pubkey: parimutuelPubkeys[index],\n        account: parimutuel,\n        info: {\n          parimutuel: decodeParimutuel(parimutuel.data),\n        },\n      };\n    })\n    .filter(notEmpty);\n\n  return filteredAccounts;\n}\n","import {\n  PublicKey,\n  GetProgramAccountsConfig,\n  MemcmpFilter,\n  DataSizeFilter,\n} from '@solana/web3.js';\nimport _get from 'lodash/get';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  decodeParimutuel,\n  decodeTraderPositionAccount,\n  getMultipleAccounts,\n} from '../utils';\nimport { ParimutuelMarket, MarketInfo, ParimutuelPosition } from '../types';\n\nexport async function getUserPositions(\n  this: ParimutuelWeb3,\n  userWalletPubkey: PublicKey,\n  markets: ParimutuelMarket[]\n): Promise<ParimutuelPosition[]> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const traderPositionAccounts = await this.connection.getProgramAccounts(\n    PARIMUTUEL_PROGRAM_ID,\n    {\n      filters: [\n        { dataSize: 172 } as DataSizeFilter,\n        {\n          memcmp: {\n            offset: 74,\n            bytes: userWalletPubkey?.toBase58(),\n          },\n        } as MemcmpFilter,\n      ],\n    } as GetProgramAccountsConfig\n  );\n\n  const decodedAccounts = traderPositionAccounts.map((account) =>\n    decodeTraderPositionAccount(account.account.data)\n  );\n\n  const parimutuelAccounts = await getMultipleAccounts(\n    this.connection,\n    decodedAccounts.map((account) => new PublicKey(account.parimutuel))\n  );\n\n  const positions = traderPositionAccounts.map((account, index) => {\n    const parimutuel = decodeParimutuel(\n      _get(parimutuelAccounts, [index, 'account', 'data']) as Buffer\n    );\n    const position = decodeTraderPositionAccount(account.account.data);\n\n    return {\n      pubkey: account.pubkey,\n      account: account.account,\n      info: {\n        parimutuelPubkey: new PublicKey(position.parimutuel),\n        parimutuel,\n        market: _get(markets, [parimutuel.marketKey, 'info']) as MarketInfo,\n        position,\n      },\n    };\n  });\n\n  return positions;\n}\n\nexport async function getParimutuelPositions(\n  this: ParimutuelWeb3,\n  parimutuelPubkey: PublicKey\n): Promise<ParimutuelPosition[]> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const traderPositionAccounts = await this.connection.getProgramAccounts(\n    PARIMUTUEL_PROGRAM_ID,\n    {\n      filters: [\n        { dataSize: 172 } as DataSizeFilter,\n        {\n          memcmp: {\n            offset: 42,\n            bytes: parimutuelPubkey?.toBase58(),\n          },\n        } as MemcmpFilter,\n      ],\n    } as GetProgramAccountsConfig\n  );\n\n  const decodedAccounts = traderPositionAccounts.map((account) =>\n    decodeTraderPositionAccount(account.account.data)\n  );\n\n  const parimutuelAccounts = await getMultipleAccounts(\n    this.connection,\n    decodedAccounts.map((account) => new PublicKey(account.parimutuel))\n  );\n\n  const positions = traderPositionAccounts.map((account, index) => {\n    const parimutuel = decodeParimutuel(\n      _get(parimutuelAccounts, [index, 'account', 'data']) as Buffer\n    );\n    const position = decodeTraderPositionAccount(account.account.data);\n\n    return {\n      pubkey: account.pubkey,\n      account: account.account,\n      info: {\n        parimutuelPubkey: new PublicKey(position.parimutuel),\n        parimutuel,\n        market: _get([], [parimutuel.marketKey, 'info']) as MarketInfo,\n        position,\n      },\n    };\n  });\n\n  return positions;\n}\n","import {\n  PublicKey,\n  GetProgramAccountsConfig,\n  MemcmpFilter,\n  DataSizeFilter,\n} from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  decodeTraderEntryAccount,\n  decodeTraderPositionAccount,\n  getMultipleAccounts,\n} from '../utils';\nimport { ParimutuelEntry } from '../types';\n\nexport async function getEntries(\n  this: ParimutuelWeb3,\n  traderPositionPubkey: PublicKey\n): Promise<ParimutuelEntry[]> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const traderEntryAccounts = await this.connection.getProgramAccounts(\n    PARIMUTUEL_PROGRAM_ID,\n    {\n      filters: [\n        { dataSize: 123 } as DataSizeFilter,\n        {\n          memcmp: {\n            offset: 34,\n            bytes: traderPositionPubkey?.toBase58(),\n          },\n        } as MemcmpFilter,\n      ],\n    } as GetProgramAccountsConfig\n  );\n\n  const decodedEntryAccounts = traderEntryAccounts.map((account) =>\n    decodeTraderEntryAccount(account.account.data)\n  );\n\n  const traderPositionPubkeys = decodedEntryAccounts.map(\n    (account) => new PublicKey(account.traderPosition)\n  );\n\n  const traderPositionAccounts = await getMultipleAccounts(\n    this.connection,\n    traderPositionPubkeys\n  );\n\n  const decodedPositionAccounts = traderPositionAccounts.map((account) => {\n    if (account) {\n      return decodeTraderPositionAccount(account.account.data);\n    } else return null;\n  });\n\n  const entries = traderEntryAccounts.map((account, index) => {\n    const positionAccount = decodedPositionAccounts[index];\n\n    return {\n      pubkey: account.pubkey,\n      account: account.account,\n      info: {\n        parimutuelPubkey: new PublicKey(\n          positionAccount !== null ? positionAccount.parimutuel : ''\n        ),\n        entry: decodedEntryAccounts[index],\n      },\n    };\n  });\n\n  return entries;\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { ParimutuelFees } from '../types';\nimport { decodeAccount } from '../utils';\nimport {\n  findMarketProtocolFeeCollectorPubkey,\n  findMarketSettlementFeeCollectorPubkey,\n  findNetworkProtocolFeeCollectorPubkey,\n  findNetworkSettlementFeeCollectorPubkey,\n  decodeNetwork,\n} from '../utils';\n\nexport async function getFees(\n  this: ParimutuelWeb3,\n  networkWalletPubkey: PublicKey,\n  marketWalletPubkey: PublicKey\n): Promise<ParimutuelFees> {\n  let networkProtocolFeeAmount = 0;\n  let networkSettlementFeeAmount = 0;\n  let marketProtocolFeeAmount = 0;\n  let marketSettlementFeeAmount = 0;\n\n  const {\n    NETWORK,\n    NETWORK_PROTOCOL_FEE_COLLECTOR,\n    MARKET_PROTOCOL_FEE_COLLECTOR,\n  } = this.config;\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const networkProtocolFeeCollectorPubkey =\n    await findNetworkProtocolFeeCollectorPubkey(\n      networkWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const networkSettlementFeeCollectorPubkey =\n    await findNetworkSettlementFeeCollectorPubkey(\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const marketProtocolFeeCollectorPubkey =\n    await findMarketProtocolFeeCollectorPubkey(\n      marketWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const marketSettlementFeeCollectorPubkey =\n    await findMarketSettlementFeeCollectorPubkey(\n      marketWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const [\n    networkProtocolFeeCollectorAccount,\n    networkSettlementFeeCollectorAccount,\n    marketProtocolFeeCollectorAccount,\n    marketSettlementFeeCollectorAccount,\n  ] = await this.connection.getMultipleAccountsInfo([\n    NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n    networkSettlementFeeCollectorPubkey,\n    MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n    marketSettlementFeeCollectorPubkey,\n  ]);\n\n  if (networkProtocolFeeCollectorAccount) {\n    const decodedProtocolFeeCollector = decodeAccount(\n      networkProtocolFeeCollectorAccount.data\n    );\n    networkProtocolFeeAmount = Number(decodedProtocolFeeCollector.amount) || 0;\n  }\n\n  if (networkSettlementFeeCollectorAccount) {\n    const decodedSettlementFeeCollector = decodeAccount(\n      networkSettlementFeeCollectorAccount.data\n    );\n    networkSettlementFeeAmount = Number(decodedSettlementFeeCollector.amount) || 0;\n  }\n\n  if (marketProtocolFeeCollectorAccount) {\n    const decodedProtocolFeeCollector = decodeAccount(\n      marketProtocolFeeCollectorAccount.data\n    );\n    marketProtocolFeeAmount = Number(decodedProtocolFeeCollector.amount) || 0;\n  }\n\n  if (marketSettlementFeeCollectorAccount) {\n    const decodedSettlementFeeCollector = decodeAccount(\n      marketSettlementFeeCollectorAccount.data\n    );\n    marketSettlementFeeAmount = Number(decodedSettlementFeeCollector.amount) || 0;\n  }\n\n  return {\n    network: {\n      protocolFeeAccountPubkey:\n        NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n      protocolFeeAmount: networkProtocolFeeAmount,\n      settlementFeeAccountPubkey: networkSettlementFeeCollectorPubkey,\n      settlementFeeAmount: networkSettlementFeeAmount,\n    },\n    market: {\n      protocolFeeAccountPubkey:\n        MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n      protocolFeeAmount: marketProtocolFeeAmount,\n      settlementFeeAccountPubkey: marketSettlementFeeCollectorPubkey,\n      settlementFeeAmount: marketSettlementFeeAmount,\n    },\n  };\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { decodeTraderAccount, findNetworkTraderAccountPubkey } from '../utils';\nimport { ParimutuelTraderAccount } from '../types';\n\nexport async function getNetworkTraderAccount(\n  this: ParimutuelWeb3,\n  userWalletPubkey: PublicKey,\n  networkPubkey: PublicKey\n): Promise<ParimutuelTraderAccount> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderAccount = await this.connection.getAccountInfo(\n    networkTraderAccountPubkey\n  );\n\n  if (!networkTraderAccount) {\n    throw new Error('no trader account');\n  }\n\n  return {\n    pubkey: networkTraderAccountPubkey,\n    account: networkTraderAccount,\n    info: {\n      traderAccount: decodeTraderAccount(networkTraderAccount?.data),\n    },\n  };\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  findNetworkTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeAccount,\n} from '../utils';\nimport { ParimutuelTraderFeePayerAccount } from '../types';\n\nexport async function getTraderFeePayerAccount(\n  this: ParimutuelWeb3,\n  userWalletPubkey: PublicKey,\n  networkPubkey: PublicKey\n): Promise<ParimutuelTraderFeePayerAccount> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderFeePayerAccount = await this.connection.getAccountInfo(\n    networkTraderFeePayerPubkey\n  );\n\n  if (!traderFeePayerAccount) {\n    throw new Error('no fee payer account');\n  }\n\n  return {\n    pubkey: networkTraderFeePayerPubkey,\n    account: traderFeePayerAccount,\n    info: {\n      tokenAccount: {\n        pubkey: networkTraderFeePayerPubkey.toBase58(),\n        account: traderFeePayerAccount,\n        info: decodeAccount(traderFeePayerAccount.data),\n      },\n    },\n  };\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { Store } from '../borsh';\nimport { decodeFixedFees, decodeStore } from '../utils';\n\nexport async function getStore(\n  this: ParimutuelWeb3,\n  storePubkey: PublicKey\n): Promise<Store> {\n  const account = await this.connection.getAccountInfo(storePubkey);\n\n  if (!account) {\n    throw new Error('Failed to find account');\n  }\n\n  const data = Buffer.from(account.data);\n  const store = decodeStore(data);\n  const storeFees = decodeFixedFees(data.slice(-65));\n  store.fee = storeFees;\n  return store;\n}\n","import { Connection, clusterApiUrl } from '@solana/web3.js';\n\nimport {\n  sendAttachCookieTransaction,\n  sendCreateParimutuelTransaction,\n  sendCreateStoreTransaction,\n  sendDepositFeeTransaction,\n  sendPlacePositionTransaction,\n  getPlacePositionInstruction,\n  sendPlacePositionWithOperatorTransaction,\n  sendSettlePositionTransaction,\n  sendTransferTokenTransaction,\n  sendUpdatePriceTransaction,\n  sendWithdrawFeeTransaction,\n  sendUpdateNetworkTransaction,\n  sendDestroyParimutuelTransaction,\n  sendDestroyPositionTransaction,\n  sendDestroyPositionEntryTransaction,\n} from '../transactions';\nimport {\n  getFees,\n  getMarkets,\n  getNetwork,\n  getStore,\n  getNetworkTraderAccount,\n  getParimutuel,\n  getParimutuels,\n  getUserPositions,\n  getParimutuelPositions,\n  getTraderFeePayerAccount,\n  getEntries,\n} from '../queries';\n\nimport { ParimutuelConfig } from './config';\nimport { ParimutuelWeb3Interface } from './interface';\n\nexport class ParimutuelWeb3 implements ParimutuelWeb3Interface {\n  config: ParimutuelConfig;\n  connection: Connection;\n\n  constructor(config: ParimutuelConfig, connection?: Connection) {\n    this.config = config;\n    this.connection = new Connection(\n      config.SOLANA_CLUSTER_URL ?? clusterApiUrl('devnet'),\n      'recent'\n    );\n\n    if (connection) {\n      this.connection = connection;\n    }\n  }\n\n  updateNetwork = sendUpdateNetworkTransaction.bind(this);\n\n  createParimutuel = sendCreateParimutuelTransaction.bind(this);\n\n  updatePrice = sendUpdatePriceTransaction.bind(this);\n\n  placePosition = sendPlacePositionTransaction.bind(this);\n\n  getPlacePositionInstruction = getPlacePositionInstruction.bind(this);\n\n  placePositionWithOperator = sendPlacePositionWithOperatorTransaction.bind(this);\n\n  settlePosition = sendSettlePositionTransaction.bind(this);\n\n  destroyParimutuel = sendDestroyParimutuelTransaction.bind(this);\n\n  destroyPosition = sendDestroyPositionTransaction.bind(this);\n\n  destroyPositionEntry = sendDestroyPositionEntryTransaction.bind(this);\n\n  transferToken = sendTransferTokenTransaction.bind(this);\n\n  depositFee = sendDepositFeeTransaction.bind(this);\n\n  withdrawFee = sendWithdrawFeeTransaction.bind(this);\n\n  createStore = sendCreateStoreTransaction.bind(this);\n\n  attachCookie = sendAttachCookieTransaction.bind(this);\n\n  getFees = getFees.bind(this);\n\n  getMarkets = getMarkets.bind(this);\n\n  getNetwork = getNetwork.bind(this);\n\n  getNetworkTraderAccount = getNetworkTraderAccount.bind(this);\n\n  getParimutuel = getParimutuel.bind(this);\n\n  getParimutuels = getParimutuels.bind(this);\n\n  getUserPositions = getUserPositions.bind(this);\n\n  getParimutuelPositions = getParimutuelPositions.bind(this);\n\n  getEntries = getEntries.bind(this);\n\n  getStore = getStore.bind(this);\n\n  getTraderFeePayerAccount = getTraderFeePayerAccount.bind(this);\n}\n","// old method\nexport const calculateOdd = (position: number, total: number): string =>\n  position && total ? Number(1 / (position / total)).toFixed(2) : \"0\";\n// new method\nexport const calculateNetOdd = (position: number, total: number, rake: number): string =>\n  position && total ? Number(total * (1.0 - rake) / position).toFixed(2) : \"0\";","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { MarketArgs, schema } from '../borsh';\n\nexport const createMarketInstruction = async (\n  programId: PublicKey,\n  settings: MarketArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  marketWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  marketProtocolFeeCollectorPubkey: PublicKey,\n  marketSettlementFeeCollectorPubkey: PublicKey,\n  payerPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: marketProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { TraderSequenceNumberArgs, schema } from '../borsh';\n\nexport const createTraderSequenceNumberInstruction = async (\n  programId: PublicKey,\n  settings: TraderSequenceNumberArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  traderSequenceNumberPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: traderSequenceNumberPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { SettlePositionArgs, schema } from '../borsh';\n\nexport const createTransferFundsInstruction = async (\n  programId: PublicKey,\n  settings: SettlePositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  marketTraderAccountPubkey: PublicKey,\n  marketProtocolFeeCollectorPubkey: PublicKey,\n  marketSettlementFeeCollectorPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  storePubkey: PublicKey,\n  storeProtocolFeeCollectorPubkey: PublicKey,\n  storeSettlementFeeCollectorPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { MintData } from '../types';\n\nexport const getMintDecimals = (\n  mints: MintData[],\n  cryptoAddress: string\n): number => {\n  const found = mints.find((mint) => mint.address === cryptoAddress);\n  return found?.mint.decimals ?? 0;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string =>\n  `${address.slice(0, chars)}...${address.slice(-chars)}`;\n","import { PublicKey, Keypair } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { NetworkTraderFeePayerArgs } from '../borsh';\nimport { createNetworkTraderFeePayerInstruction } from '../instructions';\nimport {\n  findNetworkTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateNetworkTraderFeePayerTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const networkTraderFeePayerInstruction =\n    await createNetworkTraderFeePayerInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new NetworkTraderFeePayerArgs(),\n      networkPubkey,\n      userWallet.publicKey,\n      protocolMintPubkey,\n      networkTraderAccountPubkey,\n      networkTraderFeePayerPubkey\n    );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [networkTraderFeePayerInstruction],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create fee payer account');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { TransactionInstruction, Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { TraderAccountsArgs } from '../borsh';\nimport {\n  createTraderAccountInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport {\n  findAssociatedTokenAccountPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateTraderAccountTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  marketPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [...instructions, traderAccountInstruction],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create trader account');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { TraderPositionAccountArgs } from '../borsh';\nimport { createTraderPositionAccountInstruction } from '../instructions';\nimport {\n  findTraderPositionAccountPubkey,\n  decodeParimutuel,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateTraderPositionAccountTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [traderPositionAccountInstruction],\n    signers,\n    'single',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create trader account');\n  } else {\n    return response.transactionId;\n  }\n}\n"],"names":["Version","PARIMUTUEL_SEED","NETWORK_SEED","MARKET_SEED","STORE_SEED","HONEYPOT_SEED","NETWORK_TRADER_ACCOUNT_SEED","NETWORK_FEE_PAYER_SEED","MARKET_TRADER_ACCOUNT_SEED","TRADER_POSITION_ACCOUNT_SEED","TRADER_ENTRY_ACCOUNT_SEED","TRADER_SEQUENCE_SEED","createAssociatedTokenAccountInstruction","associatedTokenPubkey","payerPubkey","walletPubkey","splTokenMintPubkey","TransactionInstruction","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","ASSOCIATED_TOKEN_PROGRAM_ID","data","Buffer","from","FixedFees","args","version","protocolFeeBps","settlementFeeBps","_padding1","_padding2","_padding8","BN","_padding16","_padding8_0","_padding8_1","_padding8_2","_padding8_3","this","LinearFees","protocolTokenRequiredForMinFee","minProtocolFeeBps","maxProtocolFeeBps","minSettlementFeeBps","maxSettlementFeeBps","_padding4","CryptoEnum","MarketEnum","MarketTypeEnum","MarketPairEnum","CurrencyEnum","DurationEnum","MarketStatusEnum","PositionSideEnum","TwoTieredFees","_this","Network","bumpSeed","authority","protocolToken","settlementToken","protocolProductOracle","protocolPriceOracle","protocolFeeCollector","settlementFeeCollector","fee","Store","marketKey","wallet","Market","network","underlyingProductOracle","underlyingPriceOracle","duration","contractSize","Parimutuel","strike","index","slot","marketOpen","marketClose","timeWindowStart","honeypot","numPositions","numPositionsSettled","numPositionsDestroyed","expired","rewardPerShare","activeLongPositions","activeShortPositions","networkFees","marketFees","creator","TraderAccount","traderWallet","aggregationLevelKey","profit","loss","wins","losses","TraderPositionAccount","sequenceNumber","parimutuel","hasStore","store","longPosition","shortPosition","numEntries","paid","payout","TraderEntryAccount","traderPosition","direction","amount","timestamp","TraderSequenceNumber","traderKey","NetworkArgs","instruction","fees","NetworkUpdateArgs","MarketArgs","StoreArgs","ParimutuelArgs","UpdatePriceArgs","TraderAccountsArgs","TraderPositionAccountArgs","TraderSequenceNumberArgs","AttachCookieArgs","UpdatePositionArgs","size","side","seq","SettlePositionArgs","NetworkTraderFeePayerArgs","WithdrawFeeArgs","DestroyParimutuelArgs","DestroyPositionArgs","DestroyPositionEntryArgs","schema","Map","kind","fields","createAttachCookieInstruction","settings","networkPubkey","marketPubkey","userWalletPubkey","parimutuelPubkey","storePubkey","traderPositionAccountPubkey","serialize","updateNetworkInstruction","networkWalletPubkey","protocolProductOraclePubkey","protocolPriceOraclePubkey","networkProtocolFeeCollectorPubkey","networkSettlementFeeCollectorPubkey","protocolMintPubkey","settlementMintPubkey","createUpdatePriceInstruction","honeypotPubkey","parimutuelCreatorPubkey","SYSVAR_CLOCK_PUBKEY","createNetworkTraderFeePayerInstruction","networkTraderAccountPubkey","networkTraderFeePayerPubkey","createTraderAccountInstruction","protocolTokenAccountPubkey","settlementTokenAccountPubkey","marketTraderAccountPubkey","createTraderPositionAccountInstruction","createParimutuelInstruction","createStoreInstruction","storeWalletPubkey","storeProtocolFeeCollectorPubkey","storeSettlementFeeCollectorPubkey","createPlacePositionInstruction","entryAccountPubkey","createSettlePositionInstruction","marketProtocolFeeCollectorPubkey","marketSettlementFeeCollectorPubkey","createWithdrawFeeInstruction","createDestroyParimutuelInstruction","createDestroyPositionEntryInstruction","createDestroyPositionInstruction","extendBorsh","BinaryReader","prototype","readPubkey","array","readFixedArray","PublicKey","BinaryWriter","writePubkey","value","writeFixedArray","toBuffer","readPubkeyAsString","base58","encode","writePubkeyAsString","decode","getMarketPubkeys","config","marketPair","market","_get","markets","push","notEmpty","findProgramAddress","seeds","key","reduce","acc","toString","window","cached","localStorage","_localStorage","getItem","JSON","parse","parseInt","nonce","result","setItem","stringify","toBase58","findParimutuelPubkey","marketPubKey","Uint8Array","toArray","findNetworkProtocolFeeCollectorPubkey","findNetworkSettlementFeeCollectorPubkey","findMarketProtocolFeeCollectorPubkey","marketWalletPubkey","findMarketSettlementFeeCollectorPubkey","findAssociatedTokenAccountPubkey","mintPubkey","findNetworkTraderAccountPubkey","findMarketTraderAccountPubkey","findHoneypotPubkey","findTraderPositionAccountPubkey","findEntryAccountPubkey","findNetworkTraderFeePayerPubkey","findStorePubkey","getMultipleAccountsCore","connection","pubkeys","map","commitment","_rpcRequest","res","error","Error","join","message","account","lamports","executable","owner","idx","getMultipleAccounts","length","batches","_chunk","Promise","all","batch","results","flat","getHistoricalTimes","number","currentTime","Date","getTime","startTime","Array","num","reverse","getUpcomingTimes","decodeAccount","accountInfo","AccountLayout","mint","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","state","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthority","closeAuthorityOption","decodeFixedFees","buffer","deserializeUnchecked","decodeLinearFees","decodeNetwork","decodeStore","decodeMarket","decodeParimutuel","decodeTraderAccount","decodeTraderPositionAccount","decodeTraderEntryAccount","pact","o","onRejected","s","getUnixTs","sleep","ms","resolve","setTimeout","ConfigEnum","sendSignedTransaction","signedTransaction","retry","timeout","confirmation","rawTransaction","sendRawTransaction","skipPreflight","transactionId","done","console","log","status","confirmations","err","subId","reject","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","_connection$_signatur","removeSignatureListener","awaitTransactionSignatureConfirmation","simulateResult","logs","i","line","startsWith","slice","transaction","getRecentBlockhash","recentBlockhash","_connection$getRecent","blockhash","signData","serializeMessage","encodedTransaction","_serialize","encoding","simulateTransaction","_simulateTransaction","sendTransaction","userWallet","instructions","signers","includesFeePayer","block","beforeSend","_connection$getRecent2","setSigners","publicKey","partialSign","signTransaction","Transaction","forEach","add","sendAttachCookieTransaction","_this2","PARIMUTUEL_PROGRAM_ID","NETWORK","hasOwnProperty","getAccountInfo","parimutuelAccount","decodedParimutuelAccount","attachCookieInstruction","response","sendCreateParimutuelTransaction","parimutuelSettings","getMultipleAccountsInfo","networkAccount","marketAccount","decodedNetworkAccount","decodeMarketAccount","createInstruction","sendCreateStoreTransaction","FixedFeesV1","settlementFeeCollectorAccount","storeInstruction","sendUpdatePriceTransaction","networkSettlementFeeCollector","updatePriceInstruction","getPlacePositionInstruction","_this6","settlementTokenAccount","traderAccountInstruction","feePayerInstruction","traderPositionAccountInstruction","updatePositionInstruction","sendPlacePositionWithOperatorTransaction","_this4","tradeSize","OPERATOR_FEE","Token","getAssociatedTokenAddress","sourceAccount","mATA","BONK_MINT","USDC_MINT","sendFeeToOperatorInstruction","createTransferInstruction","sendPlacePositionTransaction","sendSettlePositionTransaction","traderWalletPubkey","NETWORK_PROTOCOL_FEE_COLLECTOR","MARKET_PROTOCOL_FEE_COLLECTOR","networkSettlementFeeCollectorAccount","marketProtocolFeeCollectorAccount","marketSettlementFeeCollectorAccount","protocolTokenAccount","positionAccount","sendWithdrawFeeTransaction","withdrawInstruction","sendDepositFeeTransaction","tradeAccountInstruction","walletTokenAccountPubkey","walletTokenAccount","walletAccountInstruction","undefined","depositInstruction","sendTransferTokenTransaction","authorityKeypair","tradeTokenAccountPubkey","traderTokenAccount","splToken","mintTo","sendAndConfirmTransaction","signature","sendUpdateNetworkTransaction","networkSettings","ix","sendDestroyParimutuelTransaction","sendDestroyPositionEntryTransaction","sendDestroyPositionTransaction","getNetwork","info","linearFees","getMarkets","marketPubkeys","marketAccounts","fixedFees","filter","getParimutuels","upcoming","historical","times","_uniqWith","_isEqual","time","parimutuelPubkeys","parimutuelAccounts","getParimutuel","getParimutuelPositions","getProgramAccounts","filters","dataSize","memcmp","offset","bytes","traderPositionAccounts","decodedAccounts","position","getUserPositions","getEntries","traderPositionPubkey","traderEntryAccounts","decodedEntryAccounts","traderPositionPubkeys","decodedPositionAccounts","entry","getFees","networkProtocolFeeAmount","networkSettlementFeeAmount","marketProtocolFeeAmount","marketSettlementFeeAmount","networkProtocolFeeCollectorAccount","decodedProtocolFeeCollector","Number","decodedSettlementFeeCollector","protocolFeeAccountPubkey","protocolFeeAmount","settlementFeeAccountPubkey","settlementFeeAmount","getNetworkTraderAccount","networkTraderAccount","traderAccount","getTraderFeePayerAccount","traderFeePayerAccount","tokenAccount","getStore","storeFees","DEV_CONFIG","HXRO_MINT","oracles","HXRO_USD_ORACLE","HXRO_PRICE_ORACLE","SOL_USD_ORACLE","SOL_PRICE_ORACLE","BTC_USD_ORACLE","BTC_PRICE_ORACLE","ETH_USD_ORACLE","ETH_PRICE_ORACLE","SOLUSD","MARKET_60S","MARKET_300S","MARKET_900S","MARKET_3600S","MARKET_86400S","BTCUSD","ETHUSD","DEV_BONK_CONFIG","SOLANA_CLUSTER_URL","STAGING_BONK_CONFIG","STAGING_CONFIG","DEVNET_CONFIG","MAINNET_CONFIG","updateNetwork","bind","createParimutuel","updatePrice","placePosition","placePositionWithOperator","settlePosition","destroyParimutuel","destroyPosition","destroyPositionEntry","transferToken","depositFee","withdrawFee","createStore","attachCookie","Connection","clusterApiUrl","total","rake","toFixed","traderSequenceNumberPubkey","MintLayout","span","mintInfo","mintAuthority","mintAuthorityOption","supply","freezeAuthority","freezeAuthorityOption","underlyingProductOraclePubkey","underlyingPriceOraclePubkey","protocolFeeCollectorPubkey","settlementFeeCollectorPubkey","unixTime","moment","unix","format","hours","Math","floor","minutes","seconds","SETTLED","LIVE","UPCOMING","mints","cryptoAddress","found","find","address","decimals","Boolean","toNumber","MarketV1","NetworkV1","ParimutuelV1","StoreV1","TraderAccountV1","ParimutuelTraderPositionAccountV1","TraderSequenceNumberV1","networkTraderFeePayerInstruction","chars"],"mappings":"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"}